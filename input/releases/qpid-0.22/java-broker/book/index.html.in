<div class="docbook"><div class="book" title="AMQP Messaging Broker (Java)"><div class="titlepage"><div><div><h1 class="title"><a id="idp19279616" />AMQP Messaging Broker (Java)</h1></div></div><hr /></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="chapter"><a href="#Java-Broker-Introduction">1. Introduction</a></span></dt><dt><span class="chapter"><a href="#Java-Broker-Installation">2. Installation</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-Introduction">2.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes">2.2. Prerequisites</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Java">2.2.1. Java Platform</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Disk">2.2.2. Disk</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Memory">2.2.3. Memory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-OperatingSystemAccount">2.2.4. Operating System Account</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-Download">2.3. Download</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-Download-Release">2.3.1. Broker Release</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Download-OptionalDependencies">2.3.2. Optional Dependencies</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows">2.4. Installation on Windows</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows-SettingQPIDWORK">2.4.1. Setting the working directory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows-OptionalDependencies">2.4.2. Optional Dependencies</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix">2.5. Installation on UNIX platforms</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix-SettingQPIDWORK">2.5.1. Setting the working directory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix-OptionalDependencies">2.5.2. Optional Dependencies</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Getting-Started">3. Getting Started</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting">3.1. Starting/Stopping the Broker</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting-Stopping-Windows">3.2. Starting/Stopping on Windows</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting-Stopping-Unix">3.3. Starting/Stopping on Unix</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-LogFile">3.4. Log file</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-CommandLine">3.5. Using the command line</a></span></dt></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Concepts">4. Concepts</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Concepts-Virtual-Hosts">4.1. Virtual Hosts</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Exchanges">4.2. Exchanges</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Queues">4.3. Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Ports">4.4. Ports</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Protocols">4.5. Protocols</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Authentication-Providers">4.6. Authentication Providers</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Other-Services">4.7. Other Services</a></span></dt></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Virtual-Hosts">5. Virtual Hosts</a></span></dt><dt><span class="chapter"><a href="#Java-Broker-Exchanges">6. Exchanges</a></span></dt><dt><span class="chapter"><a href="#Java-Broker-Queues">7. Queues</a></span></dt><dd><dl><dt><span class="section"><a href="#Queues-Messaging-Groups">7.1. Messaging Groups</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes">7.2. Other Queue Types</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Introduction">7.2.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Priority">7.2.2. Priority Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Sorted">7.2.3. Sorted Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-LVQ">7.2.4. Last Value Queues (LVQ)</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Create">7.2.5. Creating a Priority, Sorted or LVQ Queue</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-SetLowPrefetch">7.2.6. Low pre-fetch</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Stores">8. Stores</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-Memory-Store">8.1. Memory Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-Memory-Store-Configuration">8.1.1. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-Derby-Store">8.2. Derby Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-Derby-Store-Configuration">8.2.1. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-SQL-Store">8.3. SQL Store</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store">8.4. BDB Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-BDBJE-Download">8.4.1. Oracle BDB JE download</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-BDBJE-Installation">8.4.2. Oracle BDB JE jar installation</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-Configuration">8.4.3. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store">8.5. High Availability BDB Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-BDBJE-Download">8.5.1. Oracle BDB JE download</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-BDBJE-Installation">8.5.2. Oracle BDB JE jar installation</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-Configuration">8.5.3. Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Configuring-And-Managing">9. Configuring And Managing</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files">9.1. Config Files</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Configuration">9.1.1. Configuration file</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Management">9.1.2. Management Configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-JMX-Management">9.1.3. JMX Management Configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-SSL-keystore-configuration">9.1.4. Management SSL key store configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Web-Management">9.1.5. Web Management Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Web-Console">9.2. Web Console</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-REST-API">9.3. REST API</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-REST-API-Overview">9.3.1. REST API Overview</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-JMX">9.4. JMX</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Other-Tooling">9.5. Other Tooling</a></span></dt></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Security">10. Security</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Security-Users-And-Groups">10.1. Users And Groups</a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-Group-Providers">10.2. Configuring Group Providers</a></span></dt><dd><dl><dt><span class="section"><a href="#File-Group-Manager">10.2.1. FileGroupManager</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-Authentication-Providers">10.3. Authentication Providers</a></span></dt><dd><dl><dt><span class="section"><a href="#idp27119984">10.3.1. Password File</a></span></dt><dt><span class="section"><a href="#LDAPAuthManager">10.3.2. LDAP</a></span></dt><dt><span class="section"><a href="#idp27129024">10.3.3. Kerberos</a></span></dt><dt><span class="section"><a href="#ExternalAuthManager">10.3.4. External (SSL Client Certificates)</a></span></dt><dt><span class="section"><a href="#AnonymousAuthManager">10.3.5. Anonymous</a></span></dt><dt><span class="section"><a href="#MultipleAuthProviders">10.3.6. Configuring multiple Authentication Providers</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-ACLs">10.4. Access Control Lists</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Security-ACLs-EnablingACL">10.4.1. 
       Enabling ACLs
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-WriteACL">10.4.2. 
       Writing .acl files
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-Syntax">10.4.3. 
       Syntax
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-WorkedExamples">10.4.4. 
      Worked Examples
    </a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-SSL">10.5. SSL</a></span></dt><dd><dl><dt><span class="section"><a href="#SSL-Keystore">10.5.1. Keystore Configuration</a></span></dt><dt><span class="section"><a href="#SSL-Truststore-ClientCertificate">10.5.2. Truststore / Client Certificate Authentication</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Runtime">11. Runtime</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Log-Files">11.1. Log Files</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Alerts">11.2. Alerts</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Disk-Space-Management">11.3. Disk Space Management</a></span></dt><dd><dl><dt><span class="section"><a href="#Qpid-Producer-Flow-Control">11.3.1. Producer Flow Control</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout">11.4. Producer Transaction Timeout</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-GeneralInformation">11.4.1. General Information</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Purpose">11.4.2. Purpose</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Scope">11.4.3. Scope</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Effect">11.4.4. Effect</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Configuration">11.4.5. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages">11.5. Handing Undeliverable Messages</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Introduction">11.5.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Maximum-Delivery-Count">11.5.2. Maximum Delivery Count</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Dead-Letter-Queues">11.5.3. Dead Letter Queues (DLQ)</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Configuration">11.5.4. Configuration</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#Java-Broker-High-Availability">12. High Availability</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-GeneralIntroduction">12.1. General Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-OfferingsOfJavaBroker">12.2. HA offerings of the Java Broker</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-TwoNodeCluster">12.3. Two Node Cluster</a></span></dt><dd><dl><dt><span class="section"><a href="#idp27427024">12.3.1. Overview</a></span></dt><dt><span class="section"><a href="#idp27229472">12.3.2. Depictions of cluster operation</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-MultiNodeCluster">12.4. Multi Node Cluster</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Configuration">12.5. Configuring a Virtual Host to be a node</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-Configuration_BDBEnvVars">12.5.1. Passing BDB environment and replication configuration options</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee">12.6. Durability Guarantees</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_BDBControls">12.6.1. BDB Durability Controls</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync">12.6.2. Coalescing-sync</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_Default">12.6.3. Default</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_Examples">12.6.4. Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-ClientFailover">12.7. Client failover configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-JMXAPI">12.8. Qpid JMX API for HA</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Monitoring-cluster">12.9. Monitoring cluster</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DiskSpace">12.10. Disk space requirements</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Network-Requirements">12.11. Network Requirements</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Security">12.12. Security</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Backup">12.13. Backups</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-MigrationFromNonHA">12.14. Migration of a non-HA store to HA</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DisasterRecovery">12.15. Disaster Recovery</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Performance">12.16. Performance</a></span></dt></dl></dd><dt><span class="chapter"><a href="#Java-Broker-Miscellaneous">13. Miscellaneous</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification">13.1. JVM Installation verification</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification-Windows">13.1.1. Verify JVM on Windows</a></span></dt><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification-Unix">13.1.2. Verify JVM on Unix</a></span></dt></dl></dd></dl></dd></dl></div><div class="list-of-figures"><p><strong>List of Figures</strong></p><dl><dt>9.1. <a href="#idp27198000">Web management Console</a></dt><dt>12.1. <a href="#idp27231056">Key for figures</a></dt><dt>12.2. <a href="#idp27236896">Normal operation of a two-node cluster</a></dt><dt>12.3. <a href="#idp27968720">Failure of master and recovery sequence</a></dt><dt>12.4. <a href="#idp27981840">Failure of replica and subsequent recovery sequence</a></dt><dt>12.5. <a href="#idp27995824">Partition of the network separating master and replica</a></dt><dt>12.6. <a href="#idp28010240">Split Brain</a></dt><dt>12.7. <a href="#idp28136496">BDBHAMessageStore view from jconsole.</a></dt><dt>12.8. <a href="#idp28279104">Test results</a></dt></dl></div><div class="list-of-tables"><p><strong>List of Tables</strong></p><dl><dt>7.1. <a href="#idp26951632">Queue-declare arguments understood for priority, sorted and LVQ queues</a></dt><dt>9.1. <a href="#idp27206240">Rest services</a></dt><dt>10.1. <a href="#table-Java-Broker-Security-ACLs-Syntax_permissions">List of ACL permission</a></dt><dt>10.2. <a href="#table-Java-Broker-Security-ACLs-Syntax_actions">List of ACL actions</a></dt><dt>10.3. <a href="#table-Java-Broker-Security-ACLs-Syntax_objects">List of ACL objects</a></dt><dt>10.4. <a href="#table-Java-Broker-Security-ACLs-Syntax_properties">List of ACL properties</a></dt><dt>10.5. <a href="#table-Java-Broker-Security-ACLs-Syntax_javacomponents">List of ACL rules</a></dt><dt>12.1. <a href="#idp28070736">Effect of different durability guarantees</a></dt><dt>12.2. <a href="#idp28096880">Mbean <code class="classname">BDBHAMessageStore</code> attributes</a></dt><dt>12.3. <a href="#idp28122448">Mbean <code class="classname">BDBHAMessageStore</code> operations</a></dt><dt>12.4. <a href="#idp28218752">Number of producers/consumers in performance tests</a></dt><dt>12.5. <a href="#idp28247776">Performance Comparison</a></dt></dl></div><div class="list-of-examples"><p><strong>List of Examples</strong></p><dl><dt>7.1. <a href="#idp26969760">Configuring a priority queue</a></dt><dt>7.2. <a href="#idp26967520">Configuring a priority queue with fewer priorities</a></dt><dt>7.3. <a href="#idp26958848">Configuring a sorted queue</a></dt><dt>7.4. <a href="#idp26958592">Configuring a LVQ queue</a></dt><dt>7.5. <a href="#idp26955792">Configuring a LVQ queue with custom message property name</a></dt><dt>7.6. <a href="#idp26937024">Creation of an LVQ using the Qpid extension to JMS</a></dt><dt>7.7. <a href="#idp26935168">Creation of a sorted queue using JMX</a></dt><dt>8.1. <a href="#idp27085808">Configuring a VirtualHost to use the MemoryMessageStore</a></dt><dt>8.2. <a href="#idp27034704">Configuring a VirtualHost to use the DerbyMessageStore</a></dt><dt>8.3. <a href="#idp26880384">Configuring a VirtualHost to use the BDBMessageStore</a></dt><dt>9.1. <a href="#idp26974752">Management configuration</a></dt><dt>9.2. <a href="#idp26926080">Enabling JMX Management and configuring JMX ports</a></dt><dt>9.3. <a href="#idp27163296">Management key store configuration</a></dt><dt>9.4. <a href="#idp27174272">Enabling web management</a></dt><dt>9.5. <a href="#idp27334288">Examples of queue creation using curl:</a></dt><dt>9.6. <a href="#idp27335744">Example of binding a queue to an exchange using curl</a></dt><dt>10.1. <a href="#idp27124096">Configuring LDAP authentication</a></dt><dt>10.2. <a href="#idp27423712">Configuring Kerberos authentication</a></dt><dt>10.3. <a href="#idp27156960">Configuring external authentication (SSL client auth)</a></dt><dt>10.4. <a href="#idp27357328">Configuring anonymous authentication</a></dt><dt>10.5. <a href="#idp27362128">Configuring multiple (per-port) authentication schemes</a></dt><dt>10.6. <a href="#idp27653904">Configuring an SSL Keystore</a></dt><dt>10.7. <a href="#idp27663200">Configuring an SSL Truststore and client auth</a></dt><dt>11.1. <a href="#idp27451472">Configuring a queue depth limit</a></dt><dt>11.2. <a href="#idp27438912">Configuring a default queue depth limit on a virtualhost</a></dt><dt>11.3. <a href="#idp27254928">Configuring a limit on a store</a></dt><dt>11.4. <a href="#idp27517856">Configuring producer transaction timeout</a></dt><dt>11.5. <a href="#idp27685904">Enabling DLQs and maximum delivery count at broker level within config.xml</a></dt><dt>11.6. <a href="#idp27687408">Enabling DLQs and maximum delivery count at virtualhost and queue level within
    virtualhosts.xml</a></dt><dt>12.1. <a href="#idp28018688">Configuring a VirtualHost to use the BDBHAMessageStore</a></dt><dt>12.2. <a href="#idp28091744">Example of connection URL for the HA Cluster</a></dt><dt>12.3. <a href="#idp28138000">Example of java code to get the node state value</a></dt><dt>12.4. <a href="#idp28149776">Using <code class="classname">DbPing</code> utility for monitoring HA nodes.</a></dt><dt>12.5. <a href="#idp28182656">Performing store backup by using <code class="classname">BDBBackup</code> class directly</a></dt><dt>12.6. <a href="#idp28186672">Performing store backup by using <code class="classname">backup.sh</code> bash script</a></dt><dt>12.7. <a href="#idp28192704">Enabling replication</a></dt><dt>12.8. <a href="#idp28197168">Example of XML configuration for HA message store</a></dt><dt>12.9. <a href="#idp28209344">Reseting of replication group with <code class="classname">DbResetRepGroup</code></a></dt></dl></div><div class="chapter" title="Chapter&#160;1.&#160;Introduction"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Introduction" />Chapter&#160;1.&#160;Introduction</h2></div></div></div><p>The Java Broker is a powerful open-source message broker that implements all versions of the
      <a class="ulink" href="http://www.amqp.org" target="_top"> Advanced Message Queuing Protocol (AMQP)</a>. The Java
    Broker is actually one of two message brokers provided by the <a class="ulink" href="http://qpid.apache.org" target="_top">Apache Qpid project</a>: the Java Broker and the C++
    Broker.</p><p>This document relates to the Java Broker. The <a class="ulink" href="../../AMQP-Messaging-Broker-CPP-Book/html/" target="_top">C++ Broker is
    described separately</a>.</p><p><span class="emphasis"><em>Headline features</em></span></p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>100% Java implementation - runs on any platform supporting Java 1.6 or higher</p></li><li class="listitem"><p>Messaging clients support in Java, C++, Python.</p></li><li class="listitem"><p>JMS 1.1 compliance (Java client).</p></li><li class="listitem"><p>Persistent and non-persistent (transient) message support</p></li><li class="listitem"><p>Supports for all common messaging patterns (point-to-point, publish/subscribe, fan-out
        etc).</p></li><li class="listitem"><p>Transaction support including XA<sup>[<a class="footnote" href="#ftn.idp26810720" id="idp26810720">1</a>]</sup></p></li><li class="listitem"><p>Supports for all versions of the AMQP protocol</p></li><li class="listitem"><p>Automatic message translation, allowing clients using different AMQP versions to communicate with each other.</p></li><li class="listitem"><p>Pluggable authentication architecture with out-of-the-box support for Kerberos, LDAP,
        External, and file-based authentication mechanisms.</p></li><li class="listitem"><p>Pluggable message store architecture with implementations based on <a class="ulink" href="http://db.apache.org/derby/" target="_top">Apache Derby</a>, <a class="ulink" href="http://www.oracle.com/technetwork/products/berkeleydb/overview/index-093405.html" target="_top">Oracle BDB JE</a><sup>[<a class="footnote" href="#ftn.idp26715936" id="idp26715936">2</a>]</sup>, and Memory Store</p></li><li class="listitem"><p>Web based management interface and programmatic management interfaces  via REST and JMX
        APIs.</p></li><li class="listitem"><p>SSL support</p></li><li class="listitem"><p>High availability (HA) support.<sup>[<a class="footnote" href="#ftn.idp26719600" id="idp26719600">3</a>]</sup></p></li></ul></div><div class="footnotes"><br /><hr align="left" width="100" /><div class="footnote"><p><sup>[<a class="para" href="#idp26810720" id="ftn.idp26810720">1</a>] </sup>XA provided when using AMQP 0-10</p></div><div class="footnote"><p><sup>[<a class="para" href="#idp26715936" id="ftn.idp26715936">2</a>] </sup>Oracle BDB JE must be downloaded separately.</p></div><div class="footnote"><p><sup>[<a class="para" href="#idp26719600" id="ftn.idp26719600">3</a>] </sup>HA currently only available to users of the optional BDB JE HA based message store.</p></div></div></div><div class="chapter" title="Chapter&#160;2.&#160;Installation"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation" />Chapter&#160;2.&#160;Installation</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Installation-Introduction">2.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes">2.2. Prerequisites</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Java">2.2.1. Java Platform</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Disk">2.2.2. Disk</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-Memory">2.2.3. Memory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Prerequistes-OperatingSystemAccount">2.2.4. Operating System Account</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-Download">2.3. Download</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-Download-Release">2.3.1. Broker Release</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-Download-OptionalDependencies">2.3.2. Optional Dependencies</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows">2.4. Installation on Windows</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows-SettingQPIDWORK">2.4.1. Setting the working directory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-InstallationWindows-OptionalDependencies">2.4.2. Optional Dependencies</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix">2.5. Installation on UNIX platforms</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix-SettingQPIDWORK">2.5.1. Setting the working directory</a></span></dt><dt><span class="section"><a href="#Java-Broker-Installation-InstallationUnix-OptionalDependencies">2.5.2. Optional Dependencies</a></span></dt></dl></dd></dl></div><div class="section" title="2.1.&#160;Introduction"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation-Introduction" />2.1.&#160;Introduction</h2></div></div></div><p>This document describes how to install the Java Broker on both Windows and UNIX
      platforms.</p></div><div class="section" title="2.2.&#160;Prerequisites"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation-Prerequistes" />2.2.&#160;Prerequisites</h2></div></div></div><div class="section" title="2.2.1.&#160;Java Platform"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Prerequistes-Java" />2.2.1.&#160;Java Platform</h3></div></div></div><p>
        The Java Broker is an 100% Java implementation and as such it can be used on any operating
        system supporting Java 1.6 or higher. This includes Linux, Solaris, Mac OS X, and Windows XP/Vista/7/8.</p><p>
        The broker has been tested with Java implementations from both Oracle and IBM.  Whatever
        platform you chose, it is recommended that you ensure it is patched with any critical updates made
        available from the vendor.
      </p><p>
        Verify that your JVM is installed properly by following <a class="link" href="#Java-Broker-Miscellaneous-JVM-Verification" title="13.1.&#160;JVM Installation verification">these instructions.</a>
      </p></div><div class="section" title="2.2.2.&#160;Disk"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Prerequistes-Disk" />2.2.2.&#160;Disk</h3></div></div></div><p>The Java Broker installation requires approximately 20MB of free disk space.</p><p>The Java Broker also requires a working directory.  The working directory is used for
        the message store, that is, the area of the file-system used to record persistent messages whilst they
        are passing through the Broker.  The working directory is also used for the default location of the log file.
        The size of the working directory will depend on the how the Broker is used.</p><p>The performance of the file system hosting the work directory is key to the performance of Broker as
        a whole.  For best performance, choose a device that has low latency and one that is uncontended by other
        applications.</p><p>Be aware that there are additional considerations if you are considering hosting the working directory on NFS. See
        <a class="xref" href="#Java-Broker-Stores" title="Chapter&#160;8.&#160;Stores">Chapter&#160;8, <em>Stores</em></a> for further details.</p></div><div class="section" title="2.2.3.&#160;Memory"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Prerequistes-Memory" />2.2.3.&#160;Memory</h3></div></div></div><p>Qpid caches messages on the heap for performance reasons, so in general, the Broker will
        benefit from as much heap as possible. However, on a 32bit JVM, the maximum addressable memory range
        for a process is 4GB, after leaving space for the JVM's own use this will give a maximum heap size
        of approximately ~3.7GB.</p></div><div class="section" title="2.2.4.&#160;Operating System Account"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Prerequistes-OperatingSystemAccount" />2.2.4.&#160;Operating System Account</h3></div></div></div><p>Installation or operation of Qpid does <span class="emphasis"><em>not</em></span> require a privileged account (i.e. root
      on UNIX platforms or Administrator on Windows).  However it is suggested that you use an dedicated account
      (e.g. qpid) for the installation and operation of the Java Broker.</p></div></div><div class="section" title="2.3.&#160;Download"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation-Download" />2.3.&#160;Download</h2></div></div></div><div class="section" title="2.3.1.&#160;Broker Release"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Download-Release" />2.3.1.&#160;Broker Release</h3></div></div></div><p>You can download the latest qpid-java-broker-0.22.tar.gz package from the <a class="ulink" href="http://qpid.apache.org/download.html" target="_top">Download Page</a>.
      </p><p> It is recommended that you confirm the integrity of the download by verifying the PGP signature
        matches that available on the site. Instrutions are given on the download page.
      </p></div><div class="section" title="2.3.2.&#160;Optional Dependencies"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-Download-OptionalDependencies" />2.3.2.&#160;Optional Dependencies</h3></div></div></div><p>The broker has an optional message store implementations backed by Oracle BDB JE. If you wish to use these
        stores you will need to provide the optional Oracle BDB JE dependency. For more details, see <a class="xref" href="#Java-Broker-Stores-BDB-Store" title="8.4.&#160;BDB Store">Section&#160;8.4, &#8220;BDB Store&#8221;</a>
      </p></div></div><div class="section" title="2.4.&#160;Installation on Windows"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation-InstallationWindows" />2.4.&#160;Installation on Windows</h2></div></div></div><p>
      Firstly, verify that your JVM is installed properly by following
      <a class="link" href="#Java-Broker-Miscellaneous-JVM-Verification-Windows" title="13.1.1.&#160;Verify JVM on Windows">these instructions.</a>
    </p><p>Now chose a directory for Qpid broker installation.  This directory will be used for the Qpid JARs and configuration files.
      It need not be the same location as the store used for the persistent messages or the log file (you will chose this
      location later).   For the remainder this example we will assumed that location c:\qpid has been chosen.</p><p>Now using WinZip<sup>[<a class="footnote" href="#ftn.idp26724176" id="idp26724176">4</a>]</sup> (or similar)
      extract the Qpid package qpid-java-broker-0.22.tar.gz into the directory.</p><p>The extraction of the Qpid package will have created a directory qpid-broker-0.22 within c:\qpid</p><pre class="screen">Volume in drive C has no label

 Directory of c:\qpid\qpid-broker-0.22

07/25/2012  11:22 PM                   .
09/30/2012  10:51 AM                   ..
09/30/2012  12:24 AM                   bin
08/21/2012  11:17 PM                   etc
07/25/2012  11:22 PM                   lib
07/20/2012  08:10 PM            65,925 LICENSE
07/20/2012  08:10 PM             3,858 NOTICE
07/20/2012  08:10 PM             1,346 README.txt
               3 File(s)         71,129 bytes
               5 Dir(s)  743,228,796,928 bytes free</pre><div class="section" title="2.4.1.&#160;Setting the working directory"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-InstallationWindows-SettingQPIDWORK" />2.4.1.&#160;Setting the working directory</h3></div></div></div><p>Qpid requires a work directory.  This directory is used for the default location of the Qpid log
        file and is used for the storage of persistent messages.  The work directory can be set on the
        command-line (for the lifetime of the command interpreter), but you will normally want to set
        the environment variable permanently via the Advanced System Settings in the Control Panel.</p><pre class="screen">set QPID_WORK=C:\qpidwork</pre><p>If the directory referred to by QPID_WORK does not exist, the Java Broker will attempt to create it
         on start-up.</p></div><div class="section" title="2.4.2.&#160;Optional Dependencies"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-InstallationWindows-OptionalDependencies" />2.4.2.&#160;Optional Dependencies</h3></div></div></div><p>The broker has optional message store implementations backed by Oracle BDB JE. If you wish to use these
        stores you will need to provide the optional Oracle BDB JE dependency. For more details, see <a class="xref" href="#Java-Broker-Stores-BDB-Store" title="8.4.&#160;BDB Store">Section&#160;8.4, &#8220;BDB Store&#8221;</a>
      </p></div><div class="footnotes"><br /><hr align="left" width="100" /><div class="footnote"><p><sup>[<a class="para" href="#idp26724176" id="ftn.idp26724176">4</a>] </sup>WinZip is a Registered Trademark of WinZip International LLC</p></div></div></div><div class="section" title="2.5.&#160;Installation on UNIX platforms"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Installation-InstallationUnix" />2.5.&#160;Installation on UNIX platforms</h2></div></div></div><p>
      Firstly, verify that your JVM is installed properly by following
      <a class="link" href="#Java-Broker-Miscellaneous-JVM-Verification-Unix" title="13.1.2.&#160;Verify JVM on Unix">these instructions.</a>
    </p><p>Now chose a directory for Qpid broker installation.  This directory will be used for the Qpid JARs and configuration files.
      It need not be the same location as the store used for the persistent messages or the log file (you will chose this
      location later).   For the remainder this example we will assumed that location /usr/local/qpid has been chosen.</p><p>Extract the Qpid package qpid-java-broker-0.22.tar.gz into the directory.</p><pre class="programlisting">mkdir /usr/local/qpid
cd /usr/local/qpid
tar xvzf qpid-java-broker-0.22.tar.gz&gt;</pre><p>The extraction of the Qpid package will have created a directory qpid-broker-x.x</p><pre class="screen">ls -la qpid-broker-0.22/
total 152
drwxr-xr-x   8 qpid  qpid    272 25 Jul 23:22 .
drwxr-xr-x  45 qpid  qpid   1530 30 Sep 10:51 ..
-rw-r--r--@  1 qpid  qpid  65925 20 Jul 20:10 LICENSE
-rw-r--r--@  1 qpid  qpid   3858 20 Jul 20:10 NOTICE
-rw-r--r--@  1 qpid  qpid   1346 20 Jul 20:10 README.txt
drwxr-xr-x  10 qpid  qpid    340 30 Sep 00:24 bin
drwxr-xr-x   9 qpid  qpid    306 21 Aug 23:17 etc
drwxr-xr-x  34 qpid  qpid   1156 25 Jul 23:22 lib
    </pre><div class="section" title="2.5.1.&#160;Setting the working directory"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-InstallationUnix-SettingQPIDWORK" />2.5.1.&#160;Setting the working directory</h3></div></div></div><p>Qpid requires a work directory.  This directory is used for the default location of the Qpid log
        file and is used for the storage of persistent messages.  The work directory can be set on the
        command-line (for the lifetime of the current shell), but you will normally want to set
        the environment variable permanently the user's shell profile file (~/.bash_profile for Bash etc).</p><pre class="screen">export QPID_WORK=/var/qpidwork
      </pre><p>If the directory referred to by QPID_WORK does not exist, the Java Broker will attempt to create it
         on start-up.
      </p></div><div class="section" title="2.5.2.&#160;Optional Dependencies"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Installation-InstallationUnix-OptionalDependencies" />2.5.2.&#160;Optional Dependencies</h3></div></div></div><p>The broker has an optional message store implementations backed by Oracle BDB JE. If you wish to use these
        stores you will need to provide the optional Oracle BDB JE dependency. For more details, see <a class="xref" href="#Java-Broker-Stores-BDB-Store" title="8.4.&#160;BDB Store">Section&#160;8.4, &#8220;BDB Store&#8221;</a>
      </p></div></div></div><div class="chapter" title="Chapter&#160;3.&#160;Getting Started"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started" />Chapter&#160;3.&#160;Getting Started</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting">3.1. Starting/Stopping the Broker</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting-Stopping-Windows">3.2. Starting/Stopping on Windows</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-Starting-Stopping-Unix">3.3. Starting/Stopping on Unix</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-LogFile">3.4. Log file</a></span></dt><dt><span class="section"><a href="#Java-Broker-Getting-Started-CommandLine">3.5. Using the command line</a></span></dt></dl></div><p>This section describes how to start the Java Broker for the first time.</p><div class="section" title="3.1.&#160;Starting/Stopping the Broker"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started-Starting" />3.1.&#160;Starting/Stopping the Broker</h2></div></div></div><p>To start the Broker, use the <span class="command"><strong>qpid-server</strong></span> script (UNIX) or <span class="command"><strong>qpid-server.bat</strong></span> (Windows)
      provided within distribution.</p></div><div class="section" title="3.2.&#160;Starting/Stopping on Windows"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started-Starting-Stopping-Windows" />3.2.&#160;Starting/Stopping on Windows</h2></div></div></div><p>Firstly change to the installation directory used during the <a class="link" href="#Java-Broker-Installation-InstallationWindows" title="2.4.&#160;Installation on Windows">installation</a>
      and ensure that the <a class="link" href="#Java-Broker-Installation-InstallationWindows-SettingQPIDWORK" title="2.4.1.&#160;Setting the working directory">QPID_WORK environment variable is set</a>.</p><p>Now use the <span class="command"><strong>qpid-server.bat</strong></span> to start the server</p><pre class="programlisting">bin\qpid-server.bat</pre><p>Output similar to the following will be seen:</p><pre class="screen">[Broker] BRK-1006 : Using configuration : C:\qpid\qpid-broker-0.22\etc\config.xml
[Broker] BRK-1007 : Using logging configuration : C:\qpid\qpid-broker-0.22\etc\log4j.xml
[Broker] BRK-1001 : Startup : Version: 0.22 Build: 1411386
[Broker] BRK-1010 : Platform : JVM : Sun Microsystems Inc. version: 1.6.0_24-b07 OS : Windows 7 version: 6.1 arch: amd64
[Broker] BRK-1011 : Maximum Memory : 1,069,416,448 bytes
[Broker] MNG-1001 : Web Management Startup
[Broker] MNG-1002 : Starting : HTTP : Listening on port 8080
[Broker] MNG-1004 : Web Management Ready
[Broker] MNG-1001 : JMX Management Startup
[Broker] MNG-1002 : Starting : RMI Registry : Listening on port 8999
[Broker] MNG-1002 : Starting : JMX RMIConnectorServer : Listening on port 9099
[Broker] MNG-1004 : JMX Management Ready
[Broker] BRK-1002 : Starting : Listening on TCP port 5672
[Broker] BRK-1004 : Qpid Broker Ready</pre><p>The BRK-1004 message confirms that the Broker is ready for work.  The MNG-1002 and BRK-1002 confirm the ports to
      which the Broker is listening (for HTTP/JMX management and AMQP respectively).</p><p>To stop the Broker, use Control-C or use the Shutdown MBean made from the <a class="xref" href="#Java-Broker-Configuring-And-Managing-JMX" title="9.4.&#160;JMX">Section&#160;9.4, &#8220;JMX&#8221;</a></p></div><div class="section" title="3.3.&#160;Starting/Stopping on Unix"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started-Starting-Stopping-Unix" />3.3.&#160;Starting/Stopping on Unix</h2></div></div></div><p>Firstly change to the installation directory used during the <a class="link" href="#Java-Broker-Installation-InstallationUnix" title="2.5.&#160;Installation on UNIX platforms">installation</a>
      and ensure that the <a class="link" href="#Java-Broker-Installation-InstallationUnix-SettingQPIDWORK" title="2.5.1.&#160;Setting the working directory">QPID_WORK environment variable is set</a>.</p><p>Now use the <span class="command"><strong>qpid-server</strong></span> script to start the server:</p><pre class="programlisting">bin\qpid-server</pre><p>Output similar to the following will be seen:</p><pre class="screen">[Broker] BRK-1006 : Using configuration : /usr/local/qpid/qpid-broker-0.22/etc/config.xml
[Broker] BRK-1007 : Using logging configuration : /usr/local/qpid/qpid-broker-0.22/etc/log4j.xml
[Broker] BRK-1001 : Startup : Version: 0.22 Build: 1411386
[Broker] BRK-1010 : Platform : JVM : Apple Inc. version: 1.6.0_35-b10-428-11M3811 OS : Mac OS X version: 10.8.2 arch: x86_64
[Broker] BRK-1011 : Maximum Memory : 1,070,399,488 bytes
[Broker] MNG-1001 : Web Management Startup
[Broker] MNG-1002 : Starting : HTTP : Listening on port 8080
[Broker] MNG-1004 : Web Management Ready
[Broker] MNG-1001 : JMX Management Startup
[Broker] MNG-1002 : Starting : RMI Registry : Listening on port 8999
[Broker] MNG-1002 : Starting : JMX RMIConnectorServer : Listening on port 9099
[Broker] MNG-1004 : JMX Management Ready
[Broker] BRK-1002 : Starting : Listening on TCP port 5672
[Broker] BRK-1004 : Qpid Broker Ready</pre><p>The BRK-1004 message confirms that the Broker is ready for work.  The MNG-1002 and BRK-1002 confirm the ports to
    which the Broker is listening (for HTTP/JMX management and AMQP respectively).</p><p>To stop the Broker, use Control-C from the controlling shell, use the
        <span class="command"><strong>bin/qpid.stop</strong></span> script, use <span class="command"><strong>kill -TERM &lt;pid&gt;</strong></span>, or
      the Shutdown MBean from <a class="xref" href="#Java-Broker-Configuring-And-Managing-JMX" title="9.4.&#160;JMX">Section&#160;9.4, &#8220;JMX&#8221;</a></p></div><div class="section" title="3.4.&#160;Log file"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started-LogFile" />3.4.&#160;Log file</h2></div></div></div><p>The Java Broker writes a log file to record both details of its normal operation and any exceptional
      conditions.  By default the log file is written within the log subdirectory beneath the work directory
      - <code class="computeroutput">$QPID_WORK/log/qpid.log</code> (UNIX) and
      <code class="computeroutput">%QPID_WORK%\log\qpid.log</code> (Windows).</p><p>For details of how to control the logging, see <a class="xref" href="#Java-Broker-Runtime-Log-Files" title="11.1.&#160;Log Files">Section&#160;11.1, &#8220;Log Files&#8221;</a></p></div><div class="section" title="3.5.&#160;Using the command line"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Getting-Started-CommandLine" />3.5.&#160;Using the command line</h2></div></div></div><p>The Java Broker understands a number of command line options which may be used to override the configuration.</p><p>To see usage information for all command line options, use the option <code class="option">--help</code></p><pre class="programlisting">bin/qpid-server --help</pre><pre class="screen">usage: Qpid [-cic &lt;path&gt;] [-h] [-icp &lt;path&gt;] [-l &lt;file&gt;] [-mm] [-mmhttp &lt;port&gt;]
            [-mmjmx &lt;port&gt;] [-mmpass &lt;password&gt;] [-mmqv] [-mmrmi &lt;port&gt;] [-os]
            [-sp &lt;path&gt;] [-st &lt;type&gt;] [-v] [-w &lt;period&gt;]
 -cic &lt;path&gt;                                    create a copy of the initial config
 --create-initial-config &lt;path&gt;                 file, either to an optionally specified
                                                file path, or as initial-config.json
                                                in the current directory

 -h,                                            print this message
 --help

 -icp  &lt;path&gt;                                   set the location of initial JSON config
 --initial-config-path &lt;path&gt;                   to use when creating/overwriting a
                                                broker configuration store

 -l &lt;file&gt;                                      use the specified log4j xml configuration
 --logconfig &lt;file&gt;                             file. By default looks for a file named
                                                etc/log4j.xml in the same directory as
                                                the configuration file

 -mm                                            start broker in management mode,
                                                disabling the AMQP ports

 -mmhttp &lt;port&gt;                                 override http management port in
 --management-mode-http-port &lt;port&gt;             management mode

 -mmjmx                                         override jmx connector port in
 --management-mode-jmx-connector-port &lt;port&gt;    management mode

 -mmpass  &lt;password&gt;                            Set the password for the management
 --management-mode-password &lt;password&gt;          mode user mm_admin

 -mmqv                                          make virtualhosts stay in the quiesced
 --management-mode-quiesce-virtualhosts         state during management mode.

 -mmrmi &lt;port&gt;                                  override jmx rmi registry port in
 --management-mode-rmi-registry-port &lt;port&gt;     management mode

 -os                                            overwrite the broker configuration store
 --overwrite-store                              with the current initial configuration

 -sp &lt;path&gt;                                     use given configuration store location
 --store-path &lt;path&gt;

 -st &lt;type&gt;                                     use given broker configuration store type
 --store-type &lt;type&gt;

 -v                                             print the version information and exit
 --version

 -w &lt;period&gt;                                    monitor the log file configuration file
 --logwatch &lt;period&gt;                            for changes. Units are seconds. Zero
                                                means do not check for changes.
</pre></div></div><div class="chapter" title="Chapter&#160;4.&#160;Concepts"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts" />Chapter&#160;4.&#160;Concepts</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Concepts-Virtual-Hosts">4.1. Virtual Hosts</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Exchanges">4.2. Exchanges</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Queues">4.3. Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Ports">4.4. Ports</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Protocols">4.5. Protocols</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Authentication-Providers">4.6. Authentication Providers</a></span></dt><dt><span class="section"><a href="#Java-Broker-Concepts-Other-Services">4.7. Other Services</a></span></dt></dl></div><div class="section" title="4.1.&#160;Virtual Hosts"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Virtual-Hosts" />4.1.&#160;Virtual Hosts</h2></div></div></div></div><div class="section" title="4.2.&#160;Exchanges"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Exchanges" />4.2.&#160;Exchanges</h2></div></div></div></div><div class="section" title="4.3.&#160;Queues"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Queues" />4.3.&#160;Queues</h2></div></div></div></div><div class="section" title="4.4.&#160;Ports"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Ports" />4.4.&#160;Ports</h2></div></div></div></div><div class="section" title="4.5.&#160;Protocols"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Protocols" />4.5.&#160;Protocols</h2></div></div></div></div><div class="section" title="4.6.&#160;Authentication Providers"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Authentication-Providers" />4.6.&#160;Authentication Providers</h2></div></div></div></div><div class="section" title="4.7.&#160;Other Services"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Concepts-Other-Services" />4.7.&#160;Other Services</h2></div></div></div></div></div><div class="chapter" title="Chapter&#160;5.&#160;Virtual Hosts"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Virtual-Hosts" />Chapter&#160;5.&#160;Virtual Hosts</h2></div></div></div></div><div class="chapter" title="Chapter&#160;6.&#160;Exchanges"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Exchanges" />Chapter&#160;6.&#160;Exchanges</h2></div></div></div></div><div class="chapter" title="Chapter&#160;7.&#160;Queues"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Queues" />Chapter&#160;7.&#160;Queues</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Queues-Messaging-Groups">7.1. Messaging Groups</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes">7.2. Other Queue Types</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Introduction">7.2.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Priority">7.2.2. Priority Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Sorted">7.2.3. Sorted Queues</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-LVQ">7.2.4. Last Value Queues (LVQ)</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-Create">7.2.5. Creating a Priority, Sorted or LVQ Queue</a></span></dt><dt><span class="section"><a href="#Java-Broker-Queues-OtherTypes-SetLowPrefetch">7.2.6. Low pre-fetch</a></span></dt></dl></dd></dl></div><div class="section" title="7.1.&#160;Messaging Groups"><div class="titlepage"><div><div><h2 class="title"><a id="Queues-Messaging-Groups" />7.1.&#160;Messaging Groups</h2></div></div></div></div><div class="section" title="7.2.&#160;Other Queue Types"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Queues-OtherTypes" />7.2.&#160;Other Queue Types</h2></div></div></div><div class="section" title="7.2.1.&#160;Introduction"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-Introduction" />7.2.1.&#160;Introduction</h3></div></div></div><p> In addition to the standard queue type where messages are delivered in the same order
      that they were sent, the Java Broker supports three additional queue types which allows for
      alternative delivery behaviours. These are <a class="link" href="#Java-Broker-Queues-OtherTypes-Priority" title="7.2.2.&#160;Priority Queues">priority-queues</a>, <a class="link" href="#Java-Broker-Queues-OtherTypes-Sorted" title="7.2.3.&#160;Sorted Queues">sorted-queues</a>-, and
        <a class="link" href="#Java-Broker-Queues-OtherTypes-LVQ" title="7.2.4.&#160;Last Value Queues (LVQ)">last-value-queues</a> (LVQs). </p><p> In the following sections, the semantics of each queue type is described, followed by a
      description of how instances of these queue can be created via <a class="link" href="#Java-Broker-Queues-OtherTypes-CreateUsingConfig" title="7.2.5.1.&#160;Using configuration">configuration</a> or <a class="link" href="#Java-Broker-Queues-OtherTypes-CreateUsingJmsOrJmx" title="7.2.5.2.&#160;Using JMX or AMQP">programmatically</a>. </p><p>The final section discusses the importance of using a <a class="link" href="#Java-Broker-Queues-OtherTypes-SetLowPrefetch" title="7.2.6.&#160;Low pre-fetch">low client pre-fetch</a> with these queued.
    </p></div><div class="section" title="7.2.2.&#160;Priority Queues"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-Priority" />7.2.2.&#160;Priority Queues</h3></div></div></div><p>In a priority queue, messages on the queue are delivered in an order determined by the
        <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Message.html#getJMSPriority()" target="_top">JMS priority message
        header</a> within the message. By default Qpid supports the 10 priority levels mandated
      by JMS, with priority value 0 as the lowest priority and 9 as the highest. </p><p>It is possible to reduce the effective number of priorities if desired.</p><p>JMS defines the <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Message.html#DEFAULT_PRIORITY" target="_top">
        default message priority</a> as 4. Messages sent without a specified priority use this
      default. </p></div><div class="section" title="7.2.3.&#160;Sorted Queues"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-Sorted" />7.2.3.&#160;Sorted Queues</h3></div></div></div><p>Sorted queues allow the message delivery order to be determined by value of an arbitrary
        <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Message.html#getStringProperty()" target="_top">JMS message
        property</a>. Sort order is alpha-numeric and the property value must have a type
      java.lang.String.</p><p>Messages sent to a sorted queue without the specified JMS message property will be
      inserted into the 'last' position in the queue.</p></div><div class="section" title="7.2.4.&#160;Last Value Queues (LVQ)"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-LVQ" />7.2.4.&#160;Last Value Queues (LVQ)</h3></div></div></div><p>LVQs (or conflation queues) are special queues that automatically discard any message when
      a newer message arrives with the same key value. The key is specified by arbitrary <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Message.html#getPropertyNames()" target="_top">JMS message
        property</a>.</p><p>An example of an LVQ might be where a queue represents prices on a stock exchange: when
      you first consume from the queue you get the latest quote for each stock, and then as new
      prices come in you are sent only these updates. </p><p>Like other queues, LVQs can either be browsed or consumed from. When browsing an
      individual subscriber does not remove the message from the queue when receiving it. This
      allows for many subscriptions to browse the same LVQ (i.e. you do not need to create and bind
      a separate LVQ for each subscriber who wishes to receive the contents of the LVQ).</p><p>Messages sent to an LVQ without the specified property will be delivered as normal and
      will never be "replaced".</p></div><div class="section" title="7.2.5.&#160;Creating a Priority, Sorted or LVQ Queue"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-Create" />7.2.5.&#160;Creating a Priority, Sorted or LVQ Queue</h3></div></div></div><p>To create a priority, sorted or LVQ queue, it can be defined in the virtualhost
      configuration file, or the queue can be created programmtically from a client via AMQP (using
      an extension to JMS), or using JMX. These methods are described below. </p><p>Once a queue is created you cannot change its type (without deleting it and re-creating).
      Also note you cannot currently mix the natures of these queue types, for instance, you cannot
      define a queue which it both an LVQ and a priority-queue.</p><div class="section" title="7.2.5.1.&#160;Using configuration"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Queues-OtherTypes-CreateUsingConfig" />7.2.5.1.&#160;Using configuration</h4></div></div></div><p>To create a priority, sorted or LVQ queue within configuration, add the appropriate xml
        to the virtualhost.xml configuration file within the <code class="varname">queues</code>
        element.</p><div class="section" title="Priority"><div class="titlepage"><div><div><h5 class="title"><a id="Java-Broker-Queues-OtherTypes-CreateUsingConfig-Priority" />Priority</h5></div></div></div><p> To defining a priority queue, add a &lt;priority&gt;true&lt;/priority&gt; element. By
          default the queue will have 10 distinct priorities. </p><div class="example"><a id="idp26969760" /><p class="title"><strong>Example&#160;7.1.&#160;Configuring a priority queue</strong></p><div class="example-contents"><pre class="programlisting">&lt;queue&gt;
    &lt;name&gt;myqueue&lt;/name&gt;
    &lt;myqueue&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;priority&gt;true&lt;/priority&gt;
    &lt;/myqueue&gt;
&lt;/queue&gt;</pre></div></div><br class="example-break" /><p> If you require fewer priorities, it is possible to specify a
            <code class="varname">priorities</code> element (whose value is a integer value between 2 and 10
          inclusive) which will give the queue that number of distinct priorities. When messages are
          sent to that queue, their effective priority will be calculated by partitioning the
          priority space. If the number of effective priorities is 2, then messages with priority
          0-4 are treated the same as "lower priority" and messages with priority 5-9 are treated
          equivalently as "higher priority". </p><div class="example"><a id="idp26967520" /><p class="title"><strong>Example&#160;7.2.&#160;Configuring a priority queue with fewer priorities</strong></p><div class="example-contents"><pre class="programlisting">&lt;queue&gt;
    &lt;name&gt;myqueue&lt;/name&gt;
    &lt;myqueue&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;priority&gt;true&lt;/priority&gt;
        &lt;priorities&gt;4&lt;/priorities&gt;
    &lt;/myqueue&gt;
&lt;/queue&gt;</pre></div></div><br class="example-break" /></div><div class="section" title="Sorted"><div class="titlepage"><div><div><h5 class="title"><a id="Java-Broker-Queues-OtherTypes-CreateUsingConfig-Sorted" />Sorted</h5></div></div></div><p> To define a sorted queue, add a <code class="varname">sortKey</code> element. The value of the
            <code class="varname">sortKey</code> element defines the message property to use the value of when
          sorting the messages put onto the queue. </p><div class="example"><a id="idp26958848" /><p class="title"><strong>Example&#160;7.3.&#160;Configuring a sorted queue</strong></p><div class="example-contents"><pre class="programlisting">&lt;queue&gt;
    &lt;name&gt;myqueue&lt;/name&gt;
    &lt;myqueue&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;sortKey&gt;message-property-to-sort-by&lt;/sortKey&gt;
    &lt;/myqueue&gt;
&lt;/queue&gt;</pre></div></div><br class="example-break" /></div><div class="section" title="LVQ"><div class="titlepage"><div><div><h5 class="title"><a id="Java-Broker-Queues-OtherTypes-CreateUsingConfig-LVQ" />LVQ</h5></div></div></div><p> To define a LVQ, add a <code class="varname">lvq</code> element with the value
            <code class="constant">true</code>. Without any further configuration this will define an LVQ
          which uses the JMS message property <code class="constant">qpid.LVQ_key</code> as the key for
          replacement. </p><div class="example"><a id="idp26958592" /><p class="title"><strong>Example&#160;7.4.&#160;Configuring a LVQ queue</strong></p><div class="example-contents"><pre class="programlisting">&lt;queue&gt;
    &lt;name&gt;myqueue&lt;/name&gt;
    &lt;myqueue&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;lvq&gt;true&lt;/lvq&gt;
    &lt;/myqueue&gt;
&lt;/queue&gt;</pre></div></div><br class="example-break" /><p> If you wish to define your own property then you can do so using the
            <code class="varname">lvqKey</code> element.</p><div class="example"><a id="idp26955792" /><p class="title"><strong>Example&#160;7.5.&#160;Configuring a LVQ queue with custom message property name</strong></p><div class="example-contents"><pre class="programlisting">&lt;queue&gt;
    &lt;name&gt;myqueue&lt;/name&gt;
    &lt;myqueue&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;lvq&gt;true&lt;/lvq&gt;
        &lt;lvqKey&gt;ISIN&lt;/lvqKey&gt;
    &lt;/myqueue&gt;
&lt;/queue&gt;</pre></div></div><br class="example-break" /></div></div><div class="section" title="7.2.5.2.&#160;Using JMX or AMQP"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Queues-OtherTypes-CreateUsingJmsOrJmx" />7.2.5.2.&#160;Using JMX or AMQP</h4></div></div></div><p>To create a priority, sorted or LVQ queue programmatically from JMX or using a Qpid
        extension to JMS, pass the appropriate queue-declare arguments.</p><div class="table"><a id="idp26951632" /><p class="title"><strong>Table&#160;7.1.&#160;Queue-declare arguments understood for priority, sorted and LVQ queues</strong></p><div class="table-contents"><table border="1" summary="Queue-declare arguments understood for priority, sorted and LVQ queues"><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th>Queue type</th><th>Argument name</th><th>Argument name</th><th>Argument Description</th></tr></thead><tbody><tr><td>priority</td><td>priorities</td><td>java.lang.Integer</td><td>Specifies a priority queue with given number priorities</td></tr><tr><td>sorted</td><td>qpid.queue_sort_key</td><td>java.lang.String</td><td>Specifies sorted queue with given message property used to sort the
                entries</td></tr><tr><td>lvq</td><td>qpid.last_value_queue_key</td><td>java.lang.String</td><td>Specifies lvq queue with given message property used to conflate the
                entries</td></tr></tbody></table></div></div><br class="table-break" /><p>The following example illustrates the creation of the a LVQ queue from a
        javax.jms.Session object. Note that this utilises a Qpid specific extension to JMS and
        involves casting the session object back to its Qpid base-class.</p><div class="example"><a id="idp26937024" /><p class="title"><strong>Example&#160;7.6.&#160;Creation of an LVQ using the Qpid extension to JMS</strong></p><div class="example-contents"><pre class="programlisting">Map&lt;String,Object&gt; arguments = new HashMap&lt;String, Object&gt;();
arguments.put("qpid.last_value_queue_key","ISIN");
((AMQSession&lt;?,?&gt;) session).createQueue(queueName, autoDelete, durable, exclusive, arguments);</pre></div></div><br class="example-break" /><p> The following example illustrates the creation of the sorted queue from a the JMX
        interface using the ManagedBroker interface. </p><div class="example"><a id="idp26935168" /><p class="title"><strong>Example&#160;7.7.&#160;Creation of a sorted queue using JMX</strong></p><div class="example-contents"><pre class="programlisting">Map&lt;String, Object&gt; environment = new HashMap&lt;String, Object&gt;();
environment.put(JMXConnector.CREDENTIALS, new String[] {"admin","password"});
// Connect to service
JMXServiceURL url =  new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:8999/jmxrmi");
JMXConnector jmxConnector = JMXConnectorFactory.connect(url, environment);
MBeanServerConnection mbsc =  jmxConnector.getMBeanServerConnection();
// Object name for ManagedBroker for virtualhost myvhost
ObjectName objectName = new ObjectName("org.apache.qpid:type=VirtualHost.VirtualHostManager,VirtualHost=myvhost");
// Get the ManagedBroker object
ManagedBroker managedBroker = JMX.newMBeanProxy(mbsc, objectName, ManagedBroker.class);;

// Create the queue passing arguments
Map&lt;String,Object&gt; arguments = new HashMap&lt;String, Object&gt;();
arguments.put("qpid.queue_sort_key","myheader");
managedBroker.createNewQueue("myqueue", null, true, arguments);</pre></div></div><br class="example-break" /></div></div><div class="section" title="7.2.6.&#160;Low pre-fetch"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Queues-OtherTypes-SetLowPrefetch" />7.2.6.&#160;Low pre-fetch</h3></div></div></div><p>Qpid clients receive buffered messages in batches, sized according to the pre-fetch value.
      The current default is 500. </p><p>However, if you use the default value you will probably <span class="emphasis"><em>not</em></span> see
      desirable behaviour when using priority, sorted or lvq queues. Once the broker has sent a
      message to the client its delivery order is then fixed, regardless of the special behaviour of
      the queue. </p><p>For example, if using a priority queue and a prefetch of 100, and 100 messages arrive with
      priority 2, the broker will send these messages to the client. If then a new message arrives
      will priority 1, the broker cannot leap frog messages of lower priority. The priority 1 will
      be delivered at the front of the next batch of messages to be sent to the client.</p><p> So, you need to set the prefetch values for your client (consumer) to make this sensible.
      To do this set the Java system property <code class="varname">max_prefetch</code> on the client
      environment (using -D) before creating your consumer. </p><p>A default for all client connections can be set via a system property: </p><pre class="programlisting">
-Dmax_prefetch=1
</pre><p> The prefetch can be also be adjusted on a per connection basis by adding a
      <code class="varname">maxprefetch</code> value to the <a class="ulink" href="../../Programming-In-Apache-Qpid/html/QpidJNDI.html#section-jms-connection-url" target="_top">Connection URLs</a>
    </p><pre class="programlisting">
amqp://guest:guest@client1/development?maxprefetch='1'&amp;brokerlist='tcp://localhost:5672'
</pre><p>Setting the Qpid pre-fetch to 1 will give exact queue-type semantics as perceived by the
      client however, this brings a performance cost. You could test with a slightly higher
      pre-fetch to trade-off between throughput and exact semantics.</p></div></div></div><div class="chapter" title="Chapter&#160;8.&#160;Stores"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores" />Chapter&#160;8.&#160;Stores</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Stores-Memory-Store">8.1. Memory Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-Memory-Store-Configuration">8.1.1. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-Derby-Store">8.2. Derby Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-Derby-Store-Configuration">8.2.1. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-SQL-Store">8.3. SQL Store</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store">8.4. BDB Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-BDBJE-Download">8.4.1. Oracle BDB JE download</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-BDBJE-Installation">8.4.2. Oracle BDB JE jar installation</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-BDB-Store-Configuration">8.4.3. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store">8.5. High Availability BDB Store</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-BDBJE-Download">8.5.1. Oracle BDB JE download</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-BDBJE-Installation">8.5.2. Oracle BDB JE jar installation</a></span></dt><dt><span class="section"><a href="#Java-Broker-Stores-HA-BDB-Store-Configuration">8.5.3. Configuration</a></span></dt></dl></dd></dl></div><div class="section" title="8.1.&#160;Memory Store"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores-Memory-Store" />8.1.&#160;Memory Store</h2></div></div></div><p>
    The Java broker has an in-memory message store implementation.
    This section will detail configuration for using the MemoryMessageStore.
  </p><p>
    Note: when using this store, the broker will store both persistent and non-persistent messages
    in memory, which is to say that neither will be available following a broker restart, and the
    ability to store new messages will be entirely constrained by the JVM heap size.
  </p><div class="section" title="8.1.1.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-Memory-Store-Configuration" />8.1.1.&#160;Configuration</h3></div></div></div><p>
      In order to use the MemoryMessageStore, you must configure it for each VirtualHost desired by updating the store element
      to specify the associated store class, as shown below.
    </p><div class="example"><a id="idp27085808" /><p class="title"><strong>Example&#160;8.1.&#160;Configuring a VirtualHost to use the MemoryMessageStore</strong></p><div class="example-contents"><pre class="programlisting">
&lt;virtualhosts&gt;
  &lt;virtualhost&gt;
    &lt;name&gt;vhostname&lt;/name&gt;
    &lt;vhostname&gt;
      &lt;store&gt;
        &lt;class&gt;org.apache.qpid.server.store.MemoryMessageStore&lt;/class
      &lt;/store&gt;
      ...
    &lt;/vhostname&gt;
  &lt;/virtualhost&gt;
&lt;/virtualhosts&gt;
</pre></div></div><br class="example-break" /></div></div><div class="section" title="8.2.&#160;Derby Store"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores-Derby-Store" />8.2.&#160;Derby Store</h2></div></div></div><p>
    The Java broker has a message store implementation backed by Apache Derby.
    This section will detail configuration for using the DerbyMessageStore.
  </p><div class="section" title="8.2.1.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-Derby-Store-Configuration" />8.2.1.&#160;Configuration</h3></div></div></div><p>
      In order to use the DerbyMessageStore, you must configure it for each VirtualHost desired by updating the store element
      to specify the associated store class and provide a directory location for the data to be written, as shown below.
    </p><div class="example"><a id="idp27034704" /><p class="title"><strong>Example&#160;8.2.&#160;Configuring a VirtualHost to use the DerbyMessageStore</strong></p><div class="example-contents"><pre class="programlisting">
&lt;virtualhosts&gt;
  &lt;virtualhost&gt;
    &lt;name&gt;vhostname&lt;/name&gt;
    &lt;vhostname&gt;
      &lt;store&gt;
        &lt;class&gt;org.apache.qpid.server.store.DerbyMessageStore&lt;/class&gt;
        &lt;environment-path&gt;${QPID_WORK}/derbystore/vhostname&lt;/environment-path&gt;
      &lt;/store&gt;
      ...
    &lt;/vhostname&gt;
  &lt;/virtualhost&gt;
&lt;/virtualhosts&gt;
</pre></div></div><br class="example-break" /></div></div><div class="section" title="8.3.&#160;SQL Store"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores-SQL-Store" />8.3.&#160;SQL Store</h2></div></div></div></div><div class="section" title="8.4.&#160;BDB Store"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores-BDB-Store" />8.4.&#160;BDB Store</h2></div></div></div><p>
    The Java broker has an <span class="emphasis"><em>optional</em></span> message store implementation backed by Oracle BDB JE.
    This section will detail where to download the optional dependency from, how to add it to the broker installation,
    and provide an example configuration for using the BDBMessageStore.
  </p><div class="section" title="8.4.1.&#160;Oracle BDB JE download"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-BDB-Store-BDBJE-Download" />8.4.1.&#160;Oracle BDB JE download</h3></div></div></div><p>
      The BDB based message store is optional due to its dependency on Oracle BDB JE, which is distributed under the Sleepycat
      licence. As a result of this, the dependency cant be distributed by the Apache Qpid project as part of the broker release package.
    </p><p>
       If you wish to use the BDBMessageStore, then you must download the Oracle BDB JE 5.0.58 release
      <a class="ulink" href="http://www.oracle.com/technetwork/products/berkeleydb/downloads/index.html?ssSourceSiteId=ocomen" target="_top">from the Oracle website.</a>
    </p><p>
      The download has a name in the form je-5.0.58.tar.gz. It is recommended that you
      confirm the integrity of the download by verifying the MD5.
    </p></div><div class="section" title="8.4.2.&#160;Oracle BDB JE jar installation"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-BDB-Store-BDBJE-Installation" />8.4.2.&#160;Oracle BDB JE jar installation</h3></div></div></div><p>
      If you wish to use the BDBMessageStore, copy the je-5.0.58.jar from within the release
      downloaded <a class="link" href="#Java-Broker-Stores-BDB-Store-BDBJE-Download" title="8.4.1.&#160;Oracle BDB JE download">above</a> into the 'opt' sub-directory
      of the brokers 'lib' directory.
    </p><pre class="programlisting">Unix:
cp je-5.0.58.jar qpid-broker-0.22/lib/opt</pre><pre class="programlisting">Windows:
copy je-5.0.58.jar qpid-broker-0.22\lib\opt</pre></div><div class="section" title="8.4.3.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-BDB-Store-Configuration" />8.4.3.&#160;Configuration</h3></div></div></div><p>
      In order to use the BDBMessageStore, you must configure it for each VirtualHost desired by updating the store element
      to specify the associated store class and provide a directory location for the data to be written, as shown below.
    </p><div class="example"><a id="idp26880384" /><p class="title"><strong>Example&#160;8.3.&#160;Configuring a VirtualHost to use the BDBMessageStore</strong></p><div class="example-contents"><pre class="programlisting">
&lt;virtualhosts&gt;
  &lt;virtualhost&gt;
    &lt;name&gt;vhostname&lt;/name&gt;
    &lt;vhostname&gt;
      &lt;store&gt;
        &lt;class&gt;org.apache.qpid.server.store.berkeleydb.BDBMessageStore&lt;/class&gt;
        &lt;environment-path&gt;${QPID_WORK}/bdbstore/vhostname&lt;/environment-path&gt;
      &lt;/store&gt;
      ...
    &lt;/vhostname&gt;
  &lt;/virtualhost&gt;
&lt;/virtualhosts&gt;
</pre></div></div><br class="example-break" /></div></div><div class="section" title="8.5.&#160;High Availability BDB Store"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Stores-HA-BDB-Store" />8.5.&#160;High Availability BDB Store</h2></div></div></div><p>
    The Java broker has an <span class="emphasis"><em>optional</em></span> High Availability message store implementation backed by Oracle BDB JE HA.
    This section references information on where to download the optional dependency from, how to add it to the broker
    installation, and how to configure the BDBHAMessageStore.
  </p><p>
    For more detailed information about use of this store, see <a class="xref" href="#Java-Broker-High-Availability" title="Chapter&#160;12.&#160;High Availability">Chapter&#160;12, <em>High Availability</em></a>.
  </p><div class="section" title="8.5.1.&#160;Oracle BDB JE download"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-HA-BDB-Store-BDBJE-Download" />8.5.1.&#160;Oracle BDB JE download</h3></div></div></div><p>
      For details, see <a class="xref" href="#Java-Broker-Stores-BDB-Store-BDBJE-Download" title="8.4.1.&#160;Oracle BDB JE download">Section&#160;8.4.1, &#8220;Oracle BDB JE download&#8221;</a>.
    </p></div><div class="section" title="8.5.2.&#160;Oracle BDB JE jar installation"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-HA-BDB-Store-BDBJE-Installation" />8.5.2.&#160;Oracle BDB JE jar installation</h3></div></div></div><p>
      For details, see <a class="xref" href="#Java-Broker-Stores-BDB-Store-BDBJE-Installation" title="8.4.2.&#160;Oracle BDB JE jar installation">Section&#160;8.4.2, &#8220;Oracle BDB JE jar installation&#8221;</a>.
    </p></div><div class="section" title="8.5.3.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Stores-HA-BDB-Store-Configuration" />8.5.3.&#160;Configuration</h3></div></div></div><p>
      In order to use the BDBHAMessageStore, you must configure it for each VirtualHost desired by updating the store element
      to specify the associated store class, provide a directory location for the data to be written, and configure the
      replication group and policies used by BDB JA HA.
    </p><p>
      A general configuration example is shown <a class="link" href="#Java-Broker-High-Availability-Configuration" title="12.5.&#160;Configuring a Virtual Host to be a node">here</a>, however it
      is strongly recommended you examine the wider context of <a class="xref" href="#Java-Broker-High-Availability" title="Chapter&#160;12.&#160;High Availability">Chapter&#160;12, <em>High Availability</em></a> for a fuller
      discussion of the various configuration options and how to use them.
    </p></div></div></div><div class="chapter" title="Chapter&#160;9.&#160;Configuring And Managing"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing" />Chapter&#160;9.&#160;Configuring And Managing</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files">9.1. Config Files</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Configuration">9.1.1. Configuration file</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Management">9.1.2. Management Configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-JMX-Management">9.1.3. JMX Management Configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-SSL-keystore-configuration">9.1.4. Management SSL key store configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Config-Files-Web-Management">9.1.5. Web Management Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Web-Console">9.2. Web Console</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-REST-API">9.3. REST API</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-REST-API-Overview">9.3.1. REST API Overview</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-JMX">9.4. JMX</a></span></dt><dt><span class="section"><a href="#Java-Broker-Configuring-And-Managing-Other-Tooling">9.5. Other Tooling</a></span></dt></dl></div><div class="section" title="9.1.&#160;Config Files"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files" />9.1.&#160;Config Files</h2></div></div></div><p>
        This section shows how to configure and manage broker.
    </p><div class="section" title="9.1.1.&#160;Configuration file"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files-Configuration" />9.1.1.&#160;Configuration file</h3></div></div></div><p>Broker can be configured using XML configuration files. By default, broker is looking for configuration file at ${QPID_HOME}/etc/config.xml. The default configuration location can be overridden by specifying command line option <span class="emphasis"><em>-c &lt;path to configuration&gt;</em></span> on broker start up.</p></div><div class="section" title="9.1.2.&#160;Management Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files-Management" />9.1.2.&#160;Management Configuration</h3></div></div></div><p>
        Management interfaces can be configured in <span class="emphasis"><em>management</em></span> section of broker configuration file. The example of the management section is provided below.
        </p><div class="example"><a id="idp26974752" /><p class="title"><strong>Example&#160;9.1.&#160;Management configuration</strong></p><div class="example-contents"><pre class="programlisting">
    &lt;broker&gt;
    ...
        &lt;management&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;jmxport&gt;
                &lt;registryServer&gt;8999&lt;/registryServer&gt;
            &lt;/jmxport&gt;
            &lt;ssl&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
                &lt;keyStorePath&gt;${conf}/qpid.keystore&lt;/keyStorePath&gt;
                &lt;keyStorePassword&gt;password&lt;/keyStorePassword&gt;
            &lt;/ssl&gt;
            &lt;http&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/http&gt;
            &lt;https&gt;
                &lt;enabled&gt;false&lt;/enabled&gt;
            &lt;/https&gt;
        &lt;/management&gt;
    ...
    &lt;/broker&gt;</pre></div></div><br class="example-break" /></div><div class="section" title="9.1.3.&#160;JMX Management Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files-JMX-Management" />9.1.3.&#160;JMX Management Configuration</h3></div></div></div><p>
        JMX management can be configured in <span class="emphasis"><em>management</em></span> section of broker configuration file.
        </p><p>An <span class="emphasis"><em>enabled</em></span> element in the <span class="emphasis"><em>management</em></span> section is used to enable or disable the JMX interfaces. Setting it to <span class="emphasis"><em>true</em></span> causes the broker to start the management plugin if such is available on the broker classpath.</p><p>JMX management requires two ports which can be configured in <span class="emphasis"><em>jmxport</em></span> sub-section of <span class="emphasis"><em>management</em></span>:
        </p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>RMI port (8999 by default) can be configured in an element <span class="emphasis"><em>jmxport/registryServer</em></span></p></li><li class="listitem"><p>Connector port can be configured in an element <span class="emphasis"><em>jmxport/connectorServer</em></span>. If configuration element <span class="emphasis"><em>connectorServer</em></span> is not provided than the connector port defaults to <span class="emphasis"><em>100 + registryServer port</em></span>.</p></li></ul></div><p>
        </p><div class="example"><a id="idp26926080" /><p class="title"><strong>Example&#160;9.2.&#160;Enabling JMX Management and configuring JMX ports</strong></p><div class="example-contents"><pre class="programlisting">
&lt;broker&gt;
...
&lt;management&gt;
    <span class="emphasis"><em>&lt;enabled&gt;true&lt;/enabled&gt;</em></span>                     <a id="java-broker-example-jmx-management-0" />(1)
    &lt;jmxport&gt;
        <span class="emphasis"><em>&lt;registryServer&gt;7999&lt;/registryServer&gt;</em></span>   <a id="java-broker-example-jmx-management-1" />(2)
        <span class="emphasis"><em>&lt;connectorServer&gt;7998&lt;/connectorServer&gt;</em></span> <a id="java-broker-example-jmx-management-2" />(3)
    &lt;/jmxport&gt;
&lt;/management&gt;
...
&lt;/broker&gt;</pre></div></div><br class="example-break" /><p>In the snippet above the following is configured:</p><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-jmx-management-0">(1)</a> </p></td><td align="left" valign="top"><p>Enable JMX management</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-jmx-management-1">(2)</a> </p></td><td align="left" valign="top"><p>Set RMI port to 7999</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-jmx-management-2">(3)</a> </p></td><td align="left" valign="top"><p>Set connector port to 7998</p></td></tr></table></div><p>SSL can be configured to use on the connector port in the sub-section <span class="emphasis"><em>ssl</em></span> of the <span class="emphasis"><em>management</em></span> section. See <a class="xref" href="#Java-Broker-Configuring-And-Managing-Config-Files-SSL-keystore-configuration" title="9.1.4.&#160;Management SSL key store configuration">Section&#160;9.1.4, &#8220;Management SSL key store configuration&#8221;</a> for details.</p><p>In order to use SSL with JMX management an element <span class="emphasis"><em>ssl/enabled</em></span> needs to be set to <span class="emphasis"><em>true</em></span>.</p></div><div class="section" title="9.1.4.&#160;Management SSL key store configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files-SSL-keystore-configuration" />9.1.4.&#160;Management SSL key store configuration</h3></div></div></div><p>
            This section describes how to configure the key store to use in SSL connections in both JMX and Web management interfaces.
        </p><p>The following examples demonstrates how to configure keystore for management</p><div class="example"><a id="idp27163296" /><p class="title"><strong>Example&#160;9.3.&#160;Management key store configuration</strong></p><div class="example-contents"><pre class="programlisting">
&lt;broker&gt;
...
&lt;management&gt;
...
    &lt;ssl&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;                            <a id="java-broker-example-management-keystore-0" />(1)
        &lt;keyStorePath&gt;${conf}/qpid.keystore&lt;/keyStorePath&gt; <a id="java-broker-example-management-keystore-1" />(2)
        &lt;keyStorePassword&gt;password&lt;/keyStorePassword&gt;      <a id="java-broker-example-management-keystore-2" />(3)
    &lt;/ssl&gt;
...
&lt;/management&gt;
...
&lt;/broker&gt;</pre></div></div><br class="example-break" /><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-keystore-0">(1)</a> </p></td><td align="left" valign="top"><p>Enable SSL on JMX connector port only. This setting does not effect the web management interfaces.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-keystore-1">(2)</a> </p></td><td align="left" valign="top"><p>Set path to the key store file</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-keystore-2">(3)</a> </p></td><td align="left" valign="top"><p>Set keystore password</p></td></tr></table></div></div><div class="section" title="9.1.5.&#160;Web Management Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-Config-Files-Web-Management" />9.1.5.&#160;Web Management Configuration</h3></div></div></div><p>
        Web management can be configured in <span class="emphasis"><em>management</em></span> section of broker configuration file.
        </p><p>Sub-section <span class="emphasis"><em>http</em></span> is used to enable web management on http port.</p><p>Sub-section <span class="emphasis"><em>https</em></span> is used to enable web management on https port.</p><p>The following example shows how to configure http and https ports</p><div class="example"><a id="idp27174272" /><p class="title"><strong>Example&#160;9.4.&#160;Enabling web management</strong></p><div class="example-contents"><pre class="programlisting">
&lt;broker&gt;
...
&lt;management&gt;
...
    &lt;http&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;                       <a id="java-broker-example-management-web-0" />(1)
        &lt;port&gt;9090&lt;/port&gt;                             <a id="java-broker-example-management-web-1" />(2)
        &lt;basic-auth&gt;false&lt;/basic-auth&gt;                <a id="java-broker-example-management-web-2" />(3)
        &lt;sasl-auth&gt;true&lt;/sasl-auth&gt;                   <a id="java-broker-example-management-web-3" />(4)
        &lt;session-timeout&gt;600&lt;/session-timeout&gt;        <a id="java-broker-example-management-web-4" />(5)
    &lt;/http&gt;

    &lt;https&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;                       <a id="java-broker-example-management-web-5" />(6)
        &lt;port&gt;9443&lt;/port&gt;                             <a id="java-broker-example-management-web-6" />(7)
        &lt;sasl-auth&gt;true&lt;/sasl-auth&gt;                   <a id="java-broker-example-management-web-7" />(8)
        &lt;basic-auth&gt;true&lt;/basic-auth&gt;                 <a id="java-broker-example-management-web-8" />(9)
    &lt;/https&gt;
...
&lt;/management&gt;
...
&lt;/broker&gt;</pre></div></div><br class="example-break" /><div class="calloutlist"><table border="0" summary="Callout list"><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-0">(1)</a> </p></td><td align="left" valign="top"><p>Enable web management on http port. Default is true.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-1">(2)</a> </p></td><td align="left" valign="top"><p>Set web management http port to 9090. Default is 8080.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-2">(3)</a> </p></td><td align="left" valign="top"><p>Disable basic authentication on http port for REST services only. Default is false.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-3">(4)</a> </p></td><td align="left" valign="top"><p>Enable SASL authentication on http port for REST services and web console. Default is true.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-4">(5)</a> </p></td><td align="left" valign="top"><p>Set session timeout in seconds. Default is 15 minutes.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-5">(6)</a> </p></td><td align="left" valign="top"><p>Enable web management on https port. Default is false.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-6">(7)</a> </p></td><td align="left" valign="top"><p>Set web management https port to 9443. Default is 8443.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-7">(8)</a> </p></td><td align="left" valign="top"><p>Enable SASL authentication on https port for REST services and web console. Default is true.</p></td></tr><tr><td align="left" valign="top" width="5%"><p><a href="#java-broker-example-management-web-8">(9)</a> </p></td><td align="left" valign="top"><p>Enable basic authentication on https port for REST services only. Default is true.</p></td></tr></table></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;" title="Note"><h3 class="title">Note</h3><p>Please configure the keystore to use with the https web management port. See <a class="xref" href="#Java-Broker-Configuring-And-Managing-Config-Files-SSL-keystore-configuration" title="9.1.4.&#160;Management SSL key store configuration">Section&#160;9.1.4, &#8220;Management SSL key store configuration&#8221;</a> for details.</p></div></div></div><div class="section" title="9.2.&#160;Web Console"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing-Web-Console" />9.2.&#160;Web Console</h2></div></div></div><p>If web management is enabled (see <a class="xref" href="#Java-Broker-Configuring-And-Managing-Config-Files-Web-Management" title="9.1.5.&#160;Web Management Configuration">Section&#160;9.1.5, &#8220;Web Management Configuration&#8221;</a>) the web management console can be accessed from web browser using URL http(s)://&lt;hostname&gt;:&lt;port&gt;/management, where</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><span class="emphasis"><em>hostname</em></span> is the broker host</p></li><li class="listitem"><p><span class="emphasis"><em>port</em></span> is the broker port(either http or https)</p></li></ul></div><p>The page like following is displayed on navigation to the management URL.</p><div class="figure"><a id="idp27198000" /><p class="title"><strong>Figure&#160;9.1.&#160;Web management Console</strong></p><div class="figure-contents"><div><img alt="Web management Console" src="images/Management-Web-Console.png" /></div></div></div><br class="figure-break" /></div><div class="section" title="9.3.&#160;REST API"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing-REST-API" />9.3.&#160;REST API</h2></div></div></div><div class="section" title="9.3.1.&#160;REST API Overview"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Configuring-And-Managing-REST-API-Overview" />9.3.1.&#160;REST API Overview</h3></div></div></div><p>This section provides an overview of REST management API.</p><p>If web management is enabled (see <a class="xref" href="#Java-Broker-Configuring-And-Managing-Config-Files-Web-Management" title="9.1.5.&#160;Web Management Configuration">Section&#160;9.1.5, &#8220;Web Management Configuration&#8221;</a>) 
            the REST API can be used to monitor and manage the broker instance.</p><p>The Qpid broker REST services support traditional REST model which uses the GET method requests to retrieve 
            the information about broker configured objects, DELETE method requests to delete the configured object,
            PUT to create the configured object and POST to update the configured objects.</p><p>The table below lists the available REST services with brief description how they can be used.</p><div class="table"><a id="idp27206240" /><p class="title"><strong>Table&#160;9.1.&#160;Rest services</strong></p><div class="table-contents"><table border="1" summary="Rest services"><colgroup><col /><col /><col /><col /><col /><col /></colgroup><thead><tr><th>Rest service URL</th><th>Description</th><th>GET</th><th>PUT</th><th>POST</th><th>DELETE</th></tr></thead><tbody><tr><td><p>/rest/broker</p></td><td><p>Rest service to manage broker instance</p></td><td><p>Retrieves the details of broker configuration</p></td><td><p>Not implemented yet</p></td><td><p>Not implemented yet</p></td><td><p>Not implemented yet</p></td></tr><tr><td><p>/rest/authenticationprovider</p>
                  <p>/rest/authenticationprovider/&lt;authentication provider name&gt;</p>
              </td><td>Rest service to manage authentication providers on the broker</td><td>Retrieves the details about authentication providers</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td><p>/rest/user</p>
                  <p>/rest/user/&lt;authentication provider name&gt;/&lt;user name&gt;</p>
              </td><td>Rest service to manage user account</td><td>Retrieves the details about user account</td><td>Creates user account</td><td>Updates user password</td><td>Deletes user account</td></tr><tr><td><p>/rest/groupprovider</p>
                  <p>/rest/groupprovider/&lt;group provider name&gt;</p>
              </td><td>Rest service to manage group providers</td><td>Retrieves the details about group provider(s)</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td><p>/rest/group</p>
                  <p>/rest/group/&lt;group provider name&gt;/&lt;group name&gt;</p>
              </td><td>Rest service to manage user group</td><td>Retrieves the details about user group</td><td>Creates group</td><td>Not implemented yet</td><td>Deletes group</td></tr><tr><td><p>/rest/groupmember</p>
                  <p>/rest/groupmember/&lt;group provider name &gt;/&lt;group name&gt;/&lt;user name&gt;</p>
              </td><td>Rest service to manage group member(s)</td><td>Retrieves the details about group member(s)</td><td>Add user to group</td><td>Not implemented yet</td><td>Deletes user from group</td></tr><tr><td>
                    <p>/rest/port</p>
                    <p>/rest/port/&lt;port name&gt;</p>
              </td><td>Rest service to manage broker ports(s)</td><td>Retrieves the details about the broker port(s)</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/port</p>
                    <p>/rest/port/&lt;port name&gt;</p>
              </td><td>Rest service to manage broker ports(s)</td><td>Retrieves the details about the broker port(s)</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/queue</p>
                    <p>/rest/queue/&lt;virtual host name&gt;/&gt;queue name&gt;</p>
              </td><td>Rest service to manage queue(s)</td><td>Retrieves the details about the queue(s)</td><td>Creates queue</td><td>Not implemented yet</td><td>Deletes queue</td></tr><tr><td>
                    <p>/rest/exchange</p>
                    <p>/rest/exchange/&lt;virtual host name&gt;/&lt;exchange name&gt;</p>
              </td><td>Rest service to manage exchange(s)</td><td>Retrieves the details about the exchange(s)</td><td>Creates exchange</td><td>Not implemented yet</td><td>Deletes exchange</td></tr><tr><td>
                    <p>/rest/binding</p>
                    <p>/rest/binding/&lt;virtual host name&gt;/&lt;exchange name&gt;/&lt;queue name&gt;/&lt;binding name&gt;</p>
              </td><td>Rest service to manage binding(s)</td><td>Retrieves the details about the binding(s)</td><td>Binds a queue to an exchange</td><td>Not implemented yet</td><td>Deletes binding</td></tr><tr><td>
                    <p>/rest/connection</p>
                    <p>/rest/connection/&lt;virtual host name&gt;/&lt;connection name&gt;</p>
              </td><td>Rest service to manage connection(s)</td><td>Retrieves the details about the connection(s)</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/session</p>
                    <p>/rest/session/&lt;virtual host name&gt;/&lt;connection name&gt;/&lt;session name&gt;</p>
              </td><td>Rest service to manage session(s)</td><td>Retrieves the details about the session(s)</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/message/*</p>
              </td><td>Rest service to manage messages(s)</td><td>Retrieves the details about the messages(s)</td><td>Not implemented yet</td><td>Copies, moves messages</td><td>Deletes messages</td></tr><tr><td>
                    <p>/rest/message-content/*</p>
              </td><td>Rest service to retrieve message content</td><td>Retrieves the message content</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/logrecords</p>
              </td><td>Rest service to retrieve broker logs</td><td>Retrieves the broker logs</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/sasl</p>
              </td><td>Sasl authentication</td><td>Retrieves user current authentication status and broker supported SASL mechanisms</td><td>Authenticates user using supported SASL mechanisms</td><td>Not implemented yet</td><td>Not implemented yet</td></tr><tr><td>
                    <p>/rest/logout</p>
              </td><td>Log outs</td><td>Log outs user</td><td>Not implemented yet</td><td>Not implemented yet</td><td>Not implemented yet</td></tr></tbody></table></div></div><br class="table-break" /><p>Rest URL are hierarchical. It is permitted to replace rest URL elements with an "asterisks" in GET requests to denote
        all object of a particular type. Additionally, trailing object type in the URL hierarchy can be omitted.
        In this case GET request will return all of the object underneath of the current object.</p><p>For example, for binding URL http://localhost:8080/rest/binding/&lt;vhost&gt;/&lt;exchange&gt;/&lt;queue&gt;/&lt;binding&gt;
        replacing of <span class="emphasis"><em>&lt;exchange&gt;</em></span> with "asterisks" (http://localhost:8080/rest/binding/&lt;vhost&gt;/*/&lt;queue&gt;/&lt;binding&gt;)
        will result in the GET response containing the list of bindings for all of the exchanges in the virtual host having the given name and given queue.
        If <span class="emphasis"><em>&lt;binding&gt;</em></span> and <span class="emphasis"><em>&lt;queue&gt;</em></span> are omitted in binding REST URL
        (http://localhost:8080/rest/binding/&lt;vhostname&gt;/&lt;exchangename&gt;) the GET request will result in returning 
        all bindings for all queues for the given exchange in the virtual host.
        </p><div class="example"><a id="idp27334288" /><p class="title"><strong>Example&#160;9.5.&#160;Examples of queue creation using curl:</strong></p><div class="example-contents"><pre class="programlisting">
#create a durable queue
curl -X PUT  -d '{"durable":true}' http://localhost:8080/rest/queue/&lt;vhostname&gt;/&lt;queuename&gt;
#create a durable priority queue
curl -X PUT  -d '{"durable":true,"type":"priority"}' http://localhost:8080/rest/queue/&lt;vhostname&gt;/&lt;queuename&gt;
            </pre></div></div><br class="example-break" /><div class="example"><a id="idp27335744" /><p class="title"><strong>Example&#160;9.6.&#160;Example of binding a queue to an exchange using curl</strong></p><div class="example-contents"><pre class="programlisting">
curl  -X PUT  -d '{}' http://localhost:8080/rest/binding/&lt;vhostname&gt;/&lt;exchangename&gt;/&lt;queue-name&gt;/&lt;binding-name&gt;
            </pre></div></div><br class="example-break" /><p>Qpid broker web management console calls rest interfaces internally to manage the broker.</p></div></div><div class="section" title="9.4.&#160;JMX"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing-JMX" />9.4.&#160;JMX</h2></div></div></div></div><div class="section" title="9.5.&#160;Other Tooling"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Configuring-And-Managing-Other-Tooling" />9.5.&#160;Other Tooling</h2></div></div></div></div></div><div class="chapter" title="Chapter&#160;10.&#160;Security"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security" />Chapter&#160;10.&#160;Security</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Security-Users-And-Groups">10.1. Users And Groups</a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-Group-Providers">10.2. Configuring Group Providers</a></span></dt><dd><dl><dt><span class="section"><a href="#File-Group-Manager">10.2.1. FileGroupManager</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-Authentication-Providers">10.3. Authentication Providers</a></span></dt><dd><dl><dt><span class="section"><a href="#idp27119984">10.3.1. Password File</a></span></dt><dt><span class="section"><a href="#LDAPAuthManager">10.3.2. LDAP</a></span></dt><dt><span class="section"><a href="#idp27129024">10.3.3. Kerberos</a></span></dt><dt><span class="section"><a href="#ExternalAuthManager">10.3.4. External (SSL Client Certificates)</a></span></dt><dt><span class="section"><a href="#AnonymousAuthManager">10.3.5. Anonymous</a></span></dt><dt><span class="section"><a href="#MultipleAuthProviders">10.3.6. Configuring multiple Authentication Providers</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-ACLs">10.4. Access Control Lists</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Security-ACLs-EnablingACL">10.4.1. 
       Enabling ACLs
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-WriteACL">10.4.2. 
       Writing .acl files
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-Syntax">10.4.3. 
       Syntax
    </a></span></dt><dt><span class="section"><a href="#Java-Broker-Security-ACLs-WorkedExamples">10.4.4. 
      Worked Examples
    </a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Security-SSL">10.5. SSL</a></span></dt><dd><dl><dt><span class="section"><a href="#SSL-Keystore">10.5.1. Keystore Configuration</a></span></dt><dt><span class="section"><a href="#SSL-Truststore-ClientCertificate">10.5.2. Truststore / Client Certificate Authentication</a></span></dt></dl></dd></dl></div><div class="section" title="10.1.&#160;Users And Groups"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security-Users-And-Groups" />10.1.&#160;Users And Groups</h2></div></div></div></div><div class="section" title="10.2.&#160;Configuring Group Providers"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security-Group-Providers" />10.2.&#160;Configuring Group Providers</h2></div></div></div><p>
    The Java broker utilises GroupProviders to allow assigning users to groups for use in <a class="link" href="#Java-Broker-Security-ACLs" title="10.4.&#160;Access Control Lists">ACLs</a>. Following authentication by a given <a class="link" href="#Java-Broker-Security-Authentication-Providers" title="10.3.&#160;Authentication Providers">Authentication Provider</a>, the configured Group Providers are consulted to allowing assignment of GroupPrincipals for a given authenticated user.
  </p><div class="section" title="10.2.1.&#160;FileGroupManager"><div class="titlepage"><div><div><h3 class="title"><a id="File-Group-Manager" />10.2.1.&#160;FileGroupManager</h3></div></div></div><p>
      The FileGroupManager allows specifying group membership in a flat file on disk, and is also exposed for inspection and update through the brokers HTTP management interface.
    </p><p>
      To enable the FileGroupManager, add the following configuration to the config.xml, adjusting the groupFile attribute value to match your desired groups file location.
    </p><pre class="programlisting">
    ...
    &lt;security&gt;
        &lt;file-group-manager&gt;
            &lt;attributes&gt;
              &lt;attribute&gt;
                &lt;name&gt;groupFile&lt;/name&gt;
                 &lt;value&gt;${conf}/groups&lt;/value&gt;
              &lt;/attribute&gt;
            &lt;/attributes&gt;
        &lt;/file-group-manager&gt;
    &lt;/security&gt;
    ...
</pre><div class="section" title="10.2.1.1.&#160;File Format"><div class="titlepage"><div><div><h4 class="title"><a id="File-Group-Manager-FileFormat" />10.2.1.1.&#160;File Format</h4></div></div></div><p>
            The groups file has the following format:
          </p><pre class="programlisting">
    # &lt;GroupName&gt;.users = &lt;comma deliminated user list&gt;
    # For example:

    administrators.users = admin,manager
</pre><p>
            Only users can be added to a group currently, not other groups. Usernames can't contain commas.
          </p><p>
            Lines starting with a '#' are treated as comments when opening the file, but these are not preserved when the broker updates the file due to changes made through the management interface.
          </p></div></div></div><div class="section" title="10.3.&#160;Authentication Providers"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security-Authentication-Providers" />10.3.&#160;Authentication Providers</h2></div></div></div><p>
    In order to successfully establish a connection to the Java Broker, the connection must be
    authenticated. The Java Broker supports a number of different authentication schemes, each
    with its own "authentication manager". Each of these are outlined below, along with details
    of <a class="link" href="#MultipleAuthProviders" title="10.3.6.&#160;Configuring multiple Authentication Providers"> using more than one at a time</a>.
  </p><div class="section" title="10.3.1.&#160;Password File"><div class="titlepage"><div><div><h3 class="title"><a id="idp27119984" />10.3.1.&#160;Password File</h3></div></div></div><p>
      TODO
    </p></div><div class="section" title="10.3.2.&#160;LDAP"><div class="titlepage"><div><div><h3 class="title"><a id="LDAPAuthManager" />10.3.2.&#160;LDAP</h3></div></div></div><p>
    LDAP authentication can be configured using the &lt;simple-ldap-auth-manager&gt; element
    within the &lt;security&gt; section. An example of how to configure this is shown below.
    Please note this example also configures an unused &lt;pd-auth-manager&gt; to use an empty
    password file, this is a workaround for an issue relating to registration of security providers.
  </p><p>
    <span class="emphasis"><em>NOTE: When using LDAP authentication, you must also use SSL on the brokers AMQP messaging and
    JMX/HTTP management ports in order to protect passwords during transmission to the broker.</em></span>
  </p><div class="example"><a id="idp27124096" /><p class="title"><strong>Example&#160;10.1.&#160;Configuring LDAP authentication</strong></p><div class="example-contents"><pre class="programlisting">
&lt;security&gt;
  &lt;default-auth-manager&gt;SimpleLDAPAuthenticationManager&lt;/default-auth-manager&gt;
  &lt;simple-ldap-auth-manager&gt;
    &lt;provider-url&gt;ldaps://example.com:636/&lt;/provider-url&gt;
    &lt;search-context&gt;dc=example\,dc=com&lt;/search-context&gt;
    &lt;search-filter&gt;(uid={0})&lt;/search-filter&gt;
  &lt;/simple-ldap-auth-manager&gt;

  &lt;!-- Unused pd-auth-manager, a workaround to register the necessary security providers --&gt;
  &lt;pd-auth-manager&gt;
    &lt;principal-database&gt;
      &lt;class&gt;org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase&lt;/class&gt;
      &lt;attributes&gt;
        &lt;attribute&gt;
          &lt;name&gt;passwordFile&lt;/name&gt;
          &lt;value&gt;${conf}/emptyPasswdFile&lt;/value&gt;
        &lt;/attribute&gt;
      &lt;/attributes&gt;
    &lt;/principal-database&gt;
  &lt;pd-auth-manager&gt;
  ...
&lt;/security&gt;</pre></div></div><br class="example-break" /><p>
    The authentication manager first connects to the ldap server anonymously and searches for the
    ldap entity which is identified by the username provided over SASL. Essentially the
    authentication manager calls
    DirContext.search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons)
    with the values of search-context and search-filter as the first two arguments, and the username
    as the only element in the array which is the third argument.
  </p><p>
    If the search returns a name from the LDAP server, the AuthenticationManager then attempts to
    login to the ldap server with the given name and the password.
  </p><p>
    If the URL to open for authentication is different to that for the search, then the
    authentication url can be overridden using &lt;provider-auth-url&gt; in addition to providing a
    &lt;provider-url&gt;. Note that the URL used for authentication should use ldaps:// since
    passwords will be being sent over it.
  </p><p>
    By default com.sun.jndi.ldap.LdapCtxFactory is used to create the context, however this can be
    overridden by specifying &lt;ldap-context-factory&gt; in the configuration.
  </p></div><div class="section" title="10.3.3.&#160;Kerberos"><div class="titlepage"><div><div><h3 class="title"><a id="idp27129024" />10.3.3.&#160;Kerberos</h3></div></div></div><p>
    Kereberos Authentication is configured using the &lt;kerberos-auth-manager&gt; element within
    the &lt;security&gt; section. When referencing from the default-auth-manager or port-mapping
    sections, its name is KerberosAuthenticationManager.
  </p><p>
    Since Kerberos support only works where SASL authentication is available (e.g. not for JMX
    authentication) you may wish to also include an alternative Authentication Manager
    configuration, and use this for other ports:
  </p><div class="example"><a id="idp27423712" /><p class="title"><strong>Example&#160;10.2.&#160;Configuring Kerberos authentication</strong></p><div class="example-contents"><pre class="programlisting">
&lt;security&gt;
  &lt;pd-auth-manager&gt;
    &lt;principal-database&gt;
      &lt;class&gt;org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase&lt;/class&gt;
      &lt;attributes&gt;
        &lt;attribute&gt;
          &lt;name&gt;passwordFile&lt;/name&gt;
          &lt;value&gt;${conf}/passwd&lt;/value&gt;
        &lt;/attribute&gt;
      &lt;/attributes&gt;
    &lt;/principal-database&gt;
  &lt;/pd-auth-manager&gt;
  &lt;kerberos-auth-manager/&gt;
  &lt;default-auth-manager&gt;PrincipalDatabaseAuthenticationManager&lt;/default-auth-manager&gt;
  &lt;port-mappings&gt;
    &lt;port-mapping&gt;
      &lt;port&gt;5672&lt;/port&gt;
      &lt;auth-manager&gt;KerberosAuthenticationManager&lt;/auth-manager&gt;
    &lt;/port-mapping&gt;
  &lt;/port-mappings&gt;
  ...
&lt;/security&gt;</pre></div></div><br class="example-break" /><p>
    Configuration of kerberos is done through system properties (there doesn't seem to be a way
    around this unfortunately).
  </p><pre class="programlisting">
    export QPID_OPTS=-Djavax.security.auth.useSubjectCredsOnly=false -Djava.security.auth.login.config=qpid.conf
    ${QPID_HOME}/bin/qpid-server
  </pre><p>Where qpid.conf would look something like this:</p><pre class="programlisting">
com.sun.security.jgss.accept {
    com.sun.security.auth.module.Krb5LoginModule required
    useKeyTab=true
    storeKey=true
    doNotPrompt=true
    realm="EXAMPLE.COM"
    useSubjectCredsOnly=false
    kdc="kerberos.example.com"
    keyTab="/path/to/keytab-file"
    principal="&lt;name&gt;/&lt;host&gt;";
};</pre><p>
    Where realm, kdc, keyTab and principal should obviously be set correctly for the environment
    where you are running (see the existing documentation for the C++ broker about creating a keytab
    file).
  </p><p>
    Note: You may need to install the "Java Cryptography Extension (JCE) Unlimited Strength
    Jurisdiction Policy Files" appropriate for your JDK in order to get Kerberos support working.
  </p></div><div class="section" title="10.3.4.&#160;External (SSL Client Certificates)"><div class="titlepage"><div><div><h3 class="title"><a id="ExternalAuthManager" />10.3.4.&#160;External (SSL Client Certificates)</h3></div></div></div><p>
      When <a class="link" href="#SSL-Truststore-ClientCertificate" title="10.5.2.&#160;Truststore / Client Certificate Authentication"> requiring SSL Client Certificates</a> be
      presented the ExternalAuthenticationManager can be used, such that the user is authenticated based on
      trust of their certificate alone, and the X500Principal from the SSL session is then used as the username
      for the connection, instead of also requiring the user to present a valid username and password.
    </p><p>
      The ExternalAuthenticationManager may be enabled by adding an empty &lt;external-auth-manager&gt; element to
      the &lt;security&gt; section, as shown below. When referencing it from the default-auth-manager or port-mapping
      sections, its name is ExternalAuthenticationManager.
    </p><p>
      <span class="bold"><strong>Note:</strong></span> The ExternalAuthenticationManager should typically only be used on the
      AMQP ports, in conjunction with <a class="link" href="#SSL-Truststore-ClientCertificate" title="10.5.2.&#160;Truststore / Client Certificate Authentication">SSL client certificate
      authentication</a>. It is not intended for other uses such as the JMX management port and will treat any
      non-sasl authentication processes on these ports as successfull with the given username. As such you should
      <a class="link" href="#MultipleAuthProviders" title="10.3.6.&#160;Configuring multiple Authentication Providers">include another Authentication Manager for use on non-AMQP ports</a>,
      as is done in the example below. Perhaps the only exception to this would be where the broker is embedded in a
      container that is itself externally protecting the HTTP interface and then providing the remote users name.
    </p><div class="example"><a id="idp27156960" /><p class="title"><strong>Example&#160;10.3.&#160;Configuring external authentication (SSL client auth)</strong></p><div class="example-contents"><pre class="programlisting">
&lt;security&gt;
  &lt;pd-auth-manager&gt;
    &lt;principal-database&gt;
      &lt;class&gt;org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase&lt;/class&gt;
      &lt;attributes&gt;
        &lt;attribute&gt;
          &lt;name&gt;passwordFile&lt;/name&gt;
          &lt;value&gt;${conf}/passwd&lt;/value&gt;
        &lt;/attribute&gt;
      &lt;/attributes&gt;
    &lt;/principal-database&gt;
  &lt;/pd-auth-manager&gt;
  &lt;external-auth-manager/&gt;
  &lt;default-auth-manager&gt;PrincipalDatabaseAuthenticationManager&lt;/default-auth-manager&gt;
  &lt;port-mappings&gt;
    &lt;port-mapping&gt;
      &lt;port&gt;5672&lt;/port&gt;
      &lt;auth-manager&gt;ExternalAuthenticationManager&lt;/auth-manager&gt;
    &lt;/port-mapping&gt;
  &lt;/port-mappings&gt;
  ...
&lt;/security&gt;</pre></div></div><br class="example-break" /></div><div class="section" title="10.3.5.&#160;Anonymous"><div class="titlepage"><div><div><h3 class="title"><a id="AnonymousAuthManager" />10.3.5.&#160;Anonymous</h3></div></div></div><p>
      The AnonymousAuthenticationManager will allow users to connect with or without credentials and result
      in their identification on the broker as the user ANONYMOUS. It may be enabled by adding an empty
      anonymous-auth-manager element to the security configuration section, as shown below.
    </p><div class="example"><a id="idp27357328" /><p class="title"><strong>Example&#160;10.4.&#160;Configuring anonymous authentication</strong></p><div class="example-contents"><pre class="programlisting">
&lt;security&gt;
  &lt;anonymous-auth-manager/&gt;
  ...
&lt;/security&gt;</pre></div></div><br class="example-break" /><p>
      When referencing it from the default-auth-manager or port-mapping sections, its name is
      AnonymousAuthenticationManager.
    </p></div><div class="section" title="10.3.6.&#160;Configuring multiple Authentication Providers"><div class="titlepage"><div><div><h3 class="title"><a id="MultipleAuthProviders" />10.3.6.&#160;Configuring multiple Authentication Providers</h3></div></div></div><p>
      Different managers may be used on different ports. Each manager has its own configuration element,
      the presence of which within the &lt;security&gt; section denotes the use of that authentication
      provider. Where only one such manager is configured, it will be used on all ports (including JMX
      and HTTP). Where more than one authentication manager is configured the configuration must define
      which is the "default", and (if required) the mapping of non-default authentication managers to
      other ports.
    </p><p>
      The following configuration sets up three authentication managers, using a password file as the
      default (e.g. for the JMX and HTTP ports), Kerberos on port 5672 (the regular AMQP port) and Anonymous
      on port 5673 (e.g a second AMQP port the broker could have been configured with).
    </p><div class="example"><a id="idp27362128" /><p class="title"><strong>Example&#160;10.5.&#160;Configuring multiple (per-port) authentication schemes</strong></p><div class="example-contents"><pre class="programlisting">
&lt;security&gt;
  &lt;pd-auth-manager&gt;
    &lt;principal-database&gt;
      &lt;class&gt;org.apache.qpid.server.security.auth.database.PlainPasswordFilePrincipalDatabase&lt;/class&gt;
      &lt;attributes&gt;
        &lt;attribute&gt;
          &lt;name&gt;passwordFile&lt;/name&gt;
          &lt;value&gt;${conf}/passwd&lt;/value&gt;
        &lt;/attribute&gt;
      &lt;/attributes&gt;
    &lt;/principal-database&gt;
  &lt;/pd-auth-manager&gt;
  &lt;kerberos-auth-manager&gt;
    &lt;auth-name&gt;sib&lt;/auth-name&gt;
  &lt;/kerberos-auth-manager&gt;
  &lt;anonymous-auth-manager/&gt;
  &lt;default-auth-manager&gt;PrincipalDatabaseAuthenticationManager&lt;/default-auth-manager&gt;
  &lt;port-mappings&gt;
    &lt;port-mapping&gt;
      &lt;port&gt;5672&lt;/port&gt;
        &lt;auth-manager&gt;KerberosAuthenticationManager&lt;/auth-manager&gt;
      &lt;/port-mapping&gt;
    &lt;port-mapping&gt;
      &lt;port&gt;5673&lt;/port&gt;
        &lt;auth-manager&gt;AnonymousAuthenticationManager&lt;/auth-manager&gt;
    &lt;/port-mapping&gt;
  &lt;/port-mappings&gt;
  ...
&lt;/security&gt;</pre></div></div><br class="example-break" /></div></div><div class="section" title="10.4.&#160;Access Control Lists"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security-ACLs" />10.4.&#160;Access Control Lists</h2></div></div></div><p>
    In Qpid, Access Control Lists (ACLs) specify which actions can be performed by each authenticated user.
    To enable, the &lt;acl/&gt; element is used within the &lt;security/&gt; element of the configuration XML.
    In the Java Broker, the ACL may be imposed broker wide or applied to individual virtual
    hosts.  The  &lt;acl/&gt; configuration references a text file containing the ACL rules.
    By convention, this file should have a .acl extension.
  </p><div class="section" title="10.4.1.&#160; Enabling ACLs"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Security-ACLs-EnablingACL" />10.4.1.&#160;
       Enabling ACLs
    </h3></div></div></div><p>
      To apply an ACL broker-wide, add the following to the config.xml (assuming that <em class="replaceable"><code>conf</code></em> has been set to a suitable
      location such as ${QPID_HOME}/etc):
    </p><pre class="programlisting">
      &lt;broker&gt;
        ...
        &lt;security&gt;
          ...
          &lt;acl&gt;<em class="replaceable"><code>${conf}/broker.acl</code></em>&lt;/acl&gt;
        &lt;/security&gt;
      &lt;/broker&gt;
    </pre><p>
    </p><p>
      To apply an ACL on a single virtualhost named <em class="replaceable"><code>test</code></em>, add the following to the config.xml:
    </p><pre class="programlisting">
      &lt;virtualhost&gt;
        ...
        &lt;name&gt;test&lt;/name&gt;
        &lt;test&gt;
          ...
          &lt;security&gt;
            &lt;acl&gt;<em class="replaceable"><code>${conf}/vhost_test.acl</code></em>&lt;/acl&gt;
          &lt;/security&gt;
        &lt;/test&gt;
      &lt;/virtualhost&gt;
    </pre></div><div class="section" title="10.4.2.&#160; Writing .acl files"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Security-ACLs-WriteACL" />10.4.2.&#160;
       Writing .acl files
    </h3></div></div></div><p>
      The ACL file consists of a series of rules associating behaviour for a user or group. Use of groups can serve to make the ACL file more concise. See <a class="link" href="#Java-Broker-Security-Group-Providers" title="10.2.&#160;Configuring Group Providers">Configuring Group Providers</a> for more information on defining groups.
    </p><p>
      Each ACL rule grants or denies a particular action on an object to a user/group.  The rule may be augmented with one or more properties, restricting
      the rule's applicability.
    </p><pre class="programlisting">
      ACL ALLOW alice CREATE QUEUE              # Grants alice permission to create all queues.
      ACL DENY bob CREATE QUEUE name="myqueue"  # Denies bob permission to create a queue called "myqueue"
    </pre><p>
      The ACL is considered in strict line order with the first matching rule taking precedence over all those that follow. In the following
      example, if the user bob tries to create an exchange "myexch", the operation will be allowed by the first rule.  The second rule will
      never be considered.
    </p><pre class="programlisting">
      ACL ALLOW bob ALL EXCHANGE
      ACL DENY bob CREATE EXCHANGE name="myexch"  # Dead rule
    </pre><p>
      If the desire is to allow bob to create all exchanges except "myexch", order of the rules must be reversed:
    </p><pre class="programlisting">
      ACL DENY bob CREATE EXCHANGE name="myexch"
      ACL ALLOW bob ALL EXCHANGE
    </pre><p>
      All ACL files end with an implict rule denying all operations to all users.  It is as if each file ends with
      </p><pre class="programlisting">ACL DENY ALL ALL </pre><p>
      If instead you wish to <span class="emphasis"><em>allow</em></span> all operations other than those controlled by earlier rules,
      add </p><pre class="programlisting">ACL ALLOW ALL ALL</pre><p> to the bottom of the ACL file.
    </p><p>
      When writing a new ACL, a good approach is to begin with an .acl file containing only </p><pre class="programlisting">ACL DENY-LOG ALL ALL</pre><p>
      which will cause the Broker to deny all operations with details of the denial logged to the Qpid log file. Build up the ACL rule by rule,
      gradually working through the use-cases of your system.  Once the ACL is complete, consider switching the DENY-LOG actions to DENY
      to improve performamce and reduce log noise.
    </p><p>
      ACL rules are very powerful: it is possible to write very granular rules specifying many broker objects and their
      properties.  Most projects probably won't need this degree of flexibility.  A reasonable approach is to choose to apply permissions
      at a certain level of abstraction (e.g. QUEUE) and apply them consistently across the whole system.
    </p></div><div class="section" title="10.4.3.&#160; Syntax"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Security-ACLs-Syntax" />10.4.3.&#160;
       Syntax
    </h3></div></div></div><p>
       ACL rules follow this syntax:
    </p><pre class="programlisting">
     ACL {permission} {&lt;group-name&gt;|&lt;user-name&gt;&gt;|ALL} {action|ALL} [object|ALL] [property="&lt;property-value&gt;"]
    </pre><p>
       Comments may be introduced with the hash (#) character and are ignored.  Long lines can be broken with the slash (\) character.
    </p><pre class="programlisting">
      # A comment
      ACL ALLOW admin CREATE ALL # Also a comment
      ACL DENY guest \
      ALL ALL   # A broken line
    </pre></div><div class="table"><a id="table-Java-Broker-Security-ACLs-Syntax_permissions" /><p class="title"><strong>Table&#160;10.1.&#160;List of ACL permission</strong></p><div class="table-contents"><table border="1" summary="List of ACL permission"><colgroup><col /><col /></colgroup><tbody><tr><td><span class="command"><strong>ALLOW</strong></span></td><td><p>Allow the action</p></td></tr><tr><td><span class="command"><strong>ALLOW-LOG</strong></span></td><td><p> Allow the action and log the action in the log </p></td></tr><tr><td><span class="command"><strong>DENY</strong></span></td><td><p> Deny the action</p></td></tr><tr><td><span class="command"><strong>DENY-LOG</strong></span></td><td><p> Deny the action and log the action in the log</p></td></tr></tbody></table></div></div><br class="table-break" /><div class="table"><a id="table-Java-Broker-Security-ACLs-Syntax_actions" /><p class="title"><strong>Table&#160;10.2.&#160;List of ACL actions</strong></p><div class="table-contents"><table border="1" summary="List of ACL actions"><colgroup><col /><col /></colgroup><tbody><tr><td> <span class="command"><strong>CONSUME</strong></span> </td><td> <p> Applied when subscriptions are created </p> </td></tr><tr><td> <span class="command"><strong>PUBLISH</strong></span> </td><td> <p> Applied on a per message basis on publish message transfers</p> </td></tr><tr><td> <span class="command"><strong>CREATE</strong></span> </td><td> <p> Applied when an object is created, such as bindings, queues, exchanges</p> </td></tr><tr><td> <span class="command"><strong>ACCESS</strong></span> </td><td> <p> Applied when an object is read or accessed</p> </td></tr><tr><td> <span class="command"><strong>BIND</strong></span> </td><td> <p> Applied when queues are bound to exchanges</p> </td></tr><tr><td> <span class="command"><strong>UNBIND</strong></span> </td><td> <p> Applied when queues are unbound from exchanges</p> </td></tr><tr><td> <span class="command"><strong>DELETE</strong></span> </td><td> <p> Applied when objects are deleted </p> </td></tr><tr><td> <span class="command"><strong>PURGE</strong></span> </td><td>
          <p>Applied when purge the contents of a queue</p> </td></tr><tr><td> <span class="command"><strong>UPDATE</strong></span> </td><td> <p> Applied when an object is updated </p> </td></tr></tbody></table></div></div><br class="table-break" /><div class="table"><a id="table-Java-Broker-Security-ACLs-Syntax_objects" /><p class="title"><strong>Table&#160;10.3.&#160;List of ACL objects</strong></p><div class="table-contents"><table border="1" summary="List of ACL objects"><colgroup><col /><col /></colgroup><tbody><tr><td> <span class="command"><strong>VIRTUALHOST</strong></span> </td><td> <p>A virtualhost (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>MANAGEMENT </strong></span> </td><td> <p>Management - for web and JMX (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>QUEUE</strong></span> </td><td> <p>A queue </p> </td></tr><tr><td> <span class="command"><strong>EXCHANGE</strong></span> </td><td> <p>An exchange </p> </td></tr><tr><td> <span class="command"><strong>USER</strong></span> </td><td> <p>A user (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>GROUP</strong></span> </td><td> <p>A group (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>METHOD</strong></span> </td><td> <p>Management or agent or broker method (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>LINK</strong></span> </td><td> <p>A federation or inter-broker link (not currently used in Java Broker)</p> </td></tr><tr><td> <span class="command"><strong>BROKER</strong></span> </td><td> <p>The broker (not currently used in Java Broker)</p> </td></tr></tbody></table></div></div><br class="table-break" /><div class="table"><a id="table-Java-Broker-Security-ACLs-Syntax_properties" /><p class="title"><strong>Table&#160;10.4.&#160;List of ACL properties</strong></p><div class="table-contents"><table border="1" summary="List of ACL properties"><colgroup><col /><col /></colgroup><tbody><tr><td><span class="command"><strong>name</strong></span> </td><td> <p> String. Object name, such as a queue name, exchange name or JMX method name.  </p> </td></tr><tr><td> <span class="command"><strong>durable</strong></span> </td><td> <p> Boolean. Indicates the object is durable </p> </td></tr><tr><td> <span class="command"><strong>routingkey</strong></span> </td><td> <p> String. Specifies routing key </p> </td></tr><tr><td> <span class="command"><strong>passive</strong></span> </td><td> <p> Boolean. Indicates the presence of a <em class="parameter"><code>passive</code></em> flag </p> </td></tr><tr><td> <span class="command"><strong>autodelete</strong></span> </td><td> <p> Boolean. Indicates whether or not the object gets deleted when the connection is closed </p> </td></tr><tr><td> <span class="command"><strong>exclusive</strong></span> </td><td> <p> Boolean. Indicates the presence of an <em class="parameter"><code>exclusive</code></em> flag </p> </td></tr><tr><td> <span class="command"><strong>temporary</strong></span> </td><td> <p> Boolean. Indicates the presence of an <em class="parameter"><code>temporary</code></em> flag </p> </td></tr><tr><td> <span class="command"><strong>type</strong></span> </td><td> <p> String. Type of object, such as topic, fanout, or xml </p> </td></tr><tr><td> <span class="command"><strong>alternate</strong></span> </td><td> <p> String. Name of the alternate exchange </p> </td></tr><tr><td> <span class="command"><strong>queuename</strong></span> </td><td> <p> String. Name of the queue (used only when the object is something other than <em class="parameter"><code>queue</code></em> </p> </td></tr><tr><td> <span class="command"><strong>component</strong></span> </td><td> <p> String. JMX component name (Java Broker only)</p> </td></tr><tr><td> <span class="command"><strong>schemapackage</strong></span> </td><td> <p> String. QMF schema package name (Not used in Java Broker)</p> </td></tr><tr><td> <span class="command"><strong>schemaclass</strong></span> </td><td> <p> String. QMF schema class name (Not used in Java Broker)</p> </td></tr><tr><td> <span class="command"><strong>from_network</strong></span> </td><td>
            <p>
              Comma-separated strings representing IPv4 address ranges.
            </p>
            <p>
              Intended for use in ACCESS VIRTUALHOST rules to apply firewall-like restrictions.
            </p>
            <p>
              The rule matches if any of the address ranges match the IPv4 address of the messaging client.
              The address ranges are specified using either Classless Inter-Domain Routing notation
              (e.g. 192.168.1.0/24; see <a class="ulink" href="http://tools.ietf.org/html/rfc4632" target="_top">RFC 4632</a>)
              or wildcards (e.g. 192.169.1.*).
            </p>
            <p>
              Java Broker only.
            </p>
          </td></tr><tr><td> <span class="command"><strong>from_hostname</strong></span> </td><td>
            <p>
              Comma-separated strings representing hostnames, specified using Perl-style regular
              expressions, e.g. .*\.example\.company\.com
            </p>
            <p>
              Intended for use in ACCESS VIRTUALHOST rules to apply firewall-like restrictions.
            </p>
            <p>
              The rule matches if any of the patterns match the hostname of the messaging client.
            </p>
            <p>
              To look up the client's hostname, Qpid uses Java's DNS support, which internally caches its results.
            </p>
            <p>
              You can modify the time-to-live of cached results using the *.ttl properties described on the
              Java <a class="ulink" href="http://docs.oracle.com/javase/6/docs/technotes/guides/net/properties.html" target="_top">Networking
              Properties</a> page.
            </p>
            <p>
              For example, you can either set system property sun.net.inetaddr.ttl from the command line
              (e.g. export QPID_OPTS="-Dsun.net.inetaddr.ttl=0") or networkaddress.cache.ttl in
              $JAVA_HOME/lib/security/java.security. The latter is preferred because it is JVM
              vendor-independent.
            </p>
            <p>
              Java Broker only.
            </p>
          </td></tr></tbody></table></div></div><br class="table-break" /><div class="table"><a id="table-Java-Broker-Security-ACLs-Syntax_javacomponents" /><p class="title"><strong>Table&#160;10.5.&#160;List of ACL rules</strong></p><div class="table-contents"><table border="1" summary="List of ACL rules"><colgroup><col /><col /><col /></colgroup><tbody><tr><td> <span class="command"><strong>UserManagement</strong></span> </td><td> <p>User maintainance; create/delete/view users, change passwords etc</p> </td><td> <p>permissionable at broker level only</p> </td></tr><tr><td> <span class="command"><strong>ConfigurationManagement</strong></span> </td><td> <p>Dynammically reload configuration from disk.</p> </td><td> <p>permissionable at broker level only</p> </td></tr><tr><td> <span class="command"><strong>LoggingManagement</strong></span> </td><td> <p>Dynammically control Qpid logging level</p> </td><td> <p>permissionable at broker level only</p> </td></tr><tr><td> <span class="command"><strong>ServerInformation</strong></span> </td><td> <p>Read-only information regarding the Qpid: version number etc</p> </td><td> <p>permissionable at broker level only</p> </td></tr><tr><td> <span class="command"><strong>VirtualHost.Queue</strong></span> </td><td> <p>Queue maintainance; copy/move/purge/view etc</p> </td><td class="auto-generated">&#160;</td></tr><tr><td> <span class="command"><strong>VirtualHost.Exchange</strong></span> </td><td> <p>Exchange maintenance; bind/unbind queues to exchanges</p> </td><td class="auto-generated">&#160;</td></tr><tr><td> <span class="command"><strong>VirtualHost.VirtualHost</strong></span> </td><td> <p>Virtual host maintainace; create/delete exchanges, queues etc</p> </td><td class="auto-generated">&#160;</td></tr></tbody></table></div></div><br class="table-break" /><div class="section" title="10.4.4.&#160; Worked Examples"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Security-ACLs-WorkedExamples" />10.4.4.&#160;
      Worked Examples
    </h3></div></div></div><p>
      Here are some example ACLs illustrating common use cases.
      In addition, note that the Java broker provides a complete example ACL file, located at etc/broker_example.acl.
    </p><div class="section" title="10.4.4.1.&#160; Worked example 1 - Management rights"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Security-ACLs-WorkedExample1" />10.4.4.1.&#160;
        Worked example 1 - Management rights
      </h4></div></div></div><p>
        Suppose you wish to permission two users: a user 'operator' must be able to perform all Management operations, and
        a user 'readonly' must be enable to perform only read-only functions.  Neither 'operator' nor 'readonly'
        should be allowed to connect clients for messaging.
      </p><pre class="programlisting">
# Deny (loggged) operator/readonly permission to connect messaging clients.
ACL DENY-LOG operator ACCESS VIRTUALHOST
ACL DENY-LOG readonly ACCESS VIRTUALHOST
# Give operator permission to perfom all other actions
ACL ALLOW operator ALL ALL
# Give readonly permission to execute only read-only actions
ACL ALLOW readonly ACCESS ALL
...
... rules for other users
...
# Explicitly deny all (log) to eveyone
ACL DENY-LOG ALL ALL
      </pre></div><div class="section" title="10.4.4.2.&#160; Worked example 2 - User maintainer group"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Security-ACLs-WorkedExample2" />10.4.4.2.&#160;
        Worked example 2 - User maintainer group
      </h4></div></div></div><p>
        Suppose you wish to restrict User Management operations to users belonging to a
        <a class="link" href="#Java-Broker-Security-Group-Providers" title="10.2.&#160;Configuring Group Providers">group</a> 'usermaint'.  No other user
        is allowed to perform user maintainence  This example illustrates the permissioning of an individual component.
      </p><pre class="programlisting">
# Give usermaint access to management and permission to execute all JMX Methods on the
# UserManagement MBean and perform all actions for USER objects
ACL ALLOW usermaint ACCESS MANAGEMENT
ACL ALLOW usermaint ALL METHOD component="UserManagement"
ACL ALLOW usermaint ALL USER
ACL DENY ALL ALL METHOD component="UserManagement"
ACL DENY ALL ALL USER
...
... rules for other users
...
ACL DENY-LOG ALL ALL
      </pre></div><div class="section" title="10.4.4.3.&#160; Worked example 3 - Request/Response messaging"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Security-ACLs-WorkedExample3" />10.4.4.3.&#160;
        Worked example 3 - Request/Response messaging
      </h4></div></div></div><p>
        Suppose you wish to permission a system using a request/response paradigm. Two users: 'client' publishes requests;
        'server' consumes the requests and generates a response.  This example illustrates the permissioning of AMQP exchanges
        and queues.
      </p><pre class="programlisting">
# Allow client and server to connect to the virtual host.
ACL ALLOW client ACCESS VIRTUALHOST
ACL ALLOW server ACCESS VIRTUALHOST

# Client side
# Allow the 'client' user to publish requests to the request queue. As is the norm for the request/response paradigm, the client
# is required to create a temporary queue on which the server will respond.  Consequently, there are rules to allow the creation
# of the temporary queues and consumption of messages from it.
ACL ALLOW client CREATE QUEUE temporary="true"
ACL ALLOW client CONSUME QUEUE temporary="true"
ACL ALLOW client DELETE QUEUE temporary="true"
ACL ALLOW client BIND EXCHANGE name="amq.direct" temporary="true"
ACL ALLOW client UNBIND EXCHANGE name="amq.direct" temporary="true"
ACL ALLOW client PUBLISH EXCHANGE name="amq.direct" routingKey="example.RequestQueue"

# Server side
# Allow the 'server' user to consume from the request queue and publish a response to the temporary response queue created by
# client.  We also allow the server to create the request queue.
ACL ALLOW server CREATE QUEUE name="example.RequestQueue"
ACL ALLOW server CONSUME QUEUE name="example.RequestQueue"
ACL ALLOW server BIND EXCHANGE
ACL ALLOW server PUBLISH EXCHANGE name="amq.direct" routingKey="TempQueue*"

ACL DENY-LOG all all
      </pre></div><div class="section" title="10.4.4.4.&#160; Worked example 4 - firewall-like access control"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Security-ACLs-WorkedExample4" />10.4.4.4.&#160;
        Worked example 4 - firewall-like access control
      </h4></div></div></div><p>
        This example illustrates how to set up an ACL that restricts the IP addresses and hostnames
        of messaging clients that can access a virtual host.
      </p><pre class="programlisting">
################
# Hostname rules
################

# Allow messaging clients from company1.com and company1.co.uk to connect
ACL ALLOW all ACCESS VIRTUALHOST from_hostname=".*\.company1\.com,.*\.company1\.co\.uk"

# Deny messaging clients from hosts within the dev subdomain
ACL DENY-LOG all ACCESS VIRTUALHOST from_hostname=".*\.dev\.company1\.com"

##################
# IP address rules
##################

# Deny access to all users in the IP ranges 192.168.1.0-192.168.1.255 and 192.168.2.0-192.168.2.255,
# using the notation specified in RFC 4632, "Classless Inter-domain Routing (CIDR)"
ACL DENY-LOG messaging-users ACCESS VIRTUALHOST \
  from_network="192.168.1.0/24,192.168.2.0/24"

# Deny access to all users in the IP ranges 192.169.1.0-192.169.1.255 and 192.169.2.0-192.169.2.255,
# using wildcard notation.
ACL DENY-LOG messaging-users ACCESS VIRTUALHOST \
  from_network="192.169.1.*,192.169.2.*"

ACL DENY-LOG all all
      </pre></div></div></div><div class="section" title="10.5.&#160;SSL"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Security-SSL" />10.5.&#160;SSL</h2></div></div></div><p>
        This section will show how to use SSL to enable secure
        connections between an AMQP message client and the broker.
    </p><div class="section" title="10.5.1.&#160;Keystore Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="SSL-Keystore" />10.5.1.&#160;Keystore Configuration</h3></div></div></div><p>
            The broker configuration file (config.xml) needs to be updated to include the required SSL keystore
            configuration, an example of which can be found below.
        </p><div class="example"><a id="idp27653904" /><p class="title"><strong>Example&#160;10.6.&#160;Configuring an SSL Keystore</strong></p><div class="example-contents"><pre class="programlisting">
&lt;connector&gt;
  ...
  &lt;ssl&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
    &lt;port&gt;5671&lt;/port&gt;
    &lt;sslOnly&gt;false&lt;/sslOnly&gt;
    &lt;keyStorePath&gt;/path/to/keystore.ks&lt;/keyStorePath&gt;
    &lt;keyStorePassword&gt;keystorepass&lt;/keyStorePassword&gt;
    &lt;certAlias&gt;alias&lt;certAlias&gt;
  &lt;/ssl&gt;
  ...
&lt;connector&gt;</pre></div></div><br class="example-break" /><p>
            The certAlias element is an optional way of specifying which certificate the broker should use
            if the keystore contains multiple entries.
        </p><p>
            The sslOnly element controls whether the broker will <span class="bold"><strong>only</strong></span> bind
            the configured SSL port(s) or will also bind the non-SSL port(s). Setting sslOnly to true will
            disable the non-SSL ports.
        </p><div class="important" style="margin-left: 0.5in; margin-right: 0.5in;" title="Important"><h3 class="title">Important</h3><p>
                The password of the certificate used by the Broker <span class="bold"><strong>must</strong></span>
                match the password of the keystore itself. This is a restriction of the Qpid Broker
                implementation.  If using the <a class="ulink" href="http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html" target="_top">keytool</a> utility,
                note that this means the argument to the <code class="option">-keypass</code> option must match
                the <code class="option">-storepass</code> option.
            </p></div></div><div class="section" title="10.5.2.&#160;Truststore / Client Certificate Authentication"><div class="titlepage"><div><div><h3 class="title"><a id="SSL-Truststore-ClientCertificate" />10.5.2.&#160;Truststore / Client Certificate Authentication</h3></div></div></div><p>
            The SSL trustore and related Client Certificate Authentication behaviour can be configured with
            additional configuration as shown in the example below, in which the broker requires client
            certificate authentication.
        </p><div class="example"><a id="idp27663200" /><p class="title"><strong>Example&#160;10.7.&#160;Configuring an SSL Truststore and client auth</strong></p><div class="example-contents"><pre class="programlisting">
&lt;connector&gt;
  ...
  &lt;ssl&gt;
    ...
    &lt;trustStorePath&gt;/path/to/truststore.ks&lt;/trustStorePath&gt;
    &lt;trustStorePassword&gt;truststorepass&lt;/trustStorePassword&gt;
    &lt;needClientAuth&gt;true&lt;/needClientAuth&gt;
    &lt;wantClientAuth&gt;false&lt;/wantClientAuth&gt;
    ...
  &lt;/ssl&gt;
  ...
&lt;connector&gt;</pre></div></div><br class="example-break" /><p>
            The needClientAuth and wantClientAuth elements allow control of whether the client must present an
            SSL certificate. Only one of these elements is needed but both may be used at the same time.
            A socket's client authentication setting is one of three states: required (needClientAuth = true),
            requested (wantClientAuth = true), or none desired (both false, the default). If both elements are
            set to true, needClientAuth takes precedence.
        </p><p>
            When using Client Certificate Authentication it may be desirable to use the External Authentication
            Manager, for details see <a class="xref" href="#ExternalAuthManager" title="10.3.4.&#160;External (SSL Client Certificates)">Section&#160;10.3.4, &#8220;External (SSL Client Certificates)&#8221;</a>
        </p></div></div></div><div class="chapter" title="Chapter&#160;11.&#160;Runtime"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime" />Chapter&#160;11.&#160;Runtime</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Log-Files">11.1. Log Files</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Alerts">11.2. Alerts</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Disk-Space-Management">11.3. Disk Space Management</a></span></dt><dd><dl><dt><span class="section"><a href="#Qpid-Producer-Flow-Control">11.3.1. Producer Flow Control</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout">11.4. Producer Transaction Timeout</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-GeneralInformation">11.4.1. General Information</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Purpose">11.4.2. Purpose</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Scope">11.4.3. Scope</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Effect">11.4.4. Effect</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Producer-Transaction-Timeout-Configuration">11.4.5. Configuration</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages">11.5. Handing Undeliverable Messages</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Introduction">11.5.1. Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Maximum-Delivery-Count">11.5.2. Maximum Delivery Count</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Dead-Letter-Queues">11.5.3. Dead Letter Queues (DLQ)</a></span></dt><dt><span class="section"><a href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Configuration">11.5.4. Configuration</a></span></dt></dl></dd></dl></div><div class="section" title="11.1.&#160;Log Files"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime-Log-Files" />11.1.&#160;Log Files</h2></div></div></div></div><div class="section" title="11.2.&#160;Alerts"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime-Alerts" />11.2.&#160;Alerts</h2></div></div></div></div><div class="section" title="11.3.&#160;Disk Space Management"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime-Disk-Space-Management" />11.3.&#160;Disk Space Management</h2></div></div></div><div class="section" title="11.3.1.&#160;Producer Flow Control"><div class="titlepage"><div><div><h3 class="title"><a id="Qpid-Producer-Flow-Control" />11.3.1.&#160;Producer Flow Control</h3></div></div></div><div class="section" title="11.3.1.1.&#160;General Information"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Disk-Space-Management-Producer-Flow-Control-GeneralInformation" />11.3.1.1.&#160;General Information</h4></div></div></div><p>
            The Qpid 0.6 release introduced a simplistic producer-side flow control mechanism
            into the Java Messaging Broker, causing producers to be flow-controlled when they
            attempt to send messages to an overfull queue. Qpid 0.18 introduced a similar
            mechanism triggered by an overfull persistent message store on a virtual host.
        </p></div><div class="section" title="11.3.1.2.&#160;Server Configuration"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Disk-Space-Management-Producer-Flow-Control-ServerConfiguration" />11.3.1.2.&#160;Server Configuration</h4></div></div></div><div class="section" title="Configuring a Queue to use flow control"><div class="titlepage"><div><div><h5 class="title"><a id="idp27453456" />Configuring a Queue to use flow control</h5></div></div></div><p>
                Flow control is enabled on a producer when it sends a message to a Queue
                which is "overfull". The producer flow control will be rescinded when all
                Queues on which a producer is blocking become "underfull". A Queue is defined
                as overfull when the size (in bytes) of the messages on the queue exceeds the
                "capacity" of the Queue. A Queue becomes "underfull" when its size becomes
                less than the "flowResumeCapacity".


             </p><div class="example"><a id="idp27451472" /><p class="title"><strong>Example&#160;11.1.&#160;Configuring a queue depth limit</strong></p><div class="example-contents"><pre class="programlisting">
                
&lt;queue&gt;
    &lt;name&gt;test&lt;/name&gt;
    &lt;test&gt;
        &lt;exchange&gt;amq.direct&lt;/exchange&gt;
        &lt;capacity&gt;10485760&lt;/capacity&gt;                     &lt;!-- set the queue capacity to 10Mb --&gt;
        &lt;flowResumeCapacity&gt;8388608&lt;/flowResumeCapacity&gt;  &lt;!-- set the resume capacity to 8Mb --&gt;
    &lt;/test&gt;
&lt;/queue&gt;
                
                </pre></div></div><p><br class="example-break" />

                The default for all queues on a virtual host can also be set

             </p><div class="example"><a id="idp27438912" /><p class="title"><strong>Example&#160;11.2.&#160;Configuring a default queue depth limit on a virtualhost</strong></p><div class="example-contents"><pre class="programlisting">
                
&lt;virtualhosts&gt;
    &lt;virtualhost&gt;
        &lt;name&gt;localhost&lt;/name&gt;
        &lt;localhost&gt;
            &lt;capacity&gt;10485760&lt;/capacity&gt;                     &lt;!-- set the queue capacity to 10Mb --&gt;
            &lt;flowResumeCapacity&gt;8388608&lt;/flowResumeCapacity&gt;  &lt;!-- set the resume capacity to 8Mb --&gt;
        &lt;/localhost&gt;
    &lt;/virtualhost&gt;
&lt;/virtualhosts&gt;
                
                </pre></div></div><p><br class="example-break" />

                Where no flowResumeCapacity is set, the flowResumeCapacity is set to be equal
                to the capacity. Where no capacity is set, capacity is defaulted to 0 meaning
                there is no capacity limit.
            </p><div class="section" title="Broker Log Messages"><div class="titlepage"><div><div><h6 class="title"><a id="idp27350736" />Broker Log Messages</h6></div></div></div><p>
                    There are four new Broker log messages that may occur if flow control through queue capacity limits is enabled.
                    Firstly, when a capacity limited queue becomes overfull, a log message similar to the following is produced
                </p><pre class="programlisting">
MESSAGE [vh(/test)/qu(MyQueue)] [vh(/test)/qu(MyQueue)] QUE-1003 : Overfull : Size : 1,200 bytes, Capacity : 1,000
                </pre><p>Then for each channel which becomes blocked upon the overful queue a log message similar to the following is produced:</p><pre class="programlisting">
MESSAGE [con:2(guest@anonymous(713889609)/test)/ch:1] [con:2(guest@anonymous(713889609)/test)/ch:1] CHN-1005 : Flow Control Enforced (Queue MyQueue)
                </pre><p>When enough messages have been consumed from the queue that it becomes underfull, then the following log is generated: </p><pre class="programlisting">
MESSAGE [vh(/test)/qu(MyQueue)] [vh(/test)/qu(MyQueue)] QUE-1004 : Underfull : Size : 600 bytes, Resume Capacity : 800
                </pre><p>And for every channel which becomes unblocked you will see a message similar to: </p><pre class="programlisting">
MESSAGE [con:2(guest@anonymous(713889609)/test)/ch:1] [con:2(guest@anonymous(713889609)/test)/ch:1] CHN-1006 : Flow Control Removed
                </pre><p>Obviously the details of connection, virtual host, queue, size, capacity, etc would depend on the configuration in use.</p></div></div><div class="section" title="Disk quota-based flow control"><div class="titlepage"><div><div><h5 class="title"><a id="idp27253744" />Disk quota-based flow control</h5></div></div></div><p>
                Since version 0.18 of Qpid Broker, flow control can be triggered when a
                configured disk quota is exceeded. This is supported by the BDB and Derby message stores.
            </p><p>
                This functionality blocks all producers on reaching the disk overflow limit. When consumers
                consume the messages, causing disk space usage to falls below the underflow limit, the
                producers are unblocked and continue working as normal.
            </p><p>
                Two limits can be configured:
            </p><p>
                overfull limit - the maximum space on disk (in bytes) which can be used by store.
            </p><p>
                underfull limit - when the space on disk drops below this limit, producers are allowed to resume publishing.
            </p><p>
                An example of quota configuration for the BDB message store is provided below.
            </p><div class="example"><a id="idp27254928" /><p class="title"><strong>Example&#160;11.3.&#160;Configuring a limit on a store</strong></p><div class="example-contents"><pre class="programlisting">
            
&lt;store&gt;
   &lt;class&gt;org.apache.qpid.server.store.berkeleydb.BDBMessageStore&lt;/class&gt;
   &lt;environment-path&gt;${work}/bdbstore/test&lt;/environment-path&gt;
   &lt;overfull-size&gt;50000000&lt;/overfull-size&gt;
   &lt;underfull-size&gt;45000000&lt;/underfull-size&gt;
&lt;/store&gt;
            
            </pre></div></div><br class="example-break" /><p>
                The disk quota functionality is based on "best effort" principle. This means the broker
                cannot guarantee that the disk space limit will not be exceeded. If several concurrent
                transactions are started before the limit is reached, which collectively cause the limit
                to be exceeded, the broker may allow all of them to be committed.
            </p><div class="section" title="Broker Log Messages for quota flow control"><div class="titlepage"><div><div><h6 class="title"><a id="idp27094256" />Broker Log Messages for quota flow control</h6></div></div></div><p>
                    There are 2 new broker log messages that may occur if flow control through disk quota limits is enabled.
                    When the virtual host is blocked due to exceeding of the disk quota limit the following message
                    appears in the broker log
                    </p><pre class="programlisting">
[vh(/test)/ms(BDBMessageStore)] MST-1008 : Store overfull, flow control will be enforced
                    </pre><p>
                    When virtual host is unblocked after cleaning the disk space the following message appears in the broker log
                    </p><pre class="programlisting">
[vh(/test)/ms(BDBMessageStore)] MST-1009 : Store overfull condition cleared
                    </pre><p>
                </p></div></div></div><div class="section" title="11.3.1.3.&#160;Client impact and configuration"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Disk-Space-Management-Producer-Flow-Control-ClientImpact" />11.3.1.3.&#160;Client impact and configuration</h4></div></div></div><p>
            If a producer sends to a queue which is overfull, the broker will respond by
            instructing the client not to send any more messages. The impact of this is
            that any future attempts to send will block until the broker rescinds the flow control order.
        </p><p>
            While blocking the client will periodically log the fact that it is blocked waiting on flow control.
        </p><pre class="programlisting">
WARN   Message send delayed by 5s due to broker enforced flow control
WARN   Message send delayed by 10s due to broker enforced flow control
        </pre><p>
            After a set period the send will timeout and throw a JMSException to the calling code.
        </p><p>
            If such a JMSException is thrown, the message will not be sent to the broker,
            however the underlying Session may still be active - in particular if the
            Session is transactional then the current transaction will not be automatically
            rolled back. Users may choose to either attempt to resend the message, or to
            roll back any transactional work and close the Session.
        </p><p>
            Both the timeout delay and the periodicity of the warning messages can be set
            using Java system properties.
        </p><p>
            The amount of time (in milliseconds) to wait before timing out
            is controlled by the property qpid.flow_control_wait_failure.
        </p><p>
            The frequency at which the log message informing that the producer is flow
            controlled is sent is controlled by the system property qpid.flow_control_wait_notify_period.
        </p><p>
            Adding the following to the command line to start the client would result in a timeout of one minute,
            with warning messages every ten seconds:
        </p><pre class="programlisting">
-Dqpid.flow_control_wait_failure=60000
-Dqpid.flow_control_wait_notify_period=10000
        </pre><div class="section" title="Older Clients"><div class="titlepage"><div><div><h5 class="title"><a id="idp27460528" />Older Clients</h5></div></div></div><p>
                The flow control feature was first added to the Java broker/client in the 0.6 release. If an older client connects to the broker then the flow control commands will be ignored by it and it will not be blocked. So to fully benefit from this feature both Client and Broker need to be at least version 0.6.
            </p></div></div></div></div><div class="section" title="11.4.&#160;Producer Transaction Timeout"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout" />11.4.&#160;Producer Transaction Timeout</h2></div></div></div><div class="section" title="11.4.1.&#160;General Information"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-GeneralInformation" />11.4.1.&#160;General Information</h3></div></div></div><p> The transaction timeout mechanism is used to control broker resources when clients
   producing messages using transactional sessions hang or otherwise become unresponsive, or simply
   begin a transaction and keep using it without ever calling <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#commit" target="_top">Session#commit()</a>.</p><p>Users can choose to configure an idleWarn or openWarn threshold, after which the identified
   transaction should be logged as a WARN level alert as well as (more importantly) an idleClose or
   openClose threshold after which the transaction and the connection it applies to will be
   closed.</p><p>This feature is particularly useful in environments where the owner of the broker does not
   have full control over the implementation of clients, such as in a shared services
   deployment.</p><p>The following section provide more details on this feature and its use.</p></div><div class="section" title="11.4.2.&#160;Purpose"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Purpose" />11.4.2.&#160;Purpose</h3></div></div></div><p> This feature has been introduced to address the scenario where an open transaction on the
   broker holds an open transaction on the persistent store. This can have undesirable consequences
   if the store does not time out or close long-running transactions, such as with <a class="link" href="#Java-Broker-Stores-BDB-Store" title="8.4.&#160;BDB Store">BDB</a>. This can can result in a rapid increase in
   disk usage size, bounded only by available space, due to growth of the transaction log. </p></div><div class="section" title="11.4.3.&#160;Scope"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Scope" />11.4.3.&#160;Scope</h3></div></div></div><p>Note that only <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/MessageProducer.html" target="_top">MessageProducer</a> clients will be affected by a transaction timeout, since store
   transaction lifespan on a consumer only spans the execution of the call to Session#commit() and
   there is no scope for a long-lived transaction to arise.</p><p>It is also important to note that the transaction timeout mechanism is purely a JMS
   transaction timeout, and unrelated to any other timeouts in the Qpid client library and will have
   no impact on any RDBMS your application may utilise.</p></div><div class="section" title="11.4.4.&#160;Effect"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Effect" />11.4.4.&#160;Effect</h3></div></div></div><p>Full details of configuration options are provided in the sections that follow. This section
   gives a brief overview of what the Transaction Timeout feature can do.</p><div class="section" title="11.4.4.1.&#160;Broker Logging and Connection Close"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Effect-Broker-Side" />11.4.4.1.&#160;Broker Logging and Connection Close</h4></div></div></div><p>When the openWarn or idleWarn specified threshold is exceeded, the broker will log a WARN
    level alert with details of the connection and channel on which the threshold has been exceeded,
    along with the age of the transaction.</p><p>When the openClose or idleClose specified threshold value is exceeded, the broker will
    throw an exception back to the client connection via the <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/ExceptionListener.html" target="_top">ExceptionListener</a>, log the
    action and then close the connection.</p><p>The example broker log output shown below is where the idleWarn threshold specified is
    lower than the idleClose threshold and the broker therefore logs the idle transaction 3 times
    before the close threshold is triggered and the connection closed out.</p><pre class="screen">CHN-1008 : Idle Transaction : 13,116 ms
CHN-1008 : Idle Transaction : 14,116 ms
CHN-1008 : Idle Transaction : 15,118 ms
CHN-1003 : Close
   </pre><p>The second example broker log output shown below illustrates the same mechanism operating
    on an open transaction.</p><pre class="screen">
CHN-1007 : Open Transaction : 12,406 ms
CHN-1007 : Open Transaction : 13,406 ms
CHN-1007 : Open Transaction : 14,406 ms
CHN-1003 : Close
   </pre></div><div class="section" title="11.4.4.2.&#160;Client Side Effect"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Effect-Client-Side" />11.4.4.2.&#160;Client Side Effect</h4></div></div></div><p>After a Close threshold has been exceeded, the trigger client will receive this exception
    on its <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/ExceptionListener.html" target="_top">exception
    listener</a>, prior to being disconnected:</p><code class="computeroutput">org.apache.qpid.AMQConnectionClosedException: Error: Idle transaction timed out
    [error code 506: resource error]</code><p>Any later attempt to use the connection will result in this exception being thrown:</p><pre class="screen">Producer: Caught an Exception: javax.jms.IllegalStateException: Object org.apache.qpid.client.AMQSession_0_8@129b0e1 has been closed
    javax.jms.IllegalStateException: Object org.apache.qpid.client.AMQSession_0_8@129b0e1 has been closed
    at org.apache.qpid.client.Closeable.checkNotClosed(Closeable.java:70)
    at org.apache.qpid.client.AMQSession.checkNotClosed(AMQSession.java:555)
    at org.apache.qpid.client.AMQSession.createBytesMessage(AMQSession.java:573)
   </pre><p>Thus clients must be able to handle this case successfully, reconnecting where required and
    registering an exception listener on all connections. This is critical, and must be communicated
    to client applications by any broker owner switching on transaction timeouts.</p></div></div><div class="section" title="11.4.5.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Configuration" />11.4.5.&#160;Configuration</h3></div></div></div><div class="section" title="11.4.5.1.&#160;Configuration"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Configuration-Overview" />11.4.5.1.&#160;Configuration</h4></div></div></div><p>Transaction timeouts are configurable separately on each defined virtual host, using the
    virtualhosts.xml file.</p><p>We would recommend that only warnings are configured at first, which should allow broker
    administrators to obtain an idea of the distribution of transaction lengths on their systems,
    and configure production settings appropriately for both warning and closure. Ideally
    establishing thresholds should be achieved in a representative UAT environment, with clients and
    broker running, prior to any production deployment.</p><p>It is impossible to give suggested values, due to the large variation in usage depending on
    the applications using a broker. However, clearly transactions should not span the expected
    lifetime of any client application as this would indicate a hung client.</p><p>When configuring warning and closure timeouts, it should be noted that these only apply to
    message producers that are connected to the broker, but that a timeout will cause the connection
    to be closed - this disconnecting all producers and consumers created on that connection.</p><p>This should not be an issue for environments using Mule or Spring, where connection
    factories can be configured appropriately to manage a single MessageProducer object per JMS
    Session and Connection. Clients that use the JMS API directly should be aware that sessions
    managing both consumers and producers, or multiple producers, will be affected by a single
    producer hanging or leaving a transaction idle or open, and closed, and must take appropriate
    action to handle that scenario.</p></div><div class="section" title="11.4.5.2.&#160;Virtualhosts.xml"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-Runtime-Producer-Transaction-Timeout-Configuration-Virtualhosts" />11.4.5.2.&#160;Virtualhosts.xml</h4></div></div></div><p> The JMS transaction timeouts are configured on each virtual host defined in the XML
    configuration files.</p><p> The default values for each of the parameters is 0, indicating that the particular check
    is disabled.</p><p> Any or all of the parameters can be set, using the desired value in milliseconds, and will
    be checked each time the housekeeping process runs, usually set to run every 30 seconds in
    standard configuration. The meaning of each property is as follows:</p><p>
    </p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>openWarn - the time a transaction can be open for (with activity occurring on it) after
       which a warning alert will be issued.</p></li><li class="listitem"><p>openClose - the time a transaction can be open for before the connection it is on is
       closed.</p></li><li class="listitem"><p>idleWarn - the time a transaction can be idle for (with no activity occurring on it)
       after which a warning alert will be issued.</p></li><li class="listitem"><p>idleClose - the time a transaction can be idle for before the connection it is on is
       closed.</p></li></ul></div><p>
   </p><p> The virtualhosts configuration is shown below, and must occur inside the
   //virtualhosts/virtualhost/name/ elements: </p><div class="example"><a id="idp27517856" /><p class="title"><strong>Example&#160;11.4.&#160;Configuring producer transaction timeout</strong></p><div class="example-contents"><pre class="programlisting">
&lt;transactionTimeout&gt;
    &lt;openWarn&gt;10000&lt;/openWarn&gt;
    &lt;openClose&gt;20000&lt;/openClose&gt;
    &lt;idleWarn&gt;5000&lt;/idleWarn&gt;
    &lt;idleClose&gt;15000&lt;/idleClose&gt;
&lt;/transactionTimeout&gt;
   </pre></div></div><br class="example-break" /></div></div></div><div class="section" title="11.5.&#160;Handing Undeliverable Messages"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Runtime-Handling-Undeliverable-Messages" />11.5.&#160;Handing Undeliverable Messages</h2></div></div></div><div class="section" title="11.5.1.&#160;Introduction"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Handling-Undeliverable-Messages-Introduction" />11.5.1.&#160;Introduction</h3></div></div></div><p> Messages that cannot be delivered successfully to a consumer (for instance, because the
   client is using a transacted session and rolls-back the transaction) can be made available on
   the queue again and then subsequently be redelivered, depending on the precise session
   acknowledgement mode and messaging model used by the application. This is normally desirable
   behaviour that contributes to the ability of a system to withstand unexpected errors. However, it
   leaves open the possibility for a message to be repeatedly redelivered (potentially indefinitely),
   consuming system resources and preventing the delivery of other messages. Such undeliverable
   messages are sometimes known as poison messages.</p><p>For an example, consider a stock ticker application that has been designed to consume prices
   contained within JMS TextMessages. What if inadvertently a BytesMessage is placed onto the queue?
   As the ticker application does not expect the BytesMessage, its processing might fail and cause it
   to roll-back the transaction, however the default behavior of the Broker would mean that the
   BytesMessage would be delivered over and over again, preventing the delivery of other legitimate
   messages, until an operator intervenes and removes the erroneous message from the queue. </p><p>Qpid has maximum delivery count and dead-letter queue (DLQ) features which can be used in
   concert to construct a system that automatically handles such a condition. These features are
   described in the following sections.</p></div><div class="section" title="11.5.2.&#160;Maximum Delivery Count"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Handling-Undeliverable-Messages-Maximum-Delivery-Count" />11.5.2.&#160;Maximum Delivery Count</h3></div></div></div><p> Maximum delivery count is a property of a queue. If a consumer application is unable to
   process a message more than the specified number of times, then the broker will either route the
   message to a dead-letter queue (if one has been defined), or will discard the message. </p><p> In order for a maximum delivery count to be enforced, the consuming client
    <span class="emphasis"><em>must</em></span> call <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#rollback()" target="_top">Session#rollback()</a> (or <a class="ulink" href="http://docs.oracle.com/javaee/6/api/javax/jms/Session.html#recover()" target="_top">Session#recover()</a> if the session is not transacted). It is during the Broker's
   processing of Session#rollback() (or Session#recover()) that if a message has been seen
   at least the maximum number of times then it will move the message to the DLQ or discard the
   message.</p><p>If the consuming client fails in another manner, for instance, closes the connection, the
   message will not be re-routed and consumer application will see the same poison message again
   once it reconnects.</p><p> If the consuming application is using AMQP 0-9-1, 0-9, or 0-8 protocols, it is necessary to
   set the client system property <code class="varname">qpid.reject.behaviour</code> or connection or binding
   URL option <code class="varname">rejectbehaviour</code> to the value <code class="literal">system</code>.</p><p>It is possible to determine the number of times a message has been sent to a consumer via
   the Management interfaces, but is not possible to determine this information from a message client.
   Specifically, the optional JMS message header <span class="property">JMSXDeliveryCount</span> is not
   supported.</p><p>Maximum Delivery Count can be enabled via management (see <a class="xref" href="#Java-Broker-Configuring-And-Managing" title="Chapter&#160;9.&#160;Configuring And Managing">Chapter&#160;9, <em>Configuring And Managing</em></a>) using the the queue declare property
    <span class="property">x-qpid-maximum-delivery-count</span> or via <a class="link" href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Configuration" title="11.5.4.&#160;Configuration">configuration</a>
   as illustrated below.</p></div><div class="section" title="11.5.3.&#160;Dead Letter Queues (DLQ)"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Handling-Undeliverable-Messages-Dead-Letter-Queues" />11.5.3.&#160;Dead Letter Queues (DLQ)</h3></div></div></div><p>A Dead Letter Queue (DLQ) acts as an destination for messages that have somehow exceeded the
   normal bounds of processing and is utilised to prevent disruption to flow of other messages. When
   a DLQ is enabled for a given queue if a consuming client indicates it no longer wishes the
   receive the message (typically by exceeding a Maximum Delivery Count) then the message is moved
   onto the DLQ and removed from the original queue. </p><p>The DLQ feature causes generation of a Dead Letter Exchange and a Dead Letter Queue. These
   are named convention QueueName<span class="emphasis"><em>_DLE</em></span> and QueueName<span class="emphasis"><em>_DLQ</em></span>.</p><p>DLQs can be enabled via management (see <a class="xref" href="#Java-Broker-Configuring-And-Managing" title="Chapter&#160;9.&#160;Configuring And Managing">Chapter&#160;9, <em>Configuring And Managing</em></a>) using the queue declare property <span class="property">x-qpid-dlq-enabled</span> or via <a class="link" href="#Java-Broker-Runtime-Handling-Undeliverable-Messages-Configuration" title="11.5.4.&#160;Configuration">configuration</a>
   as illustrated below.</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;" title="Avoid excessive queue depth"><h3 class="title">Avoid excessive queue depth</h3><p>Applications making use of DLQs <span class="emphasis"><em>should</em></span> make provision for the frequent
    examination of messages arriving on DLQs so that both corrective actions can be taken to resolve
    the underlying cause and organise for their timely removal from the DLQ. Messages on DLQs
    consume system resources in the same manner as messages on normal queues so excessive queue
    depths should not be permitted to develop.</p></div></div><div class="section" title="11.5.4.&#160;Configuration"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Runtime-Handling-Undeliverable-Messages-Configuration" />11.5.4.&#160;Configuration</h3></div></div></div><p>In the below configuration it can be seen that DLQs/Maximum Delivery Count are enabled at
   the broker level with maximum delivery count set to 5, disabled at the virtualhost level for the
   'dev-only' virtualhost, and enabled specifically for the 'dev-only-main-queue' with maximum
   delivery count overridden to 5. </p><p>As 'dev-only-main-queue' has its own configuration specified, this value overrides all
   others and causes the features to be enabled for this queue. In contrast to this,
   'dev-only-other-queue' does not specify its own value and picks up the false value specified for
   its parent virtualhost, causing the DLQ/Maximum Delivery Count features to be disabled for this
   queue. Any such queue in the 'dev-only' virtualhost which does not specify its own configuration
   value will have the DLQ/Maximum Delivery Count feature disabled.</p><p>The queue 'localhost-queue' has the DLQ/Maximum Delivery Count features enabled, as neither
   the queue itself or the 'localhost' virtualhost specifies a configuration value and so the broker
   level value of true is used. Any such queue in the 'localhost' virtualhost which does not specify
   its own configuration value will have the features enabled.</p><div class="example"><a id="idp27685904" /><p class="title"><strong>Example&#160;11.5.&#160;Enabling DLQs and maximum delivery count at broker level within config.xml</strong></p><div class="example-contents"><pre class="programlisting">&lt;broker&gt;
 ...
 &lt;deadLetterQueues&gt;true&lt;/deadLetterQueues&gt;
 &lt;maximumDeliveryCount&gt;5&lt;/maximumDeliveryCount&gt;
 ...
&lt;/broker&gt;</pre></div></div><br class="example-break" /><div class="example"><a id="idp27687408" /><p class="title"><strong>Example&#160;11.6.&#160;Enabling DLQs and maximum delivery count at virtualhost and queue level within
    virtualhosts.xml</strong></p><div class="example-contents"><pre class="programlisting">&lt;virtualhosts&gt;
 ...
 &lt;virtualhost&gt;
  &lt;name&gt;dev-only&lt;/name&gt;
  &lt;dev-only&gt;
   &lt;queues&gt;
    &lt;deadLetterQueues&gt;false&lt;/deadLetterQueues&gt;
    &lt;maximumDeliveryCount&gt;0&lt;/maximumDeliveryCount&gt;
    &lt;queue&gt;
     &lt;name&gt;dev-only-main-queue&lt;/name&gt;
     &lt;dev-only-main-queue&gt;
      &lt;deadLetterQueues&gt;true&lt;/deadLetterQueues&gt;
      &lt;maximumDeliveryCount&gt;3&lt;/maximumDeliveryCount&gt;
     &lt;/dev-only-main-queue&gt;
    &lt;/queue&gt;
    &lt;queue&gt;
     &lt;name&gt;dev-only-other-queue&lt;/name&gt;
    &lt;/queue&gt;
   &lt;/queues&gt;
  &lt;/dev-only&gt;
 &lt;/virtualhost&gt;
 &lt;virtualhost&gt;
  &lt;name&gt;localhost&lt;/name&gt;
  &lt;localhost&gt;
   &lt;queues&gt;
    &lt;queue&gt;
     &lt;name&gt;localhost-queue&lt;/name&gt;
    &lt;/queue&gt;
   &lt;/queues&gt;
  &lt;/localhost&gt;
 &lt;/virtualhost&gt;
 ...
&lt;/virtualhosts&gt;
   </pre></div></div><br class="example-break" /></div></div></div><div class="chapter" title="Chapter&#160;12.&#160;High Availability"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability" />Chapter&#160;12.&#160;High Availability</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-GeneralIntroduction">12.1. General Introduction</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-OfferingsOfJavaBroker">12.2. HA offerings of the Java Broker</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-TwoNodeCluster">12.3. Two Node Cluster</a></span></dt><dd><dl><dt><span class="section"><a href="#idp27427024">12.3.1. Overview</a></span></dt><dt><span class="section"><a href="#idp27229472">12.3.2. Depictions of cluster operation</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-MultiNodeCluster">12.4. Multi Node Cluster</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Configuration">12.5. Configuring a Virtual Host to be a node</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-Configuration_BDBEnvVars">12.5.1. Passing BDB environment and replication configuration options</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee">12.6. Durability Guarantees</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_BDBControls">12.6.1. BDB Durability Controls</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync">12.6.2. Coalescing-sync</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_Default">12.6.3. Default</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DurabilityGuarantee_Examples">12.6.4. Examples</a></span></dt></dl></dd><dt><span class="section"><a href="#Java-Broker-High-Availability-ClientFailover">12.7. Client failover configuration</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-JMXAPI">12.8. Qpid JMX API for HA</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Monitoring-cluster">12.9. Monitoring cluster</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DiskSpace">12.10. Disk space requirements</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Network-Requirements">12.11. Network Requirements</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Security">12.12. Security</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Backup">12.13. Backups</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-MigrationFromNonHA">12.14. Migration of a non-HA store to HA</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-DisasterRecovery">12.15. Disaster Recovery</a></span></dt><dt><span class="section"><a href="#Java-Broker-High-Availability-Performance">12.16. Performance</a></span></dt></dl></div><div class="section" title="12.1.&#160;General Introduction"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-GeneralIntroduction" />12.1.&#160;General Introduction</h2></div></div></div><p>The term High Availability (HA) usually refers to having a number of instances of a service such as a Message Broker
      available so that should a service unexpectedly fail, or requires to be shutdown for maintenance, users may quickly connect
      to another instance and continue their work with minimal interuption. HA is one way to make a overall system more resilient
      by eliminating a single point of failure from a system.</p><p>HA offerings are usually categorised as <span class="bold"><strong>Active/Active</strong></span> or <span class="bold"><strong>Active/Passive</strong></span>.
      An Active/Active system is one where all nodes within the cluster are usuaully available for use by clients all of the time.  In an
      Active/Passive system, one only node within the cluster is available for use by clients at any one time, whilst the others are in
      some kind of standby state, awaiting to quickly step-in in the event the active node becomes unavailable.
    </p></div><div class="section" title="12.2.&#160;HA offerings of the Java Broker"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-OfferingsOfJavaBroker" />12.2.&#160;HA offerings of the Java Broker</h2></div></div></div><p>The Java Broker's HA offering became available at release <span class="bold"><strong>0.18</strong></span>.  HA is provided by way of the HA
      features built into the <a class="ulink" href="http://www.oracle.com/technetwork/products/berkeleydb/overview/index-093405.html" target="_top">Java Edition of the Berkley Database (BDB JE)</a> and as such
      is currently only available to Java Broker users who use the optional BDB JE based persistence store. This
      <span class="bold"><strong>optional</strong></span> store requires the use of BDB JE which is licensed under the Sleepycat Licence, which is
      not compatible with the Apache Licence and thus BDB JE is not distributed with Qpid. Users who elect to use this optional store for
      the broker have to provide this dependency.</p><p>HA in the Java Broker provides an <span class="bold"><strong>Active/Passive</strong></span> mode of operation with Virtual hosts being
      the unit of replication.  The Active node (referred to as the <span class="bold"><strong>Master</strong></span>) accepts all work from all the clients.
       The Passive nodes (referred to as <span class="bold"><strong>Replicas</strong></span>) are unavailable for work: the only task they must perform is
       to remain in synch with the Master node by consuming a replication stream containing all data and state.</p><p>If the Master node fails, a Replica node is elected to become the new Master node.  All clients automatically failover
      <sup>[<a class="footnote" href="#ftn.idp27445392" id="idp27445392">5</a>]</sup> to the new Master and continue their work.</p><p>The Java Broker HA solution is incompatible with the HA solution offered by the CPP Broker.  It is not possible to co-locate Java and CPP
       Brokers within the same cluster.</p><p>HA is not currently available for those using the the <span class="bold"><strong>Derby Store</strong></span> or <span class="bold"><strong>Memory
      Message Store</strong></span>.</p><div class="footnotes"><br /><hr align="left" width="100" /><div class="footnote"><p><sup>[<a class="para" href="#idp27445392" id="ftn.idp27445392">5</a>] </sup>The automatic failover feature is available only for AMQP connections from the Java client.  Management connections (JMX)
        do not current offer this feature.</p></div></div></div><div class="section" title="12.3.&#160;Two Node Cluster"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-TwoNodeCluster" />12.3.&#160;Two Node Cluster</h2></div></div></div><div class="section" title="12.3.1.&#160;Overview"><div class="titlepage"><div><div><h3 class="title"><a id="idp27427024" />12.3.1.&#160;Overview</h3></div></div></div><p>In this HA solution, a cluster is formed with two nodes. one node serves as
        <span class="bold"><strong>master</strong></span> and the other is a <span class="bold"><strong>replica</strong></span>.
      </p><p>All data and state required for the operation of the virtual host is automatically sent from the
        master to the replica. This is called the replication stream. The master virtual host confirms each
        message is on the replica before the client transaction completes. The exact way the client awaits
        for the master and replica is gorverned by the <a class="link" href="#Java-Broker-High-Availability-DurabilityGuarantee" title="12.6.&#160;Durability Guarantees">durability</a>
        configuration, which is discussed later. In this way, the replica remains ready to take over the
        role of the master if the master becomes unavailable.
      </p><p>It is important to note that there is an inherent limitation of two node clusters is that
        the replica node cannot make itself master automatically in the event of master failure.  This
        is because the replica has no way to distinguish between a network partition (with potentially
        the master still alive on the other side of the partition) and the case of genuine master failure.
        (If the replica were to elect itself as master, the cluster would run the risk of a
        <a class="ulink" href="http://en.wikipedia.org/wiki/Split-brain_(computing)" target="_top">split-brain</a> scenario).
        In the event of a master failure, a third party must designate the replica as primary.  This process
        is described in more detail later.
      </p><p>Clients connect to the cluster using a <a class="link" href="#Java-Broker-High-Availability-ClientFailover" title="12.7.&#160;Client failover configuration">failover url</a>.
        This allows the client to maintain a connection to the master in a way that is transparent
        to the client application.</p></div><div class="section" title="12.3.2.&#160;Depictions of cluster operation"><div class="titlepage"><div><div><h3 class="title"><a id="idp27229472" />12.3.2.&#160;Depictions of cluster operation</h3></div></div></div><p>In this section, the operation of the cluster is depicted through a series of figures
        supported by explanatory text.</p><div class="figure"><a id="idp27231056" /><p class="title"><strong>Figure&#160;12.1.&#160;Key for figures</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Key to figures" src="images/HA-2N-Key.png" /></div></div></div><br class="figure-break" /><div class="section" title="12.3.2.1.&#160;Normal Operation"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-High-Availability-TwoNodeNormalOperation" />12.3.2.1.&#160;Normal Operation</h4></div></div></div><p>The figure below illustrates normal operation.  Clients connecting to the cluster by way
	  of the failover URL achieve a connection to the master. As clients perform work (message
	  production, consumption, queue creation etc), the master additionally sends this data to the
	  replica over the network.</p><div class="figure"><a id="idp27236896" /><p class="title"><strong>Figure&#160;12.2.&#160;Normal operation of a two-node cluster</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Normal operation" src="images/HA-2N-Normal.png" /></div></div></div><br class="figure-break" /></div><div class="section" title="12.3.2.2.&#160;Master Failure and Recovery"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-High-Availability-TwoNodeMasterFailure" />12.3.2.2.&#160;Master Failure and Recovery</h4></div></div></div><p>The figure below illustrates a sequence of events whereby the master suffers a failure
	  and the replica is made the master to allow the clients to continue to work. Later the
	  old master is repaired and comes back on-line in replica role.</p><p>The item numbers in this list apply to the numbered boxes in the figure below.</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>System operating normally</p></li><li class="listitem"><p>Master suffers a failure and disconnects all clients. Replica realises that it is no
	      longer in contact with master. Clients begin to try to reconnect to the cluster, although these
	      connection attempts will fail at this point.</p></li><li class="listitem"><p>A third-party (an operator, a script or a combination of the two) verifies that the master has truely
           failed <span class="bold"><strong>and is no longer running</strong></span>. If it has truely failed, the decision is made
           to designate the replica as primary, allowing it to assume the role of master despite the other node being down.
           This primary designation is performed using <a class="link" href="#Java-Broker-High-Availability-JMXAPI" title="12.8.&#160;Qpid JMX API for HA">JMX</a>.</p></li><li class="listitem"><p>Client connections to the new master succeed and the <span class="bold"><strong>service is restored
	      </strong></span>, albeit without a replica.</p></li><li class="listitem"><p>The old master is repaired and brought back on-line.  It automatically rejoins the cluster
	       in the <span class="bold"><strong>replica</strong></span> role.</p></li></ol></div><div class="figure"><a id="idp27968720" /><p class="title"><strong>Figure&#160;12.3.&#160;Failure of master and recovery sequence</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Failure of master and subsequent recovery sequence" src="images/HA-2N-MasterFail.png" /></div></div></div><br class="figure-break" /></div><div class="section" title="12.3.2.3.&#160;Replica Failure and Recovery"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-High-Availability-TwoNodeReplicaFailure" />12.3.2.3.&#160;Replica Failure and Recovery</h4></div></div></div><p>The figure that follows illustrates a sequence of events whereby the replica suffers a failure
	   leaving the master to continue processing alone.  Later the replica is repaired and is restarted.
	   It rejoins the cluster so that it is once again ready to take over in the event of master failure.</p><p>The behavior of the replica failure case is governed by the <code class="varname">designatedPrimary</code>
        configuration item. If set true on the master, the master will continue to operate solo without outside
        intervention when the replica fails. If false, a third-party must designate the master as primary in order
        for it to continue solo.</p><p>The item numbers in this list apply to the numbered boxes in the figure below. This example assumes
	   that <code class="varname">designatedPrimary</code> is true on the original master node.</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>System operating normally</p></li><li class="listitem"><p>Replica suffers a failure. Master realises that replica longer in contact but as
	      <code class="varname">designatedPrimary</code> is true, master continues processing solo and thus client
	      connections are uninterrupted by the loss of the replica. System continues operating normally, albeit
          with a single node.</p></li><li class="listitem"><p>Replica is repaired.</p></li><li class="listitem"><p>After catching up with missed work, replica is once again ready to take over in the event of master failure.</p></li></ol></div><div class="figure"><a id="idp27981840" /><p class="title"><strong>Figure&#160;12.4.&#160;Failure of replica and subsequent recovery sequence</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Failure of replica and subsequent recovery sequence" src="images/HA-2N-ReplicaFail.png" /></div></div></div><br class="figure-break" /></div><div class="section" title="12.3.2.4.&#160;Network Partition and Recovery"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-High-Availability-TwoNodeNetworkPartition" />12.3.2.4.&#160;Network Partition and Recovery</h4></div></div></div><p>The figure below illustrates the sequence of events that would occur if the network between
	  master and replica were to suffer a partition, and the nodes were out of contact with one and other.</p><p>As with <a class="link" href="#Java-Broker-High-Availability-TwoNodeReplicaFailure" title="12.3.2.3.&#160;Replica Failure and Recovery">Replica Failure and Recovery</a>, the
	  behaviour is governed by the <code class="varname">designatedPrimary</code>.
	  Only if <code class="varname">designatedPrimary</code> is true on the master, will the master continue solo.</p><p>The item numbers in this list apply to the numbered boxes in the figure below. This example assumes
	   that <code class="varname">designatedPrimary</code> is true on the original master node.</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>System operating normally</p></li><li class="listitem"><p>Network suffers a failure. Master realises that replica longer in contact but as
	      <code class="varname">designatedPrimary</code> is true, master continues processing solo and thus client
	      connections are uninterrupted by the network partition between master and replica.</p></li><li class="listitem"><p>Network is repaired.</p></li><li class="listitem"><p>After catching up with missed work, replica is once again ready to take over in the event of master failure.
	    System operating normally again.</p></li></ol></div><div class="figure"><a id="idp27995824" /><p class="title"><strong>Figure&#160;12.5.&#160;Partition of the network separating master and replica</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Network Partition and Recovery" src="images/HA-2N-NetworkPartition.png" /></div></div></div><br class="figure-break" /></div><div class="section" title="12.3.2.5.&#160;Split Brain"><div class="titlepage"><div><div><h4 class="title"><a id="Java-Broker-High-Availability-TwoNodeSplitBrain" />12.3.2.5.&#160;Split Brain</h4></div></div></div><p>A <a class="ulink" href="http://en.wikipedia.org/wiki/Split-brain_(computing)" target="_top">split-brain</a>
          is a situation where the two node cluster has two masters. BDB normally strives to prevent
	  this situation arising by preventing two nodes in a cluster being master at the same time.
	  However, if the network suffers a partition, and the third-party intervenes incorrectly
	  and makes the replica a second master a split-brain will be formed and both masters will
	  proceed to perform work  <span class="bold"><strong>independently</strong></span> of one and other.</p><p>There is no automatic recovery from a split-brain.</p><p>Manual intervention will be required to choose which store will be retained as master
	  and which will be discarded.  Manual intervention will be required to identify and repeat the
          lost business transactions.</p><p>The item numbers in this list apply to the numbered boxes in the figure below.</p><div class="orderedlist"><ol class="orderedlist" type="1"><li class="listitem"><p>System operating normally</p></li><li class="listitem"><p>Network suffers a failure. Master realises that replica longer in contact but as
	      <code class="varname">designatedPrimary</code> is true, master continues processing solo.  Client
	      connections are uninterrupted by the network partition.</p><p>A third-party <span class="bold"><strong>erroneously</strong></span> designates the replica as primary while the
            original master continues running (now solo).</p></li><li class="listitem"><p>As the nodes cannot see one and other, both behave as masters. Clients may perform work against
	      both master nodes.</p></li></ol></div><div class="figure"><a id="idp28010240" /><p class="title"><strong>Figure&#160;12.6.&#160;Split Brain</strong></p><div class="figure-contents"><div class="mediaobject"><img alt="Split Brain" src="images/HA-2N-SplitBrain.png" /></div></div></div><br class="figure-break" /></div></div></div><div class="section" title="12.4.&#160;Multi Node Cluster"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-MultiNodeCluster" />12.4.&#160;Multi Node Cluster</h2></div></div></div><p>Multi node clusters, that is clusters where the number of nodes is three or more, are not yet
         ready for use.</p></div><div class="section" title="12.5.&#160;Configuring a Virtual Host to be a node"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Configuration" />12.5.&#160;Configuring a Virtual Host to be a node</h2></div></div></div><p>To configure a virtualhost as a cluster node, configure the virtualhost.xml in the following manner:</p><p>

    </p><div class="example"><a id="idp28018688" /><p class="title"><strong>Example&#160;12.1.&#160;Configuring a VirtualHost to use the BDBHAMessageStore</strong></p><div class="example-contents"><pre class="programlisting">
&lt;virtualhost&gt;
  &lt;name&gt;myhost&lt;/name&gt;
  &lt;myvhost&gt;
    &lt;store&gt;
      &lt;class&gt;org.apache.qpid.server.store.berkeleydb.BDBHAMessageStore&lt;/class&gt;
      &lt;environment-path&gt;${work}/bdbhastore&lt;/environment-path&gt;
      &lt;highAvailability&gt;
        &lt;groupName&gt;myclustername&lt;/groupName&gt;
        &lt;nodeName&gt;mynode1&lt;/nodeName&gt;
        &lt;nodeHostPort&gt;node1host:port&lt;/nodeHostPort&gt;
        &lt;helperHostPort&gt;node1host:port&lt;/helperHostPort&gt;
        &lt;durability&gt;NO_SYNC\,NO_SYNC\,SIMPLE_MAJORITY&lt;/durability&gt;
        &lt;coalescingSync&gt;true|false&lt;/coalescingSync&gt;
        &lt;designatedPrimary&gt;true|false&lt;/designatedPrimary&gt;
      &lt;/highAvailability&gt;
    &lt;/store&gt;
    ...
 &lt;/myvhost&gt;
&lt;/virtualhost&gt;</pre></div></div><p><br class="example-break" />
    </p><p>The <code class="varname">groupName</code> is the name of logical name of the cluster.  All nodes within the
      cluster must use the same <code class="varname">groupName</code> in order to be considered part of the cluster.</p><p>The <code class="varname">nodeName</code> is the logical name of the node.  All nodes within the cluster must have a
      unique name.  It is recommended that the node name should be chosen from a different nomenclature from that of
      the servers on which they are hosted, in case the need arises to move node to a new server in the future.</p><p>The <code class="varname">nodeHostPort</code> is the hostname and port number used by this node to communicate with the
      the other nodes in the cluster. For the hostname, an IP address, hostname or fully qualified hostname may be used.
      For the port number, any free port can be used.  It is important that this address is stable over time, as BDB
      records and uses this address internally.</p><p>The <code class="varname">helperHostPort</code> is the hostname and port number that new nodes use to discover other
      nodes within the cluster when they are newly introduced to the cluster.  When configuring the first node, set the
      <code class="varname">helperHostPort</code> to its own <code class="varname">nodeHostPort</code>.  For the second and subsequent nodes,
      set their <code class="varname">helperHostPort</code> to that of the first node.</p><p><code class="varname">durability</code> controls the <a class="link" href="#Java-Broker-High-Availability-DurabilityGuarantee" title="12.6.&#160;Durability Guarantees">durability</a>
      guarantees made by the cluster. It is important that all nodes use the same value for this property. The default value is
      NO_SYNC\,NO_SYNC\,SIMPLE_MAJORITY. Owing to the internal use of Apache Commons Config, it is currently necessary
      to escape the commas within the durability string.</p><p><code class="varname">coalescingSync</code> controls the <a class="link" href="#Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync" title="12.6.2.&#160;Coalescing-sync">coalescing-sync</a>
      mode of Qpid. It is important that all nodes use the same value. If omitted, it defaults to true.</p><p>The <code class="varname">designatedPrimary</code> is applicable only to the <a class="link" href="#Java-Broker-High-Availability-TwoNodeCluster" title="12.3.&#160;Two Node Cluster">two-node
     case.</a>  It governs the behaviour of a node when the other node fails or becomes uncontactable.  If true,
     the node will be designated as primary at startup and will be able to continue operating as a single node master.
     If false, the node will transition to an unavailable state until a third-party manually designates the node as
     primary or the other node is restored. It is suggested that the node that normally fulfils the role of master is
     set true in config file and the node that is normally replica is set false.  Be aware that setting both nodes to
     true will lead to a failure to start up, as both cannot be designated at the point of contact. Designating both
     nodes as primary at runtime (using the JMX interface) will lead to a <a class="link" href="#Java-Broker-High-Availability-TwoNodeSplitBrain" title="12.3.2.5.&#160;Split Brain">split-brain</a>
     in the case of network partition and must be avoided.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;" title="Note"><h3 class="title">Note</h3><p>Usage of domain names in  <code class="varname">helperHostPort</code> and <code class="varname">nodeHostPort</code> is more preferebale
     over IP addresses due to the tendency of more frequent changes of the last over the former.
     If server IP address changes but domain name remains the same the HA cluster can continue working as normal
     in case when domain names are used in cluster configuration. In case when IP addresses are used and they are changed with the time
     than Qpid <a class="link" href="#Java-Broker-High-Availability-JMXAPI" title="12.8.&#160;Qpid JMX API for HA">JMX API for HA</a> can be used to change the addresses or remove the nodes from the cluster.</p></div><div class="section" title="12.5.1.&#160;Passing BDB environment and replication configuration options"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-High-Availability-Configuration_BDBEnvVars" />12.5.1.&#160;Passing BDB environment and replication configuration options</h3></div></div></div><p>It is possible to pass BDB <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/EnvironmentConfig.html" target="_top">
         environment</a> and <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/rep/ReplicationConfig.html" target="_top">
         replication</a> configuration options from the virtualhost.xml. Environment configuration options are passed using
         the <code class="varname">envConfig</code> element, and replication config using <code class="varname">repConfig</code>.</p><p>For example, to override the BDB environment configuration options <code class="varname">je.cleaner.threads</code> and
        <code class="varname">je.txn.timeout</code></p><pre class="programlisting">
         ...
      &lt;/highAvailability&gt;
      &lt;envConfig&gt;
        &lt;name&gt;je.cleaner.threads&lt;/name&gt;
        &lt;value&gt;2&lt;/value&gt;
      &lt;/envConfig&gt;
      &lt;envConfig&gt;
        &lt;name&gt;je.txn.timeout&lt;/name&gt;
        &lt;value&gt;15 min&lt;/value&gt;
      &lt;/envConfig&gt;
      ...
    &lt;/store&gt;</pre><p>And to override the BDB replication configuration options <code class="varname">je.rep.electionsPrimaryRetries</code>.</p><pre class="programlisting">
         ...
      &lt;/highAvailability&gt;
      ...
      &lt;repConfig&gt;
        &lt;name&gt;je.rep.electionsPrimaryRetries&lt;/name&gt;
        &lt;value&gt;3&lt;/value&gt;
      &lt;/repConfig&gt;
      ...
    &lt;/store&gt;</pre></div></div><div class="section" title="12.6.&#160;Durability Guarantees"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-DurabilityGuarantee" />12.6.&#160;Durability Guarantees</h2></div></div></div><p>The term <a class="ulink" href="http://en.wikipedia.org/wiki/ACID#Durability" target="_top">durability</a> is used to mean that once a
      transaction is committed, it remains committed regardless of subsequent failures. A highly durable system is one where
      loss of a committed transaction is extermely unlikely, whereas with a less durable system loss of a transaction is likely
      in a greater number of scenarios.  Typically, the more highly durable a system the slower and more costly it will be.</p><p>Qpid exposes the all the
      <a class="ulink" href="http://oracle.com/cd/E17277_02/html/ReplicationGuide/txn-management.html#durabilitycontrols" target="_top">durability controls</a>
      offered by by BDB JE JA and a Qpid specific optimisation called <span class="bold"><strong>coalescing-sync</strong></span> which defaults
      to enabled.</p><div class="section" title="12.6.1.&#160;BDB Durability Controls"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-High-Availability-DurabilityGuarantee_BDBControls" />12.6.1.&#160;BDB Durability Controls</h3></div></div></div><p>BDB expresses durability as a triplet with the following form:</p><pre class="programlisting">&lt;master sync policy&gt;,&lt;replica sync policy&gt;,&lt;replica acknowledgement policy&gt;</pre><p>The sync polices controls whether the thread performing the committing thread awaits the successful completion of the
        write, or the write and sync before continuing. The master sync policy and replica sync policy need not be the same.</p><p>For master and replic sync policies, the available values are:
        <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.SyncPolicy.html#SYNC" target="_top">SYNC</a>,
        <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.SyncPolicy.html#WRITE_NO_SYNC" target="_top">WRITE_NO_SYNC</a>,
        <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.SyncPolicy.html#NO_SYNC" target="_top">NO_SYNC</a>. SYNC
        is offers the highest durability whereas NO_SYNC the lowest.</p><p>Note: the combination of a master sync policy of SYNC and <a class="link" href="#Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync" title="12.6.2.&#160;Coalescing-sync">coalescing-sync</a>
        true would result in poor performance with no corresponding increase in durability guarantee.  It cannot not be used.</p><p>The acknowledgement policy defines whether when a master commits a transaction, it also awaits for the replica(s) to
         commit the same transaction before continuing.  For the two-node case, ALL and SIMPLE_MAJORITY are equal.</p><p>For acknowledgement policy, the available value are:
         <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.ReplicaAckPolicy.html#ALL" target="_top">ALL</a>,
         <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.ReplicaAckPolicy.html#SIMPLE_MAJORITY" target="_top">SIMPLE_MAJORITY</a>
         <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/Durability.ReplicaAckPolicy.html#NONE" target="_top">NONE</a>.</p></div><div class="section" title="12.6.2.&#160;Coalescing-sync"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync" />12.6.2.&#160;Coalescing-sync</h3></div></div></div><p>If enabled (the default) Qpid works to reduce the number of separate
        <a class="ulink" href="http://oracle.com/javase/6/docs/api/java/io/FileDescriptor.html#sync()" target="_top">file-system sync</a> operations
        performed by the <span class="bold"><strong>master</strong></span> on the underlying storage device thus improving performance.  It does
        this coalescing separate sync operations arising from the different client commits operations occuring at approximately the same time.
        It does this in such a manner not to reduce the ACID guarantees of the system.</p><p>Coalescing-sync has no effect on the behaviour of the replicas.</p></div><div class="section" title="12.6.3.&#160;Default"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-High-Availability-DurabilityGuarantee_Default" />12.6.3.&#160;Default</h3></div></div></div><p>The default durability guarantee is <code class="constant">NO_SYNC, NO_SYNC, SIMPLE_MAJORITY</code> with coalescing-sync enabled. The effect
         of this combination is described in the table below. It offers a good compromise between durability guarantee and performance
         with writes being guaranteed on the master and the additional guarantee that a majority of replicas have received the
         transaction.</p></div><div class="section" title="12.6.4.&#160;Examples"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-High-Availability-DurabilityGuarantee_Examples" />12.6.4.&#160;Examples</h3></div></div></div><p>Here are some examples illustrating the effects of the durability and coalescing-sync settings.</p><p>
        </p><div class="table"><a id="idp28070736" /><p class="title"><strong>Table&#160;12.1.&#160;Effect of different durability guarantees</strong></p><div class="table-contents"><table border="1" summary="Effect of different durability guarantees"><colgroup><col /><col /><col /><col /></colgroup><thead><tr><th>&#160;</th><th>Durability</th><th>Coalescing-sync</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>NO_SYNC, NO_SYNC, SIMPLE_MAJORITY</td><td>true</td><td>Before the commit returns to the client, the transaction will be written/sync'd to the Master's disk (effect of
                   coalescing-sync) and a majority of the replica(s) will have acknowledged the <span class="bold"><strong>receipt</strong></span>
                   of the transaction.  The replicas will write and sync the transaction to their disk at a point in the future governed by
                   <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/rep/ReplicationMutableConfig.html#LOG_FLUSH_TASK_INTERVAL" target="_top">ReplicationMutableConfig#LOG_FLUSH_INTERVAL</a>.
                </td></tr><tr><td>2</td><td>NO_SYNC, WRITE_NO_SYNC, SIMPLE_MAJORITY</td><td>true</td><td>Before the commit returns to the client, the transaction will be written/sync'd to the Master's disk (effect of
                  coalescing-sync and a majority of the replica(s) will have acknowledged the <span class="bold"><strong>write</strong></span> of
                  the transaction to their disk.  The replicas will sync the transaction to disk at a point in the future with an upper bound governed by
                  ReplicationMutableConfig#LOG_FLUSH_INTERVAL.</td></tr><tr><td>3</td><td>NO_SYNC, NO_SYNC, NONE</td><td>false</td><td>After the commit returns to the client, the transaction is neither guaranteed to be written to the disk of the master
                   nor received by any of the replicas. The master and replicas will write and sync the transaction to their disk at a point
                   in the future with an upper bound governed by ReplicationMutableConfig#LOG_FLUSH_INTERVAL. This offers the weakest durability guarantee.</td></tr></tbody></table></div></div><p><br class="table-break" />
      </p></div></div><div class="section" title="12.7.&#160;Client failover configuration"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-ClientFailover" />12.7.&#160;Client failover configuration</h2></div></div></div><p>The details about format of Qpid connection URLs can be found at section
        <a class="ulink" href="../../Programming-In-Apache-Qpid/html/QpidJNDI.html" target="_top">Connection URLs</a>
        of book <a class="ulink" href="../../Programming-In-Apache-Qpid/html/" target="_top">Programming In Apache Qpid</a>.</p><p>The failover policy option in the connection URL for the HA Cluster should be set to <span class="emphasis"><em>roundrobin</em></span>.
      The Master broker should be put into a first place in <span class="emphasis"><em>brokerlist</em></span> URL option.
      The recommended value for <span class="emphasis"><em>connectdelay</em></span> option in broker URL should be set to
      the value greater than 1000 milliseconds. If it is desired that clients re-connect automatically after a
      master to replica failure, <code class="varname">cyclecount</code> should be tuned so that the retry period is longer than
      the expected length of time to perform the failover.</p><div class="example"><a id="idp28091744" /><p class="title"><strong>Example&#160;12.2.&#160;Example of connection URL for the HA Cluster</strong></p><div class="example-contents">
amqp://guest:guest@clientid/test?brokerlist='tcp://localhost:5672?connectdelay='2000'&amp;retries='3';tcp://localhost:5671?connectdelay='2000'&amp;retries='3';tcp://localhost:5673?connectdelay='2000'&amp;retries='3''&amp;failover='roundrobin?cyclecount='30''
        </div></div><br class="example-break" /></div><div class="section" title="12.8.&#160;Qpid JMX API for HA"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-JMXAPI" />12.8.&#160;Qpid JMX API for HA</h2></div></div></div><p>Qpid exposes the BDB HA store information via its JMX interface and provides APIs to remove a Node from
     the group, update a Node IP address, and assign a Node as the designated primary.</p><p>An instance of the <code class="classname">BDBHAMessageStore</code> MBean is instantiated by the broker for the each virtualhost using the HA store.</p><p>The reference to this MBean can be obtained via JMX API using an ObjectName like <span class="emphasis"><em>org.apache.qpid:type=BDBHAMessageStore,name="&lt;virtualhost name&gt;"</em></span>
                 where &lt;virtualhost name&gt; is the name of a specific virtualhost on the broker.</p><table border="1" id="idp28096880">Mbean BDBHAMessageStore attributes<thead><tr>
          <td>Name</td>
          <td>Type</td>
          <td>Accessibility</td>
          <td>Description</td>
        </tr></thead><tbody><tr>
          <td>GroupName</td>
          <td>String</td>
          <td>Read only</td>
          <td>Name identifying the group</td>
        </tr><tr>
          <td>NodeName</td>
          <td>String</td>
          <td>Read only</td>
          <td>Unique name identifying the node within the group</td>
        </tr><tr>
          <td>NodeHostPort</td>
          <td>String</td>
          <td>Read only</td>
          <td>Host/port used to replicate data between this node and others in the group</td>
        </tr><tr>
          <td>HelperHostPort</td>
          <td>String</td>
          <td>Read only</td>
          <td>Host/port used to allow a new node to discover other group members</td>
        </tr><tr>
          <td>NodeState</td>
          <td>String</td>
          <td>Read only</td>
          <td>Current state of the node</td>
        </tr><tr>
          <td>ReplicationPolicy</td>
          <td>String</td>
          <td>Read only</td>
          <td>Node replication durability</td>
        </tr><tr>
          <td>DesignatedPrimary</td>
          <td>boolean</td>
          <td>Read/Write</td>
          <td>Designated primary flag. Applicable to the two node case.</td>
        </tr><tr>
          <td>CoalescingSync</td>
          <td>boolean</td>
          <td>Read only</td>
          <td>Coalescing sync flag. Applicable to the master sync policies NO_SYNC and WRITE_NO_SYNC only.</td>
        </tr><tr>
          <td>getAllNodesInGroup</td>
          <td>TabularData</td>
          <td>Read only</td>
          <td>Get all nodes within the group, regardless of whether currently attached or not</td>
        </tr></tbody></table><table border="1" id="idp28122448">Mbean BDBHAMessageStore operations<thead><tr>
          <td>Operation</td>
          <td>Parameters</td>
          <td>Returns</td>
          <td>Description</td>
        </tr></thead><tbody><tr>
          <td>removeNodeFromGroup</td>
          <td>
            <p><span class="emphasis"><em>nodeName</em></span>, name of node, string</p>
          </td>
          <td>void</td>
          <td>Remove an existing node from the group</td>
        </tr><tr>
          <td>updateAddress</td>
          <td>
            <div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><span class="emphasis"><em>nodeName</em></span>, name of node, string</p></li><li class="listitem"><p><span class="emphasis"><em>newHostName</em></span>, new host name, string</p></li><li class="listitem"><p><span class="emphasis"><em>newPort</em></span>, new port number, int</p></li></ul></div>
          </td>
          <td>void</td>
          <td>Update the address of another node. The node must be in a STOPPED state.</td>
        </tr></tbody></table><div class="figure"><a id="idp28136496" /><p class="title"><strong>Figure&#160;12.7.&#160;BDBHAMessageStore view from jconsole.</strong></p><div class="figure-contents"><div><img alt="BDBHAMessageStore view from jconsole." src="images/HA-BDBHAMessageStore-MBean-jconsole.png" /></div></div></div><br class="figure-break" /><div class="example"><a id="idp28138000" /><p class="title"><strong>Example&#160;12.3.&#160;Example of java code to get the node state value</strong></p><div class="example-contents"><pre class="programlisting">
Map&lt;String, Object&gt; environment = new HashMap&lt;String, Object&gt;();

// credentials: user name and password
environment.put(JMXConnector.CREDENTIALS, new String[] {"admin","admin"});
JMXServiceURL url =  new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9001/jmxrmi");
JMXConnector jmxConnector = JMXConnectorFactory.connect(url, environment);
MBeanServerConnection mbsc =  jmxConnector.getMBeanServerConnection();

ObjectName queueObjectName = new ObjectName("org.apache.qpid:type=BDBHAMessageStore,name=\"test\"");
String state = (String)mbsc.getAttribute(queueObjectName, "NodeState");

System.out.println("Node state:" + state);
        </pre><p>Example system output:</p><pre class="screen">Node state:MASTER</pre></div></div><br class="example-break" /></div><div class="section" title="12.9.&#160;Monitoring cluster"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Monitoring-cluster" />12.9.&#160;Monitoring cluster</h2></div></div></div><p>In order to discover potential issues with HA Cluster early, all nodes in the Cluster should be monitored on regular basis
    using the following techniques:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Broker log files scrapping for WARN or ERROR entries and operational log entries like:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><span class="emphasis"><em>MST-1007 :</em></span> Store Passivated. It can indicate that Master virtual host has gone down.</p></li><li class="listitem"><p><span class="emphasis"><em>MST-1006 :</em></span> Recovery Complete. It can indicate that a former Replica virtual host is up and became the Master.</p></li></ul></div></li><li class="listitem"><p>Disk space usage and system load using system tools.</p></li><li class="listitem"><p>Berkeley HA node status using <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/rep/util/DbPing.html" target="_top"><code class="classname">DbPing</code></a> utility.</p><div class="example"><a id="idp28149776" /><p class="title"><strong>Example&#160;12.4.&#160;Using <code class="classname">DbPing</code> utility for monitoring HA nodes.</strong></p><div class="example-contents"><span class="command"><strong>
java -jar je-5.0.58.jar DbPing -groupName TestClusterGroup -nodeName Node-5001 -nodeHost localhost:5001 -socketTimeout 10000
</strong></span><pre class="screen">
Current state of node: Node-5001 from group: TestClusterGroup
  Current state: MASTER
  Current master: Node-5001
  Current JE version: 5.0.58
  Current log version: 8
  Current transaction end (abort or commit) VLSN: 165
  Current master transaction end (abort or commit) VLSN: 0
  Current active feeders on node: 0
  Current system load average: 0.35
</pre></div></div><br class="example-break" /><p>In the example above <code class="classname">DbPing</code> utility requested status of Cluster node with name
            <span class="emphasis"><em>Node-5001</em></span> from replication group <span class="emphasis"><em>TestClusterGroup</em></span> running on host <span class="emphasis"><em>localhost:5001</em></span>.
            The state of the node was reported into a system output.
            </p></li><li class="listitem"><p>Using Qpid broker JMX interfaces.</p><p>Mbean <code class="classname">BDBHAMessageStore</code> can be used to request the following node information:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p><span class="emphasis"><em>NodeState</em></span> indicates whether node is a Master or Replica.</p></li><li class="listitem"><p><span class="emphasis"><em>Durability</em></span> replication durability.</p></li><li class="listitem"><p><span class="emphasis"><em>DesignatedPrimary</em></span> indicates whether Master node is designated primary.</p></li><li class="listitem"><p><span class="emphasis"><em>GroupName</em></span> replication group name.</p></li><li class="listitem"><p><span class="emphasis"><em>NodeName</em></span> node name.</p></li><li class="listitem"><p><span class="emphasis"><em>NodeHostPort</em></span> node host and port.</p></li><li class="listitem"><p><span class="emphasis"><em>HelperHostPort</em></span> helper host and port.</p></li><li class="listitem"><p><span class="emphasis"><em>AllNodesInGroup</em></span> lists of all nodes in the replication group including their names, hosts and ports.</p></li></ul></div><p>For more details about <code class="classname">BDBHAMessageStore</code> MBean please refer section <a class="link" href="#Java-Broker-High-Availability-JMXAPI" title="12.8.&#160;Qpid JMX API for HA">Qpid JMX API for HA</a></p></li></ul></div></div><div class="section" title="12.10.&#160;Disk space requirements"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-DiskSpace" />12.10.&#160;Disk space requirements</h2></div></div></div><p>Disk space is a critical resource for the HA Qpid broker.</p><p>In case when a Replica goes down (or falls behind the Master in 2 node cluster where the Master is designated primary)
    and the Master continues running, the non-replicated store files are kept on the Masters disk for the period of time
    as specified in <span class="emphasis"><em>je.rep.repStreamTimeout</em></span> JE setting in order to replicate this data later
    when the Replica is back. This setting is set to 1 hour by default by the broker. The setting can be overridden as described in
    <a class="xref" href="#Java-Broker-High-Availability-Configuration_BDBEnvVars" title="12.5.1.&#160;Passing BDB environment and replication configuration options">Section&#160;12.5.1, &#8220;Passing BDB environment and replication configuration options&#8221;</a>.</p><p>Depending from the application publishing/consuming rates and message sizes,
    the disk space might become overfull during this period of time due to preserved logs.
    Please, make sure to allocate enough space on your disk to avoid this from happening.
    </p></div><div class="section" title="12.11.&#160;Network Requirements"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Network-Requirements" />12.11.&#160;Network Requirements</h2></div></div></div><p>The HA Cluster performance depends on the network bandwidth, its use by existing traffic, and quality of service.</p><p>In order to achieve the best performance it is recommended to use a separate network infrastructure for the Qpid HA Nodes
     which might include installation of dedicated network hardware on Broker hosts, assigning a higher priority to replication ports,
     installing a cluster in a separate network not impacted by any other traffic.</p></div><div class="section" title="12.12.&#160;Security"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Security" />12.12.&#160;Security</h2></div></div></div><p>At the moment Berkeley replication API supports only TCP/IP protocol to transfer replication data between Master and Replicas.</p><p>As result, the replicated data is unprotected and can be intercepted by anyone having access to the replication network.</p><p>Also, anyone who can access to this network can introduce a new node and therefore receive a copy of the data.</p><p>In order to reduce the security risks the entire HA cluster is recommended to run in a separate network protected from general access.</p></div><div class="section" title="12.13.&#160;Backups"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Backup" />12.13.&#160;Backups</h2></div></div></div><p>In order to protect the entire cluster from some cataclysms which might destroy all cluster nodes,
    backups of the Master store should be taken on a regular basis.</p><p>Qpid Broker distribution includes the "hot" backup utility <span class="emphasis"><em>backup.sh</em></span> which can be found at broker bin folder.
         This utility can perform the backup when broker is running.</p><p><span class="emphasis"><em>backup.sh</em></span> script invokes <code class="classname">org.apache.qpid.server.store.berkeleydb.BDBBackup</code> to do the job.</p><p>You can also run this class from command line like in an example below:</p><div class="example"><a id="idp28182656" /><p class="title"><strong>Example&#160;12.5.&#160;Performing store backup by using <code class="classname">BDBBackup</code> class directly</strong></p><div class="example-contents"><span class="command"><strong>
        java -cp qpid-bdbstore-0.18.jar org.apache.qpid.server.store.berkeleydb.BDBBackup -fromdir path/to/store/folder -todir path/to/backup/foldeAr</strong></span></div></div><br class="example-break" /><p>In the example above BDBBackup utility is called from qpid-bdbstore-0.18.jar to backup the store at <span class="emphasis"><em>path/to/store/folder</em></span> and copy store logs into <span class="emphasis"><em>path/to/backup/folder</em></span>.</p><p>Linux and Unix users can take advantage of <span class="emphasis"><em>backup.sh</em></span> bash script by running this script in a similar way.</p><div class="example"><a id="idp28186672" /><p class="title"><strong>Example&#160;12.6.&#160;Performing store backup by using <code class="classname">backup.sh</code> bash script</strong></p><div class="example-contents"><span class="command"><strong>backup.sh -fromdir path/to/store/folder -todir path/to/backup/folder</strong></span></div></div><br class="example-break" /><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;" title="Note"><h3 class="title">Note</h3><p>Do not forget to ensure that the Master store is being backed up, in the event the Node elected Master changes during
      the lifecycle of the cluster.</p></div></div><div class="section" title="12.14.&#160;Migration of a non-HA store to HA"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-MigrationFromNonHA" />12.14.&#160;Migration of a non-HA store to HA</h2></div></div></div><p>Non HA stores starting from schema version 4 (0.14 Qpid release) can be automatically converted into HA store on broker startup if replication is first enabled with the <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/rep/util/DbEnableReplication.html" target="_top"><code class="classname">DbEnableReplication</code></a> utility from the BDB JE jar.</p><p>DbEnableReplication converts a non HA store into an HA store and can be used as follows:</p><div class="example"><a id="idp28192704" /><p class="title"><strong>Example&#160;12.7.&#160;Enabling replication</strong></p><div class="example-contents"><span class="command"><strong>
java -jar je-5.0.58.jar DbEnableReplication -h /path/to/store -groupName MyReplicationGroup -nodeName MyNode1 -nodeHostPort  localhost:5001
        </strong></span></div></div><br class="example-break" /><p>In the examples above, je jar of version 5.0.58 is used to convert store at <span class="emphasis"><em>/path/to/store</em></span> into HA store having replication group name <span class="emphasis"><em>MyReplicationGroup</em></span>, node name <span class="emphasis"><em>MyNode1</em></span> and running on host <span class="emphasis"><em>localhost</em></span> and port <span class="emphasis"><em>5001</em></span>.</p><p>After running DbEnableReplication and updating the virtual host store to configuration to be an HA message store, like in example below,
    on broker start up the store schema will be upgraded to the most recent version and the broker can be used as normal.</p><div class="example"><a id="idp28197168" /><p class="title"><strong>Example&#160;12.8.&#160;Example of XML configuration for HA message store</strong></p><div class="example-contents"><pre class="programlisting">
&lt;store&gt;
    &lt;class&gt;org.apache.qpid.server.store.berkeleydb.BDBHAMessageStore&lt;/class&gt;
    &lt;environment-path&gt;/path/to/store&lt;/environment-path&gt;
    &lt;highAvailability&gt;
        &lt;groupName&gt;MyReplicationGroup&lt;/groupName&gt;
        &lt;nodeName&gt;MyNode1&lt;/nodeName&gt;
        &lt;nodeHostPort&gt;localhost:5001&lt;/nodeHostPort&gt;
        &lt;helperHostPort&gt;localhost:5001&lt;/helperHostPort&gt;
    &lt;/highAvailability&gt;
&lt;/store&gt;</pre></div></div><br class="example-break" /><p>The Replica nodes can be started with empty stores. The data will be automatically copied from Master to Replica on Replica start-up.
      This will take a period of time determined by the size of the Masters store and the network bandwidth between the nodes.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;" title="Note"><h3 class="title">Note</h3><p>Due to existing caveats in Berkeley JE with copying of data from Master into Replica it is recommended to restart the Master node after store schema upgrade is finished before starting the Replica nodes.</p></div></div><div class="section" title="12.15.&#160;Disaster Recovery"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-DisasterRecovery" />12.15.&#160;Disaster Recovery</h2></div></div></div><p>This section describes the steps required to restore HA broker cluster from backup.</p><p>The detailed instructions how to perform backup on replicated environment can be found <a class="link" href="#Java-Broker-High-Availability-Backup" title="12.13.&#160;Backups">here</a>.</p><p>At this point we assume that backups are collected on regular basis from Master node.</p><p>Replication configuration of a cluster is stored internally in HA message store.
    This information includes IP addresses of the nodes.
    In case when HA message store needs to be restored on a different host with a different IP address
    the cluster replication configuration should be reseted in this case</p><p>Oracle provides a command line utility <a class="ulink" href="http://docs.oracle.com/cd/E17277_02/html/java/com/sleepycat/je/rep/util/DbResetRepGroup.html" target="_top"><code class="classname">DbResetRepGroup</code></a>
    to reset the members of a replication group and replace the group with a new group consisting of a single new member
    as described by the arguments supplied to the utility</p><p>Cluster can be restored with the following steps:</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Copy log files into the store folder from backup</p></li><li class="listitem"><p>Use <code class="classname">DbResetRepGroup</code> to reset an existing environment. See an example below</p><div class="example"><a id="idp28209344" /><p class="title"><strong>Example&#160;12.9.&#160;Reseting of replication group with <code class="classname">DbResetRepGroup</code></strong></p><div class="example-contents"><span class="command"><strong>
java -cp je-5.0.58.jar com.sleepycat.je.rep.util.DbResetRepGroup -h ha-work/Node-5001/bdbstore -groupName TestClusterGroup -nodeName Node-5001 -nodeHostPort localhost:5001</strong></span></div></div><br class="example-break" /><p>In the example above <code class="classname">DbResetRepGroup</code> utility from Berkeley JE of version 5.0.58 is used to reset the store
            at location <span class="emphasis"><em>ha-work/Node-5001/bdbstore</em></span> and set a replication group to <span class="emphasis"><em>TestClusterGroup</em></span>
            having a node <span class="emphasis"><em>Node-5001</em></span> which runs at <span class="emphasis"><em>localhost:5001</em></span>.</p></li><li class="listitem"><p>Start a broker with HA store configured as specified on running of <code class="classname">DbResetRepGroup</code> utility.</p></li><li class="listitem"><p>Start replica nodes having the same replication group and a helper host port pointing to a new master. The store content will be copied into Replicas from Master on their start up.</p></li></ul></div></div><div class="section" title="12.16.&#160;Performance"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-High-Availability-Performance" />12.16.&#160;Performance</h2></div></div></div><p>The aim of this section is not to provide exact performance metrics relating to HA, as this depends heavily on the test
    environment, but rather showing an impact of HA on Qpid broker performance in comparison with the Non HA case.</p><p>For testing of impact of HA on a broker performance a special test script was written using Qpid performance test framework.
    The script opened a number of connections to the Qpid broker, created producers and consumers on separate connections,
    and published test messages with concurrent producers into a test queue and consumed them with concurrent consumers.
    The table below shows the number of producers/consumers used in the tests.
    The overall throughput was collected for each configuration.
    </p><table border="1" id="idp28218752">Number of producers/consumers in performance tests<thead><tr>
          <th>Test</th>
          <th>Number of producers</th>
          <th>Number of consumers</th>
        </tr></thead><tbody><tr>
          <td>1</td>
          <td>1</td>
          <td>1</td>
        </tr><tr>
          <td>2</td>
          <td>2</td>
          <td>2</td>
        </tr><tr>
          <td>3</td>
          <td>4</td>
          <td>4</td>
        </tr><tr>
          <td>4</td>
          <td>8</td>
          <td>8</td>
        </tr><tr>
          <td>5</td>
          <td>16</td>
          <td>16</td>
        </tr><tr>
          <td>6</td>
          <td>32</td>
          <td>32</td>
        </tr><tr>
          <td>7</td>
          <td>64</td>
          <td>64</td>
        </tr></tbody></table><p>The test was run against the following Qpid Broker configurations</p><div class="itemizedlist"><ul class="itemizedlist"><li class="listitem"><p>Non HA Broker</p></li><li class="listitem"><p>HA 2 Nodes Cluster with durability <span class="emphasis"><em>SYNC,SYNC,ALL</em></span></p></li><li class="listitem"><p>HA 2 Nodes Cluster with durability <span class="emphasis"><em>WRITE_NO_SYNC,WRITE_NO_SYNC,ALL</em></span></p></li><li class="listitem"><p>HA 2 Nodes Cluster with durability <span class="emphasis"><em>WRITE_NO_SYNC,WRITE_NO_SYNC,ALL</em></span> and <span class="emphasis"><em>coalescing-sync</em></span> Qpid mode</p></li><li class="listitem"><p>HA 2 Nodes Cluster with durability <span class="emphasis"><em>WRITE_NO_SYNC,NO_SYNC,ALL</em></span> and <span class="emphasis"><em>coalescing-sync</em></span> Qpid mode</p></li><li class="listitem"><p>HA 2 Nodes Cluster with durability <span class="emphasis"><em>NO_SYNC,NO_SYNC,ALL</em></span> and <span class="emphasis"><em>coalescing-sync</em></span> Qpid option</p></li></ul></div><p>The evironment used in testing consisted of 2 servers with 4 CPU cores (2x Intel(r) Xeon(R) CPU 5150@2.66GHz), 4GB of RAM
        and running under OS Red Hat Enterprise Linux AS release 4 (Nahant Update 4). Network bandwidth was 1Gbit.
    </p><p>We ran Master node on the first server and Replica and clients(both consumers and producers) on the second server.</p><p>In non-HA case Qpid Broker was run on a first server and clients were run on a second server.</p><p>The table below contains the test results we measured on this environment for different Broker configurations.</p><p>Each result is represented by throughput value in KB/second and difference in % between HA configuration and non HA case for the same number of clients.</p><table border="1" id="idp28247776">Performance Comparison<thead><tr>
          <td>Test/Broker</td>
          <td>No HA</td>
          <td>SYNC, SYNC, ALL</td>
          <td>WRITE_NO_SYNC, WRITE_NO_SYNC, ALL</td>
          <td>WRITE_NO_SYNC, WRITE_NO_SYNC, ALL - coalescing-sync</td>
          <td>WRITE_NO_SYNC, NO_SYNC,ALL - coalescing-sync</td>
          <td>NO_SYNC, NO_SYNC, ALL - coalescing-sync</td>
        </tr></thead><tbody><tr>
          <td>1 (1/1)</td>
          <td>0.0%</td>
          <td>-61.4%</td>
          <td>117.0%</td>
          <td>-16.02%</td>
          <td>-9.58%</td>
          <td>-25.47%</td>
        </tr><tr>
          <td>2 (2/2)</td>
          <td>0.0%</td>
          <td>-75.43%</td>
          <td>67.87%</td>
          <td>-66.6%</td>
          <td>-69.02%</td>
          <td>-30.43%</td>
        </tr><tr>
          <td>3 (4/4)</td>
          <td>0.0%</td>
          <td>-84.89%</td>
          <td>24.19%</td>
          <td>-71.02%</td>
          <td>-69.37%</td>
          <td>-43.67%</td>
        </tr><tr>
          <td>4 (8/8)</td>
          <td>0.0%</td>
          <td>-91.17%</td>
          <td>-22.97%</td>
          <td>-82.32%</td>
          <td>-83.42%</td>
          <td>-55.5%</td>
        </tr><tr>
          <td>5 (16/16)</td>
          <td>0.0%</td>
          <td>-91.16%</td>
          <td>-21.42%</td>
          <td>-86.6%</td>
          <td>-86.37%</td>
          <td>-46.99%</td>
        </tr><tr>
          <td>6 (32/32)</td>
          <td>0.0%</td>
          <td>-94.83%</td>
          <td>-51.51%</td>
          <td>-92.15%</td>
          <td>-92.02%</td>
          <td>-57.59%</td>
        </tr><tr>
          <td>7 (64/64)</td>
          <td>0.0%</td>
          <td>-94.2%</td>
          <td>-41.84%</td>
          <td>-89.55%</td>
          <td>-89.55%</td>
          <td>-50.54%</td>
        </tr></tbody></table><p>The figure below depicts the graphs for the performance test results</p><div class="figure"><a id="idp28279104" /><p class="title"><strong>Figure&#160;12.8.&#160;Test results</strong></p><div class="figure-contents"><div><img alt="Test results" src="images/HA-perftests-results.png" /></div></div></div><br class="figure-break" /><p>On using durability <span class="emphasis"><em>SYNC,SYNC,ALL</em></span> (without coalescing-sync) the performance drops significantly (by 62-95%) in comparison with non HA broker.</p><p>Whilst, on using durability <span class="emphasis"><em>WRITE_NO_SYNC,WRITE_NO_SYNC,ALL</em></span> (without coalescing-sync) the performance drops by only half, but with loss of durability guarantee, so is not recommended.</p><p>In order to have better performance with HA, Qpid Broker comes up with the special mode called <a class="link" href="#Java-Broker-High-Availability-DurabilityGuarantee_CoalescingSync" title="12.6.2.&#160;Coalescing-sync">coalescing-sync</a>,
    With this mode enabled, Qpid broker batches the concurrent transaction commits and syncs transaction data into Master disk in one go.
    As result, the HA performance only drops by 25-60% for durability <span class="emphasis"><em>NO_SYNC,NO_SYNC,ALL</em></span> and by 10-90% for <span class="emphasis"><em>WRITE_NO_SYNC,WRITE_NO_SYNC,ALL</em></span>.</p></div></div><div class="chapter" title="Chapter&#160;13.&#160;Miscellaneous"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Miscellaneous" />Chapter&#160;13.&#160;Miscellaneous</h2></div></div></div><div class="toc"><p><strong>Table of Contents</strong></p><dl><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification">13.1. JVM Installation verification</a></span></dt><dd><dl><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification-Windows">13.1.1. Verify JVM on Windows</a></span></dt><dt><span class="section"><a href="#Java-Broker-Miscellaneous-JVM-Verification-Unix">13.1.2. Verify JVM on Unix</a></span></dt></dl></dd></dl></div><div class="section" title="13.1.&#160;JVM Installation verification"><div class="titlepage"><div><div><h2 class="title"><a id="Java-Broker-Miscellaneous-JVM-Verification" />13.1.&#160;JVM Installation verification</h2></div></div></div><div class="section" title="13.1.1.&#160;Verify JVM on Windows"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Miscellaneous-JVM-Verification-Windows" />13.1.1.&#160;Verify JVM on Windows</h3></div></div></div><p>
        Firstly confirm that the JAVA_HOME environment variable is set correctly by typing the
        following at the command prompt:
      </p><pre class="programlisting">echo %JAVA_HOME%</pre><p>
        If JAVA_HOME is set you will see something similar to the following:
      </p><pre class="screen">c:"\PROGRA~1"\Java\jdk1.6.0_24\
      </pre><p>
        Then confirm that a Java installation (1.6 or higher) is available:
      </p><pre class="programlisting">java -version</pre><p>
        If java is available on the path, output similar to the following will be seen:
      </p><pre class="screen">java version "1.6.0_24"
Java(TM) SE Runtime Environment (build 1.6.0_24-b07)
Java HotSpot(TM) 64-Bit Server VM (build 19.1-b02, mixed mode)</pre></div><div class="section" title="13.1.2.&#160;Verify JVM on Unix"><div class="titlepage"><div><div><h3 class="title"><a id="Java-Broker-Miscellaneous-JVM-Verification-Unix" />13.1.2.&#160;Verify JVM on Unix</h3></div></div></div><p>
        Firstly confirm that the JAVA_HOME environment variable is set correctly by typing the
        following at the command prompt:
      </p><pre class="programlisting">echo $JAVA_HOME</pre><p>
        If JAVA_HOME is set you will see something similar to the following:
      </p><pre class="screen">/usr/java/jdk1.6.0_35
      </pre><p>
        Then confirm that a Java installation (1.6 or higher) is available:
      </p><pre class="programlisting">java -version</pre><p>
        If java is available on the path, output similar to the following will be seen:
      </p><pre class="screen">java version "1.6.0_35"
Java(TM) SE Runtime Environment (build 1.6.0_35-b10-428-11M3811)
Java HotSpot(TM) 64-Bit Server VM (build 20.10-b01-428, mixed mode)</pre></div></div></div></div></div>