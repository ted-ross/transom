
<h1>drain.pl</h1>
<div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">use</span> <span class="n">qpid</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Getopt::</span><span class="n">Long</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Pod::</span><span class="n">Usage</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$url</span>               <span class="o">=</span> <span class="s">&quot;127.0.0.1&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$timeout</span>           <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$forever</span>           <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$count</span>             <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$connectionOptions</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$address</span>           <span class="o">=</span> <span class="s">&quot;amq.direct&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$help</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$result</span> <span class="o">=</span> <span class="n">GetOptions</span><span class="p">(</span>
    <span class="s">&quot;broker|b=s&quot;</span>           <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$url</span><span class="p">,</span>
    <span class="s">&quot;timeout|t=i&quot;</span>          <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$timeout</span><span class="p">,</span>
    <span class="s">&quot;forever|f&quot;</span>            <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$forever</span><span class="p">,</span>
    <span class="s">&quot;connection-options=s&quot;</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$connectionOptions</span><span class="p">,</span>
    <span class="s">&quot;count|c=i&quot;</span>            <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$count</span><span class="p">,</span>
    <span class="s">&quot;help|h&quot;</span>               <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$help</span>
<span class="p">)</span> <span class="o">||</span> <span class="n">pod2usage</span><span class="p">(</span> <span class="o">-</span><span class="n">verbose</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">);</span>

<span class="n">pod2usage</span><span class="p">(</span> <span class="o">-</span><span class="n">verbose</span> <span class="o">=&gt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">if</span> <span class="nv">$help</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span> <span class="nv">$#ARGV</span> <span class="ow">ge</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$address</span> <span class="o">=</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">getTimeout</span> <span class="p">{</span>

    <span class="c1"># returns either the named duration FOREVER if the</span>
    <span class="c1"># forever cmdline argument was used, otherwise creates</span>
    <span class="c1"># a new Duration of the specified length</span>
    <span class="k">return</span> <span class="p">(</span><span class="nv">$forever</span><span class="p">)</span>
      <span class="p">?</span> <span class="nn">qpid::messaging::Duration::</span><span class="n">FOREVER</span>
      <span class="p">:</span> <span class="k">new</span> <span class="nn">qpid::messaging::</span><span class="n">Duration</span><span class="p">(</span> <span class="nv">$timeout</span> <span class="o">*</span> <span class="mi">1000</span> <span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">printProperties</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$h</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">();</span>
    <span class="k">return</span> <span class="sx">qq[{${\(join&#39;, &#39;,map&quot;&#39;$_&#39;: &#39;$h-&gt;{$_}&#39;&quot;,keys%$h)}}]</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># create a connection object</span>
<span class="k">my</span> <span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nn">qpid::messaging::</span><span class="n">Connection</span><span class="p">(</span> <span class="nv">$url</span><span class="p">,</span> <span class="nv">$connectionOptions</span> <span class="p">);</span>

<span class="nb">eval</span> <span class="p">{</span>
    <span class="c1"># open the connection, then create a session and receiver</span>
    <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nb">open</span><span class="p">();</span>
    <span class="k">my</span> <span class="nv">$session</span>  <span class="o">=</span> <span class="nv">$connection</span><span class="o">-&gt;</span><span class="n">create_session</span><span class="p">();</span>
    <span class="k">my</span> <span class="nv">$receiver</span> <span class="o">=</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">create_receiver</span><span class="p">(</span><span class="nv">$address</span><span class="p">);</span>
    <span class="k">my</span> <span class="nv">$timeout</span>  <span class="o">=</span> <span class="n">getTimeout</span><span class="p">();</span>
    <span class="k">my</span> <span class="nv">$message</span>  <span class="o">=</span> <span class="k">new</span> <span class="nn">qpid::messaging::</span><span class="n">Message</span><span class="p">();</span>
    <span class="k">my</span> <span class="nv">$i</span>        <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nb">eval</span> <span class="p">{</span> <span class="nv">$message</span> <span class="o">=</span> <span class="nv">$receiver</span><span class="o">-&gt;</span><span class="n">fetch</span><span class="p">(</span><span class="nv">$timeout</span><span class="p">);</span> <span class="p">};</span>

        <span class="k">if</span> <span class="p">(</span><span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">last</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1"># check if the message was on that was redelivered</span>
        <span class="k">my</span> <span class="nv">$redelivered</span> <span class="o">=</span>
          <span class="p">(</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_redelivered</span> <span class="p">)</span> <span class="p">?</span> <span class="s">&quot;redelivered=True, &quot;</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
        <span class="k">print</span> <span class="s">&quot;Message(&quot;</span>
          <span class="o">.</span> <span class="nv">$redelivered</span>
          <span class="o">.</span> <span class="s">&quot;properties=&quot;</span>
          <span class="o">.</span> <span class="n">printProperties</span><span class="p">(</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_properties</span><span class="p">()</span> <span class="p">)</span>
          <span class="o">.</span> <span class="s">&quot;, content=&#39;&quot;</span><span class="p">;</span>

        <span class="c1"># if the message content was a map, then we will print</span>
        <span class="c1"># it out as a series of name =&gt; value pairs</span>
        <span class="k">if</span> <span class="p">(</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_content_type</span><span class="p">()</span> <span class="ow">eq</span> <span class="s">&quot;amqp/map&quot;</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">my</span> <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_content</span><span class="p">();</span>
            <span class="nb">map</span> <span class="p">{</span> <span class="k">print</span> <span class="s">&quot;\n$_ =&gt; $content-&gt;{$_}&quot;</span><span class="p">;</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%</span><span class="p">{</span><span class="nv">$content</span><span class="p">};</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1"># it&#39;s not a map, so just print the content as a string</span>
            <span class="k">print</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_content</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">print</span> <span class="s">&quot;&#39;)\n&quot;</span><span class="p">;</span>

        <span class="c1"># if the message had a reply-to address, then we&#39;ll send a</span>
        <span class="c1"># response back letting the send know the message was processed</span>
        <span class="k">my</span> <span class="nv">$replyto</span> <span class="o">=</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_reply_to</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span> <span class="nv">$replyto</span><span class="o">-&gt;</span><span class="n">get_name</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">print</span> <span class="s">&quot;Replying to &quot;</span> <span class="o">.</span> <span class="nv">$message</span><span class="o">-&gt;</span><span class="n">get_reply_to</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">()</span> <span class="o">.</span> <span class="s">&quot;...\n&quot;</span><span class="p">;</span>

            <span class="c1"># create a temporary sender for the specified queue</span>
            <span class="k">my</span> <span class="nv">$sender</span> <span class="o">=</span> <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">create_sender</span><span class="p">(</span><span class="nv">$replyto</span><span class="p">);</span>
            <span class="k">my</span> <span class="nv">$response</span> <span class="o">=</span>
              <span class="k">new</span> <span class="nn">qpid::messaging::</span><span class="n">Message</span><span class="p">(</span><span class="s">&quot;received by the server.&quot;</span><span class="p">);</span>
            <span class="nv">$sender</span><span class="o">-&gt;</span><span class="nb">send</span><span class="p">(</span><span class="nv">$response</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1"># acknowledge all messages received on this queue so far</span>
        <span class="nv">$session</span><span class="o">-&gt;</span><span class="n">acknowledge</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span> <span class="nv">$count</span> <span class="ow">and</span> <span class="p">(</span> <span class="o">++</span><span class="nv">$i</span> <span class="o">==</span> <span class="nv">$count</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">last</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1"># close everything to clean up</span>
    <span class="nv">$receiver</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">();</span>
    <span class="nv">$session</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">();</span>
    <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">();</span>
<span class="p">};</span>

<span class="k">if</span> <span class="p">(</span><span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$connection</span><span class="o">-&gt;</span><span class="nb">close</span><span class="p">();</span>
    <span class="nb">die</span> <span class="vg">$@</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">__END__</span>

<span class="cp">=head1 NAME</span>

<span class="cp">drain - Drains messages from the specified address</span>

<span class="cp">=head1 SYNOPSIS</span>

<span class="cp">  Options:</span>
<span class="cp">  -h, --help                    show this message</span>
<span class="cp">  -b VALUE, --broker VALUE      url of broker to connect to</span>
<span class="cp">  -t VALUE, --timeout VALUE     timeout in seconds to wait before exiting</span>
<span class="cp">  -f, --forever                 ignore timeout and wait forever</span>
<span class="cp">  --connection-options VALUE    connection options string in the form {name1:value1, name2:value2}</span>
<span class="cp">  -c VALUE, --count VALUE       number of messages to read before exiting</span>

<span class="cp">=cut</span>
</pre></div>

<p><a href="drain.pl">Download this file</a></p>
