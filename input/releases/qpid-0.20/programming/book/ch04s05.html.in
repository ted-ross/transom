<div class="docbook"><div class="navheader"><table summary="Navigation header" width="100%"><tr><th align="center" colspan="3">4.5.&#160;Transactions</th></tr><tr><td align="left" width="20%"><a accesskey="p" href="ch04s04.html">Prev</a>&#160;</td><th align="center" width="60%">Chapter&#160;4.&#160;Using the Qpid WCF client</th><td align="right" width="20%">&#160;<a accesskey="n" href="ch05.html">Next</a></td></tr></table><hr /></div><div class="section"><div class="titlepage"><div><div><h2 class="title"><a id="idm247274270304" />4.5.&#160;Transactions</h2></div></div></div><p>The WCF channel provides a transaction resource manager
      module and a recovery module that together provide distributed
      transaction support with one-phase optimization.  Some
      configuration is required on Windows machines to enable
      transaction support (see your installation notes or top level
      ReadMe.txt file for instructions).  Once properly configured,
      the Qpid WCF channel acts as any other System.Transactions aware
      resource, capable of participating in explicit or implicit
      transactions.</p><p>Server code:</p><pre class="programlisting">
[OperationBehavior(TransactionScopeRequired = true,
                   TransactionAutoComplete = true)]

public void SayHello(string greeting)
{
  // increment ExactlyOnceReceived counter on DB

  // Success: transaction auto completes:
}
</pre><p>Because this operation involves two transaction resources, the
      database and the AMQP message broker, this operates as a full two
      phase commit transaction managed by the Distributed Transaction
      Coordinator service.  If the transaction proceeds without error,
      both ExactlyOnceReceived is incremented in the database and the AMQP
      message is consumed from the broker.  Otherwise, ExactlyOnceReceived is
      unchanged and AMQP message is returned to its queue on the broker.</p><p>For the client code a few changes are made to the non-transacted
      example.  For "exactly once" semantics, we set the AMQP "Durable"
      message property and enclose the transacted activities in a
      TransactionScope:</p><pre class="programlisting">
AmqpProperties myDefaults = new AmqpProperties();
myDefaults.Durable = true;
amqpBinding.DefaultMessageProperties = myDefaults;
ChannelFactory&lt;IHelloService&gt; channelFactory =
new ChannelFactory&lt;IHelloService&gt;(amqpBinding, clientEndpoint);
IHelloService clientProxy = channelFactory.CreateChannel();

using (TransactionScope ts = new TransactionScope())
{
   AmqpProperties amqpProperties = new AmqpProperties();
   clientProxy.SayHello("Greetings from WCF client");
   // increment ExactlyOnceSent counter on DB
   ts.Complete();
}
</pre></div><div class="navfooter"><hr /><table summary="Navigation footer" width="100%"><tr><td align="left" width="40%"><a accesskey="p" href="ch04s04.html">Prev</a>&#160;</td><td align="center" width="20%"><a accesskey="u" href="QpidWCF.html">Up</a></td><td align="right" width="40%">&#160;<a accesskey="n" href="ch05.html">Next</a></td></tr><tr><td align="left" valign="top" width="40%">4.4.&#160;Security&#160;</td><td align="center" width="20%"><a accesskey="h" href="index.html">Home</a></td><td align="right" valign="top" width="40%">&#160;Chapter&#160;5.&#160;The .NET Binding for the C++ Messaging Client</td></tr></table></div></div>