
<h1>csharp.map.callback.receiver.cs</h1>
<div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.ObjectModel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Org.Apache.Qpid.Messaging</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Org.Apache.Qpid.Messaging.SessionReceiver</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Org.Apache.Qpid.Messaging.Examples</span>
<span class="p">{</span>
    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// A class with functions to display structured messages.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MessageViewer</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// A Function to display a amqp/map message packaged as a Dictionary.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;dict&quot;&gt;The AMQP map&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;level&quot;&gt;Nested depth&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ShowDictionary</span><span class="p">(</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">dict</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">kvp</span> <span class="k">in</span> <span class="n">dict</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">level</span> <span class="p">*</span> <span class="m">4</span><span class="p">));</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">QpidTypeCheck</span><span class="p">.</span><span class="n">ObjectIsMap</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Key: {0}, Value: Dictionary&quot;</span><span class="p">,</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">);</span>
                    <span class="n">ShowDictionary</span><span class="p">((</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;)</span><span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">level</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">QpidTypeCheck</span><span class="p">.</span><span class="n">ObjectIsList</span><span class="p">(</span><span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Key: {0}, Value: List&quot;</span><span class="p">,</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">);</span>
                    <span class="n">ShowList</span><span class="p">((</span><span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;)</span><span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">level</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Key: {0}, Value: {1}, Type: {2}&quot;</span><span class="p">,</span>
                        <span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">,</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">ToString</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// A function to display a ampq/list message packaged as a List.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;list&quot;&gt;The AMQP list&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;level&quot;&gt;Nested depth&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ShowList</span><span class="p">(</span><span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">object</span> <span class="n">obj</span> <span class="k">in</span> <span class="n">list</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">,</span> <span class="n">level</span> <span class="p">*</span> <span class="m">4</span><span class="p">));</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">QpidTypeCheck</span><span class="p">.</span><span class="n">ObjectIsMap</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Dictionary&quot;</span><span class="p">);</span>
                    <span class="n">ShowDictionary</span><span class="p">((</span><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;)</span><span class="n">obj</span><span class="p">,</span> <span class="n">level</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">QpidTypeCheck</span><span class="p">.</span><span class="n">ObjectIsList</span><span class="p">(</span><span class="n">obj</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;List&quot;</span><span class="p">);</span>
                    <span class="n">ShowList</span><span class="p">((</span><span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;)</span><span class="n">obj</span><span class="p">,</span> <span class="n">level</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Value: {0}, Type: {1}&quot;</span><span class="p">,</span>
                        <span class="n">obj</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">obj</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">ToString</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// A function to diplay a Message. The native Object type is</span>
        <span class="c1">/// decomposed into AMQP types.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;message&quot;&gt;The Message&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ShowMessage</span><span class="p">(</span><span class="n">Message</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="s">&quot;amqp/map&quot;</span> <span class="p">==</span> <span class="n">message</span><span class="p">.</span><span class="n">ContentType</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Received a Dictionary&quot;</span><span class="p">);</span>
                <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
                <span class="n">message</span><span class="p">.</span><span class="n">GetContent</span><span class="p">(</span><span class="n">content</span><span class="p">);</span>
                <span class="n">ShowDictionary</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="s">&quot;amqp/list&quot;</span> <span class="p">==</span> <span class="n">message</span><span class="p">.</span><span class="n">ContentType</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Received a List&quot;</span><span class="p">);</span>
                <span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>
                <span class="n">message</span><span class="p">.</span><span class="n">GetContent</span><span class="p">(</span><span class="n">content</span><span class="p">);</span>
                <span class="n">ShowList</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Received a String&quot;</span><span class="p">);</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">message</span><span class="p">.</span><span class="n">GetContent</span><span class="p">());</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>



    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// A model class to demonstrate how a user may use the Qpid Messaging</span>
    <span class="c1">/// interface to receive Session messages using a callback.</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">class</span> <span class="nc">ReceiverProcess</span> <span class="p">:</span> <span class="n">ISessionReceiver</span>
    <span class="p">{</span>
        <span class="n">UInt32</span> <span class="n">messagesReceived</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// SessionReceiver implements the ISessionReceiver interface.</span>
        <span class="c1">/// It is the callback function that receives all messages for a Session.</span>
        <span class="c1">/// It may be called any time server is running.</span>
        <span class="c1">/// It is always called on server&#39;s private thread.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;receiver&quot;&gt;The Receiver associated with the message.&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;message&quot;&gt;The Message&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">SessionReceiver</span><span class="p">(</span><span class="n">Receiver</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">Message</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//</span>
            <span class="c1">// Indicate message reception</span>
            <span class="c1">//</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;--- Message {0}&quot;</span><span class="p">,</span> <span class="p">++</span><span class="n">messagesReceived</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// Display the received message</span>
            <span class="c1">//</span>
            <span class="n">MessageViewer</span><span class="p">.</span><span class="n">ShowMessage</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// Acknowledge the receipt of all received messages.</span>
            <span class="c1">//</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">Session</span><span class="p">.</span><span class="n">Acknowledge</span><span class="p">();</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// SessionReceiver implements the ISessionReceiver interface.</span>
        <span class="c1">/// It is the exception function that receives all exception messages</span>
        <span class="c1">/// It may be called any time server is running.</span>
        <span class="c1">/// It is always called on server&#39;s private thread.</span>
        <span class="c1">/// After this is called then the sessionReceiver and private thread are closed.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;exception&quot;&gt;The exception.&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">SessionException</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// A typical application will take more action here.</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} Exception caught.&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Usage</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;url&quot;&gt;Connection target&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;addr&quot;&gt;Address: broker exchange + routing key&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name=&quot;nSec&quot;&gt;n seconds to keep callback open&lt;/param&gt;</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nSec</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;usage: {0} [url  [addr [nSec]]]&quot;</span><span class="p">,</span>
                <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">GetCurrentProcess</span><span class="p">().</span><span class="n">ProcessName</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;A program to connect to a broker and receive&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;messages from a named exchange with a routing key.&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;The receiver uses a session callback and keeps the callback&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;server open for so many seconds.&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;The details of the message body&#39;s types and values are shown.&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; url  = target address for &#39;new Connection(url)&#39;&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; addr = address for &#39;session.CreateReceiver(addr)&#39;&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; nSec = time in seconds to keep the receiver callback open&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Default values:&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;  {0} {1} {2} {3}&quot;</span><span class="p">,</span>
                <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">GetCurrentProcess</span><span class="p">().</span><span class="n">ProcessName</span><span class="p">,</span>
                <span class="n">url</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">nSec</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// A function to illustrate how to open a Session callback and</span>
        <span class="c1">/// receive messages.</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;args&quot;&gt;Main program arguments&lt;/param&gt;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nf">TestProgram</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;amqp:tcp:localhost:5672&quot;</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">addr</span> <span class="p">=</span> <span class="s">&quot;amq.direct/map_example&quot;</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">nSec</span> <span class="p">=</span> <span class="m">30</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">connectionOptions</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="m">1</span> <span class="p">==</span> <span class="n">args</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;-h&quot;</span><span class="p">)</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;-H&quot;</span><span class="p">)</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;/?&quot;</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">usage</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">nSec</span><span class="p">);</span>
                    <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="n">url</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">)</span>
                <span class="n">addr</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">2</span><span class="p">)</span>
                <span class="n">nSec</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">2</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">)</span>
                <span class="n">connectionOptions</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">3</span><span class="p">];</span>

            <span class="c1">//</span>
            <span class="c1">// Create and open an AMQP connection to the broker URL</span>
            <span class="c1">//</span>
            <span class="n">Connection</span> <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Connection</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">);</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">Open</span><span class="p">();</span>

            <span class="c1">//</span>
            <span class="c1">// Create a session.</span>
            <span class="c1">//</span>
            <span class="n">Session</span> <span class="n">session</span> <span class="p">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">CreateSession</span><span class="p">();</span>

            <span class="c1">//</span>
            <span class="c1">// Receive through callback</span>
            <span class="c1">//</span>
            <span class="c1">// Create callback server and implicitly start it</span>
            <span class="c1">//</span>
            <span class="n">SessionReceiver</span><span class="p">.</span><span class="n">CallbackServer</span> <span class="n">cbServer</span> <span class="p">=</span>
                <span class="k">new</span> <span class="n">SessionReceiver</span><span class="p">.</span><span class="n">CallbackServer</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// The callback server is running and executing callbacks on a</span>
            <span class="c1">// separate thread.</span>
            <span class="c1">//</span>

            <span class="c1">//</span>
            <span class="c1">// Create a receiver for the direct exchange using the</span>
            <span class="c1">// routing key &quot;map_example&quot;.</span>
            <span class="c1">//</span>
            <span class="n">Receiver</span> <span class="n">receiver</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">CreateReceiver</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// Establish a capacity</span>
            <span class="c1">//</span>
            <span class="n">receiver</span><span class="p">.</span><span class="n">Capacity</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

            <span class="c1">//</span>
            <span class="c1">// Wait so many seconds for messages to arrive.</span>
            <span class="c1">//</span>
            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">nSec</span> <span class="p">*</span> <span class="m">1000</span><span class="p">);</span>   <span class="c1">// in mS</span>

            <span class="c1">//</span>
            <span class="c1">// Stop the callback server.</span>
            <span class="c1">//</span>
            <span class="n">cbServer</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>

            <span class="c1">//</span>
            <span class="c1">// Close the receiver and the connection.</span>
            <span class="c1">//</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">receiver</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
                <span class="n">connection</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// receiver or connection may throw if they closed in error.</span>
                <span class="c1">// A typical application will take more action here.</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0} Closing exception caught.&quot;</span><span class="p">,</span> <span class="n">exception</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="k">class</span> <span class="nc">MapCallbackReceiverMain</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Main program</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name=&quot;args&quot;&gt;Main prgram args&lt;/param&gt;</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Invoke &#39;TestProgram&#39; as non-static class.</span>
            <span class="n">ReceiverProcess</span> <span class="n">mainProc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ReceiverProcess</span><span class="p">();</span>

            <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">mainProc</span><span class="p">.</span><span class="n">TestProgram</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p><a href="csharp.map.callback.receiver.cs">Download this file</a></p>
