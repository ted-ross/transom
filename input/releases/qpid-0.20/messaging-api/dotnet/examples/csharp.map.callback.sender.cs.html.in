
<h1>csharp.map.callback.sender.cs</h1>
<div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.ObjectModel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Org.Apache.Qpid.Messaging</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Org.Apache.Qpid.Messaging.Examples</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">MapSender</span>
    <span class="p">{</span>
        <span class="c1">//</span>
        <span class="c1">// usage</span>
        <span class="c1">//</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">usage</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">,</span> <span class="kt">string</span> <span class="n">addr</span><span class="p">,</span> <span class="n">UInt32</span> <span class="n">count</span><span class="p">,</span> <span class="kt">string</span> <span class="n">connOpts</span><span class="p">)</span>
        <span class="p">{</span>

            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;usage: {0} [url  [addr [count]]]&quot;</span><span class="p">,</span>
                <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">GetCurrentProcess</span><span class="p">().</span><span class="n">ProcessName</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;A program to connect to a broker and send N&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;messages to a named exchange with a routing key.&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; url = target address for &#39;new Connection(url)&#39;&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; addr = address for &#39;session.CreateReceiver(addr)&#39;&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; count = number of messages to send&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot; connectionOptions = options list&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Default values:&quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;  {0} {1} {2} {3} {4}&quot;</span><span class="p">,</span>
                <span class="n">System</span><span class="p">.</span><span class="n">Diagnostics</span><span class="p">.</span><span class="n">Process</span><span class="p">.</span><span class="n">GetCurrentProcess</span><span class="p">().</span><span class="n">ProcessName</span><span class="p">,</span>
                <span class="n">url</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">connOpts</span><span class="p">);</span>
        <span class="p">}</span>

        
        <span class="c1">//</span>
        <span class="c1">// TestProgram</span>
        <span class="c1">//</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nf">TestProgram</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">url</span> <span class="p">=</span> <span class="s">&quot;amqp:tcp:localhost:5672&quot;</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">addr</span> <span class="p">=</span> <span class="s">&quot;amq.direct/map_example&quot;</span><span class="p">;</span>
            <span class="n">UInt32</span> <span class="n">count</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">connectionOptions</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="m">1</span> <span class="p">==</span> <span class="n">args</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;-h&quot;</span><span class="p">)</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;-H&quot;</span><span class="p">)</span> <span class="p">||</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Equals</span><span class="p">(</span><span class="s">&quot;/?&quot;</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">usage</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">);</span>
                    <span class="k">return</span> <span class="m">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="n">url</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">1</span><span class="p">)</span>
                <span class="n">addr</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">2</span><span class="p">)</span>
                <span class="n">count</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="n">ToUInt32</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">2</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">3</span><span class="p">)</span>
                <span class="n">connectionOptions</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">3</span><span class="p">];</span>
            
            <span class="c1">//</span>
            <span class="c1">// Create and open an AMQP connection to the broker URL</span>
            <span class="c1">//</span>
            <span class="n">Connection</span> <span class="n">connection</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Connection</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">connectionOptions</span><span class="p">);</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">Open</span><span class="p">();</span>

            <span class="c1">//</span>
            <span class="c1">// Create a session and a sender to the direct exchange using the</span>
            <span class="c1">// routing key &quot;map_example&quot;.</span>
            <span class="c1">//</span>
            <span class="n">Session</span> <span class="n">session</span> <span class="p">=</span> <span class="n">connection</span><span class="p">.</span><span class="n">CreateSession</span><span class="p">();</span>
            <span class="n">Sender</span> <span class="n">sender</span> <span class="p">=</span> <span class="n">session</span><span class="p">.</span><span class="n">CreateSender</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// Create structured content for the message.  This example builds a</span>
            <span class="c1">// map of items including a nested map and a list of values.</span>
            <span class="c1">//</span>
            <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">content</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
            <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">subMap</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
            <span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">colors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Collection</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span>

            <span class="c1">// add simple types</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="m">987654321</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Widget&quot;</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;percent&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="m">0.99</span><span class="p">;</span>

            <span class="c1">// add nested amqp/map</span>
            <span class="n">subMap</span><span class="p">[</span><span class="s">&quot;name&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;Smith&quot;</span><span class="p">;</span>
            <span class="n">subMap</span><span class="p">[</span><span class="s">&quot;number&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="m">354</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;nestedMap&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">subMap</span><span class="p">;</span>

            <span class="c1">// add an amqp/list</span>
            <span class="n">colors</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;red&quot;</span><span class="p">);</span>
            <span class="n">colors</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;green&quot;</span><span class="p">);</span>
            <span class="n">colors</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;white&quot;</span><span class="p">);</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;colorsList&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">colors</span><span class="p">;</span>

            <span class="c1">// add one of each supported amqp data type</span>
            <span class="kt">bool</span> <span class="n">mybool</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;mybool&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">mybool</span><span class="p">;</span>

            <span class="kt">byte</span> <span class="n">mybyte</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;mybyte&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">mybyte</span><span class="p">;</span>

            <span class="n">UInt16</span> <span class="n">myUInt16</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myUInt16&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myUInt16</span><span class="p">;</span>

            <span class="n">UInt32</span> <span class="n">myUInt32</span> <span class="p">=</span> <span class="m">6</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myUInt32&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myUInt32</span><span class="p">;</span>

            <span class="n">UInt64</span> <span class="n">myUInt64</span> <span class="p">=</span> <span class="m">7</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myUInt64&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myUInt64</span><span class="p">;</span>

            <span class="kt">char</span> <span class="n">mychar</span> <span class="p">=</span> <span class="sc">&#39;h&#39;</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;mychar&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">mychar</span><span class="p">;</span>

            <span class="n">Int16</span> <span class="n">myInt16</span> <span class="p">=</span> <span class="m">9</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myInt16&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myInt16</span><span class="p">;</span>

            <span class="n">Int32</span> <span class="n">myInt32</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myInt32&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myInt32</span><span class="p">;</span>

            <span class="n">Int64</span> <span class="n">myInt64</span> <span class="p">=</span> <span class="m">11</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myInt64&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myInt64</span><span class="p">;</span>

            <span class="n">Single</span> <span class="n">mySingle</span> <span class="p">=</span> <span class="p">(</span><span class="n">Single</span><span class="p">)</span><span class="m">12.12</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;mySingle&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">mySingle</span><span class="p">;</span>

            <span class="n">Double</span> <span class="n">myDouble</span> <span class="p">=</span> <span class="m">13.13</span><span class="p">;</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myDouble&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myDouble</span><span class="p">;</span>

            <span class="n">Guid</span> <span class="n">myGuid</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Guid</span><span class="p">(</span><span class="s">&quot;000102030405060708090a0b0c0d0e0f&quot;</span><span class="p">);</span>
            <span class="n">content</span><span class="p">[</span><span class="s">&quot;myGuid&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="n">myGuid</span><span class="p">;</span>

            <span class="c1">//</span>
            <span class="c1">// Construct a message with the map content and send it synchronously</span>
            <span class="c1">// via the sender.</span>
            <span class="c1">//</span>
            <span class="n">Message</span> <span class="n">message</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Message</span><span class="p">(</span><span class="n">content</span><span class="p">);</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">UInt32</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="p">&lt;</span><span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="n">sender</span><span class="p">.</span><span class="n">Send</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>

            <span class="c1">//</span>
            <span class="c1">// Wait until broker receives all messages.</span>
            <span class="c1">//</span>
            <span class="n">session</span><span class="p">.</span><span class="n">Sync</span><span class="p">();</span>

            <span class="c1">//</span>
            <span class="c1">// Close the connection.</span>
            <span class="c1">//</span>
            <span class="n">connection</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>

            <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">MapSenderMain</span>
    <span class="p">{</span>
        <span class="c1">//</span>
        <span class="c1">// Main</span>
        <span class="c1">//</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Invoke &#39;TestProgram&#39; as non-static class.</span>
            <span class="n">MapSender</span> <span class="n">mainProc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MapSender</span><span class="p">();</span>

            <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">mainProc</span><span class="p">.</span><span class="n">TestProgram</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>

<p><a href="csharp.map.callback.sender.cs">Download this file</a></p>
