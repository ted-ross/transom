
<h1>recv.c</h1>
<div class="highlight"><pre><span class="cp">#include &quot;proton/message.h&quot;</span>
<span class="cp">#include &quot;proton/messenger.h&quot;</span>

<span class="cp">#if defined(_WIN32) &amp;&amp; ! defined(__CYGWIN__)</span>
<span class="cp">#include &quot;../../../proton-c/wincompat/getopt.h&quot;</span>
<span class="cp">#else</span>
<span class="cp">#include &lt;getopt.h&gt;</span>
<span class="cp">#endif</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;ctype.h&gt;</span>

<span class="cp">#define check(messenger)                                         \</span>
<span class="cp">  {                                                              \</span>
<span class="cp">    if(pn_messenger_errno(messenger))                            \</span>
<span class="cp">    {                                                            \</span>
<span class="cp">      die(__FILE__, __LINE__, pn_messenger_error(messenger));    \</span>
<span class="cp">    }                                                            \</span>
<span class="cp">  }                                                              \</span>

<span class="kt">void</span> <span class="nf">die</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">file</span><span class="p">,</span> <span class="kt">int</span> <span class="n">line</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;%s:%i: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">usage</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Usage: recv [options] &lt;addr&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-c    </span><span class="se">\t</span><span class="s">Path to the certificate file.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-k    </span><span class="se">\t</span><span class="s">Path to the private key file.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-p    </span><span class="se">\t</span><span class="s">Password for the private key.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;&lt;addr&gt;</span><span class="se">\t</span><span class="s">An address.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">certificate</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">privatekey</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">password</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">address</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="s">&quot;amqp://~0.0.0.0&quot;</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
  <span class="n">opterr</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">while</span><span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="s">&quot;hc:k:p:&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="sc">&#39;h&#39;</span>:
      <span class="n">usage</span><span class="p">();</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="sc">&#39;c&#39;</span>: <span class="n">certificate</span> <span class="o">=</span> <span class="n">optarg</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">&#39;k&#39;</span>: <span class="n">privatekey</span> <span class="o">=</span> <span class="n">optarg</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">&#39;p&#39;</span>: <span class="n">password</span> <span class="o">=</span> <span class="n">optarg</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
      <span class="k">if</span><span class="p">(</span><span class="n">optopt</span> <span class="o">==</span> <span class="sc">&#39;c&#39;</span> <span class="o">||</span>
         <span class="n">optopt</span> <span class="o">==</span> <span class="sc">&#39;k&#39;</span> <span class="o">||</span>
         <span class="n">optopt</span> <span class="o">==</span> <span class="sc">&#39;p&#39;</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Option -%c requires an argument.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">isprint</span><span class="p">(</span><span class="n">optopt</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unknown option `-%c&#39;.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">else</span>
      <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Unknown option character `</span><span class="se">\\</span><span class="s">x%x&#39;.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">optopt</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nl">default:</span>
      <span class="n">abort</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">((</span><span class="n">argc</span> <span class="o">-</span> <span class="n">optind</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">address</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="n">argc</span> <span class="o">-</span> <span class="n">optind</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="n">pn_message_t</span> <span class="o">*</span> <span class="n">message</span><span class="p">;</span>
  <span class="n">pn_messenger_t</span> <span class="o">*</span> <span class="n">messenger</span><span class="p">;</span>

  <span class="n">message</span> <span class="o">=</span> <span class="n">pn_message</span><span class="p">();</span>
  <span class="n">messenger</span> <span class="o">=</span> <span class="n">pn_messenger</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

  
  <span class="k">if</span><span class="p">(</span><span class="n">certificate</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">pn_messenger_set_certificate</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">certificate</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">privatekey</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">pn_messenger_set_private_key</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">privatekey</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">if</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">pn_messenger_set_password</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">password</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">pn_messenger_start</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>
  <span class="n">check</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

  <span class="n">pn_messenger_subscribe</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">address</span><span class="p">);</span>
  <span class="n">check</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(;;)</span>
  <span class="p">{</span>
    <span class="n">pn_messenger_recv</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="mi">1024</span><span class="p">);</span>
    <span class="n">check</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

    <span class="k">while</span><span class="p">(</span><span class="n">pn_messenger_incoming</span><span class="p">(</span><span class="n">messenger</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="n">pn_messenger_get</span><span class="p">(</span><span class="n">messenger</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
      <span class="n">check</span><span class="p">(</span><span class="n">messenger</span><span class="p">);</span>

      <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
      <span class="kt">size_t</span> <span class="n">buffsize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
      <span class="n">pn_data_t</span> <span class="o">*</span><span class="n">body</span> <span class="o">=</span> <span class="n">pn_message_body</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
      <span class="n">pn_data_format</span><span class="p">(</span><span class="n">body</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buffsize</span><span class="p">);</span>

      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Address: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pn_message_get_address</span><span class="p">(</span><span class="n">message</span><span class="p">));</span>
      <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">pn_message_get_subject</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Subject: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">subject</span> <span class="o">?</span> <span class="n">subject</span> <span class="o">:</span> <span class="s">&quot;(no subject)&quot;</span><span class="p">);</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Content: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>

<p><a href="recv.c">Download this file</a></p>
