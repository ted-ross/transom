#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from transom.generate import *

def gen_messaging_api(release, source_dir, release_dir):
    component_dir = join(release_dir, "messaging-api")
    remove(component_dir)

    gen_cpp_messaging_api(release, source_dir, component_dir)
    gen_dotnet_messaging_api(release, source_dir, component_dir)
    gen_python_messaging_api(release, source_dir, component_dir)
    gen_ruby_messaging_api(release, source_dir, component_dir)

def gen_cpp_messaging_api(release, source_dir, component_dir):
    include_dir = join(source_dir, "cpp", "include")
    input_paths = (
        join(source_dir, "cpp", "docs", "api", "doxygen_mainpage.h"),
        join(include_dir, "qpid", "messaging"),
        join(include_dir, "qpid", "types"),
        )
    output_dir = join(component_dir, "cpp", "api")

    gen_doxygen(release=release,
                title="Qpid C++ Messaging API",
                input_paths=input_paths,
                strip_paths=(include_dir,),
                output_dir=output_dir)

def gen_dotnet_messaging_api(release, source_dir, component_dir):
    include_dir = join(source_dir, "cpp", "bindings", "qpid", "dotnet", "src")
    input_paths = (include_dir,)
    output_dir = join(component_dir, "dotnet", "api")

    gen_doxygen(release=release,
                title="Qpid .NET Messaging API",
                input_paths=input_paths,
                strip_paths=(include_dir,),
                output_dir=output_dir)

def gen_python_messaging_api(release, source_dir, component_dir):
    input_path = join(source_dir, "python")
    input_namespace = "qpid.messaging"
    output_dir = join(component_dir, "python", "api")

    gen_epydoc(release=release,
               title="Qpid Python Messaging API",
               input_paths=(input_path,),
               input_namespaces=(input_namespace,),
               output_dir=output_dir)

def gen_ruby_messaging_api(release, source_dir, component_dir):
    base_input_path = join(source_dir, "cpp", "bindings")
    input_path = join("qpid", "ruby", "lib")
    output_dir = join(component_dir, "ruby", "api")

    gen_rdoc(release=release,
             title="Qpid Ruby Messaging API",
             base_input_path=base_input_path,
             input_paths=(input_path,),
             output_dir=output_dir)

    #name = "qpid-{}-ruby-messaging-api-apiref".format(release)
    #make_archive(api_dir, output_dir, name)

def gen_qmf_api(release, source_dir, release_dir):
    component_dir = join(release_dir, "qmf")
    remove(component_dir)

    include_dir = join(source_dir, "cpp", "include")
    input_paths = (join(include_dir, "qmf"),)
    output_dir = join(component_dir, "cpp", "api")

    gen_doxygen(release=release,
                title="Qpid Management Framework",
                input_paths=input_paths,
                strip_paths=(include_dir,),
                output_dir=output_dir)

## Now do stuff ##

if len(sys.argv) != 3:
    sys.exit("Usage: script RELEASE RELEASE-DIR")

call("dot -V")
call("doxygen --version")
call("epydoc --version")
call("rdoc --version")

release = sys.argv[1]
release_dir = sys.argv[2]
source_dir = export_release(release)

gen_messaging_api(release, source_dir, release_dir)
gen_qmf_api(release, source_dir, release_dir)
