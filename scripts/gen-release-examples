#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from transom.generate import *

## Messaging API ##

def gen_messaging_api(release, source_dir, release_dir):
    component_dir = join(release_dir, "messaging-api")

    gen_cpp_messaging_api(release, source_dir, component_dir)
    gen_dotnet_messaging_api(release, source_dir, component_dir)
    gen_perl_messaging_api(release, source_dir, component_dir)
    gen_python_messaging_api(release, source_dir, component_dir)
    gen_ruby_messaging_api(release, source_dir, component_dir)

def gen_cpp_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "examples", "messaging")
    output_dir = join(component_dir, "cpp", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/cpp/examples/README.txt".format(release_url)
    source_url = "{}/qpid/cpp/examples/messaging".format(release_url)

    input_names = list_dir(input_dir, "*.cpp", "*.h")

    gen_examples(release=release,
                 lang="cpp",
                 title="C++ Messaging API Examples",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 readme_url=readme_url,
                 source_url=source_url)

def gen_dotnet_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "dotnet", "examples")
    output_dir = join(component_dir, "dotnet", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/dotnet/examples".format(release_url)

    # The layout of dotnet examples is funky, so some schlepping to
    # normalize it

    temp_dir = make_temp_dir()
    input_names = set()

    for path in find(input_dir, "*.cs"):
        name = split(path)[1]

        if name == "AssemblyInfo.cs":
            continue

        copy(path, join(temp_dir, name))
        input_names.add(name)

    input_names = sorted(input_names)

    gen_examples(release=release,
                 title=".NET Messaging API Examples",
                 lang="csharp",
                 input_dir=temp_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_perl_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "examples", "perl")
    output_dir = join(component_dir, "perl", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/examples/perl".format(release_url)

    input_names = list_dir(input_dir, "*.pl")

    gen_examples(release=release,
                 title="Perl Messaging API Examples",
                 lang="perl",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_python_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "python", "examples", "api")
    output_dir = join(component_dir, "python", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/python/examples/README.txt".format(release_url)
    source_url = "{}/qpid/python/examples".format(release_url)

    input_names = list_dir(input_dir)

    gen_examples(release=release,
                 title="Python Messaging API Examples",
                 lang="python",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 readme_url=readme_url,
                 source_url=source_url)

def gen_ruby_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "ruby", "examples")
    output_dir = join(component_dir, "ruby", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/ruby/examples".format(release_url)

    input_names = list_dir(input_dir, "*.rb")

    gen_examples(release=release,
                 title="Ruby Messaging API Examples",
                 lang="ruby",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

## JMS ##

def gen_jms(release, source_dir, release_dir):
    component_dir = join(release_dir, "qpid-jms")
    input_dir = join(source_dir, "java", "client", "example", "src", "main",
                     "java", "org", "apache", "qpid", "example")
    output_dir = join(component_dir, "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/java/client/README.txt".format(release_url)
    source_url = "{}/qpid/java/client/example/src/main/java/org/apache/qpid/example".format(release_url)

    input_names = list_dir(input_dir, "*.java", "*.properties")

    for name in input_names:
        lang = "java"

        if name.endswith(".properties"):
            lang = "ini"

        gen_example_page(release=release,
                         input_dir=input_dir,
                         input_name=name,
                         output_dir=output_dir,
                         lang=lang)

    gen_examples_index(release=release,
                       input_names=input_names,
                       output_dir=output_dir,
                       title="Qpid JMS Examples",
                       readme_url=readme_url,
                       source_url=source_url)

## QMF ##

def gen_qmf(release, source_dir, release_dir):
    component_dir = join(release_dir, "qmf")

    gen_cpp_qmf(release, source_dir, component_dir)
    gen_python_qmf(release, source_dir, component_dir)
    gen_ruby_qmf(release, source_dir, component_dir)

def gen_cpp_qmf(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qmf2", "examples", "cpp")
    output_dir = join(component_dir, "cpp", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qmf2/examples/cpp".format(release_url)

    input_names = list_dir(input_dir, "*.cpp", "*.h")

    gen_examples(release=release,
                 lang="cpp",
                 title="C++ QMF Examples",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_python_qmf(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qmf2", "examples", "python")
    output_dir = join(component_dir, "python", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qmf2/examples/python".format(release_url)

    input_names = list_dir(input_dir, "*.py")

    gen_examples(release=release,
                 title="Python QMF Examples",
                 lang="python",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_ruby_qmf(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qmf2", "examples", "ruby")
    output_dir = join(component_dir, "ruby", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qmf2/ruby/examples".format(release_url)

    input_names = list_dir(input_dir, "*.rb")

    gen_examples(release=release,
                 title="Ruby QMF Examples",
                 lang="ruby",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

## Now do stuff ##

if len(sys.argv) != 3:
    sys.exit("Usage: script RELEASE RELEASE-DIR")

release = sys.argv[1]
release_dir = sys.argv[2]
source_dir = export_release(release)

gen_jms(release, source_dir, release_dir)
gen_messaging_api(release, source_dir, release_dir)
gen_qmf(release, source_dir, release_dir)
