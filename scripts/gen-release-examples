#!/usr/bin/python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from transom.script import *

import re

from pygments import highlight as _highlight
from pygments.lexers import get_lexer_by_name
from pygments.formatters import HtmlFormatter

def gen_examples(release, title, lang, input_dir, input_names, output_dir,
                 readme_url=None, source_url=None):
    remove(output_dir)

    for name in input_names:
        gen_example_page(release=release,
                         input_dir=input_dir,
                         input_name=name,
                         output_dir=output_dir,
                         lang=lang)

    gen_examples_index(release=release,
                       input_names=input_names,
                       output_dir=output_dir,
                       title=title,
                       readme_url=readme_url,
                       source_url=source_url)

example_page_template = u"""
<h1>{title}</h1>
{content}
<p><a href="{input_name}">Download this file</a></p>
"""

def gen_example_page(release, input_dir, input_name, output_dir, lang):
    input_path = join(input_dir, input_name)
    output_path = join(output_dir, input_name)
    html_output_path = join(output_dir, "{}.html.in".format(input_name))

    content = read(input_path)
    content = strip_license_header(content, lang)
    content = content.strip()
    content = highlight(content, lang)

    title = input_name
    html = example_page_template.format(**locals())

    copy(input_path, output_path)
    write(html_output_path, html)

formatter = HtmlFormatter(linenos=False) # XXX

def highlight(string, lang):
    lexer = get_lexer_by_name(lang)
    return _highlight(string, lexer, formatter)

license_header_regexes = {
    "cpp": re.compile(r"/\*.*?\*/", re.DOTALL),
    "csharp": re.compile(r"/\*.*?\*/", re.DOTALL),
    "java": re.compile(r"/\*.*?\*/", re.DOTALL),
    }

def strip_license_header(string, lang):
    if lang in license_header_regexes:
        regex = license_header_regexes[lang]
        return re.sub(regex, "", string)
    elif lang in ("perl", "python", "ruby", "ini"):
        input_lines = string.split(os.linesep)
        output_lines = list()

        for i, line in enumerate(input_lines):
            if not line.startswith("#"):
                output_lines.extend(input_lines[i:])
                break

        return os.linesep.join(output_lines)
    else:
        return string

examples_index_template = """
# {title}

## Example files

{example_links}

## More information

{info_links}
"""

def gen_examples_index(release, input_names, output_dir, title,
                       readme_url=None, source_url=None):
    output_path = join(output_dir, "index.md")
    example_links = list()
    info_links = list()

    for name in input_names:
        example_links.append(" - [{}]({}.html)".format(name, name))

    if readme_url:
        info_links.append(" - [README]({})".format(readme_url))

    if source_url:
        info_links.append(" - [Source location]({})".format(source_url))

    example_links = os.linesep.join(example_links)
    info_links = os.linesep.join(info_links)
    
    index = examples_index_template.format(**locals())

    write(output_path, index)

## Messaging API ##

def gen_messaging_api(release, source_dir, release_dir):
    component_dir = join(release_dir, "messaging-api")

    gen_cpp_messaging_api(release, source_dir, component_dir)
    gen_dotnet_messaging_api(release, source_dir, component_dir)
    gen_perl_messaging_api(release, source_dir, component_dir)
    gen_python_messaging_api(release, source_dir, component_dir)
    gen_ruby_messaging_api(release, source_dir, component_dir)

def gen_cpp_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "examples", "messaging")
    output_dir = join(component_dir, "cpp", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/cpp/examples/README.txt".format(release_url)
    source_url = "{}/qpid/cpp/examples/messaging".format(release_url)

    input_names = list_dir(input_dir, "*.cpp", "*.h")

    gen_examples(release=release,
                 lang="cpp",
                 title="C++ Messaging API Examples",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 readme_url=readme_url,
                 source_url=source_url)

def gen_dotnet_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "dotnet", "examples")
    output_dir = join(component_dir, "dotnet", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/dotnet/examples".format(release_url)

    # The layout of dotnet examples is funky, so some schlepping to
    # normalize it

    temp_dir = make_temp_dir()
    input_names = set()

    for path in find(input_dir, "*.cs"):
        name = split(path)[1]

        if name == "AssemblyInfo.cs":
            continue

        copy(path, join(temp_dir, name))
        input_names.add(name)

    input_names = sorted(input_names)

    gen_examples(release=release,
                 title=".NET Messaging API Examples",
                 lang="csharp",
                 input_dir=temp_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_perl_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "examples", "perl")
    output_dir = join(component_dir, "perl", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/examples/perl".format(release_url)

    input_names = list_dir(input_dir, "*.pl")

    gen_examples(release=release,
                 title="Perl Messaging API Examples",
                 lang="perl",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

def gen_python_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "python", "examples", "api")
    output_dir = join(component_dir, "python", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/python/examples/README.txt".format(release_url)
    source_url = "{}/qpid/python/examples".format(release_url)

    input_names = list_dir(input_dir)

    gen_examples(release=release,
                 title="Python Messaging API Examples",
                 lang="python",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 readme_url=readme_url,
                 source_url=source_url)

def gen_ruby_messaging_api(release, source_dir, component_dir):
    input_dir = join(source_dir, "cpp", "bindings", "qpid", "ruby", "examples")
    output_dir = join(component_dir, "ruby", "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    source_url = "{}/qpid/cpp/bindings/qpid/ruby/examples".format(release_url)

    input_names = list_dir(input_dir, "*.rb")

    gen_examples(release=release,
                 title="Ruby Messaging API Examples",
                 lang="ruby",
                 input_dir=input_dir,
                 input_names=input_names,
                 output_dir=output_dir,
                 source_url=source_url)

## JMS ##

def gen_jms(release, source_dir, release_dir):
    component_dir = join(release_dir, "qpid-jms")
    remove(component_dir)

    input_dir = join(source_dir, "java", "client", "example", "src", "main",
                     "java", "org", "apache", "qpid", "example")
    output_dir = join(component_dir, "examples")

    release_url = "http://svn.apache.org/repos/asf/qpid/tags/{}".format(release)
    readme_url = "{}/qpid/java/client/README.txt".format(release_url)
    source_url = "{}/qpid/java/client/example/src/main/java/org/apache/qpid/example".format(release_url)

    input_names = list_dir(input_dir, "*.java", "*.properties")

    for name in input_names:
        lang = "java"

        if name.endswith(".properties"):
            lang = "ini"

        gen_example_page(release=release,
                         input_dir=input_dir,
                         input_name=name,
                         output_dir=output_dir,
                         lang=lang)

    gen_examples_index(release=release,
                       input_names=input_names,
                       output_dir=output_dir,
                       title="Qpid JMS Examples",
                       readme_url=readme_url,
                       source_url=source_url)

## Now do stuff ##

if len(sys.argv) != 3:
    sys.exit("Usage: script RELEASE RELEASE-DIR")

release = sys.argv[1]
release_dir = sys.argv[2]
source_dir = export_release(release)

gen_messaging_api(release, source_dir, release_dir)
gen_jms(release, source_dir, release_dir)
